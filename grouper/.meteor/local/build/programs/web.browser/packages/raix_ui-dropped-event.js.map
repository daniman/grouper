)]}'
{"version":3,"file":"/packages/raix:ui-dropped-event.js","sources":["raix:ui-dropped-event/dropped.event.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4B;AACA,U;AACA,0E;AACA,oB;AACA,6B;AACA,U;AACA,uB;AACA,G;;AAEA,kC;AACA,0B;;AAEA,kD;AACA,qD;AACA,wC;AACA,0B;AACA,yB;AACA,G;;AAEA,oC;AACA,yD;AACA,oB;;AAEA,Y;AACA,wB;;AAEA,sC;AACA,4B;;AAEA,oE;AACA,kC;AACA,gC;AACA,0C;AACA,qB;;AAEA,uB;;AAEA,8B;AACA,uF;;AAEA,+B;AACA,+D;AACA,sC;AACA,8B;;AAEA,gC;AACA,4C;AACA,Y;AACA,S;AACA,c;AACA,2B;AACA,sC;AACA,O;;AAEA,K;;AAEA,yB;AACA,4C;AACA,I","sourcesContent":["  // backwards compatibility\n  var ref;\n  if (typeof Blaze !== \"undefined\" && typeof Blaze.View !== \"undefined\") {\n    // Meteor 0.8.3+\n    ref = Template.prototype;\n  } else {\n    ref = UI.Component;\n  }\n\n  // Save super before overwriting\n  var _super = ref.events;\n\n  // The noopHandler stops propagation and default\n  var _noopHandler = function noopEventHandler(evt) {\n    // var evt = (e.originalEvent || e);\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  // Overwrite name it for debugging\n  ref.events = function uiDroppedEvents_Overwrite(dict) {\n    var self = this;\n\n    // Carry\n    var resultDict = {};\n\n    // Iterate over the event bindings\n    for (var name in dict) {\n\n      // XXX: we dont currently support 'dropped #foo, dropped #bar'\n      if (/^dropped/.test(name)) {\n        // Get the selector part\n        var selector = name.split(' ')[1];\n        var n = name;\n\n        if (selector) {\n\n          // Block drag events\n          resultDict['dragenter/dragexit/dragover/dragend ' + selector] = _noopHandler;\n\n          // Rig the drop event\n          resultDict['drop ' + selector] = function(evt, tmp) {\n            // Stop original behaviour\n            _noopHandler(evt);\n\n            // Run user callback\n            dict[n].apply(this, [evt, tmp]);\n          };\n        }\n      } else {\n        // Pass on original\n        resultDict[name] = dict[name];\n      }\n\n    }\n\n    // Hand over to super\n    return _super.apply(self, [resultDict]);\n  };\n"]}