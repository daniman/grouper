//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/linto:jquery-ui/1.11.2/jquery-ui.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! jQuery UI - v1.11.2 - 2014-10-16                                                                                   // 1
* http://jqueryui.com                                                                                                  // 2
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */                                             // 4
                                                                                                                       // 5
(function( factory ) {                                                                                                 // 6
	if ( typeof define === "function" && define.amd ) {                                                                   // 7
                                                                                                                       // 8
		// AMD. Register as an anonymous module.                                                                             // 9
		define([ "jquery" ], factory );                                                                                      // 10
	} else {                                                                                                              // 11
                                                                                                                       // 12
		// Browser globals                                                                                                   // 13
		factory( jQuery );                                                                                                   // 14
	}                                                                                                                     // 15
}(function( $ ) {                                                                                                      // 16
/*!                                                                                                                    // 17
 * jQuery UI Core 1.11.2                                                                                               // 18
 * http://jqueryui.com                                                                                                 // 19
 *                                                                                                                     // 20
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 21
 * Released under the MIT license.                                                                                     // 22
 * http://jquery.org/license                                                                                           // 23
 *                                                                                                                     // 24
 * http://api.jqueryui.com/category/ui-core/                                                                           // 25
 */                                                                                                                    // 26
                                                                                                                       // 27
                                                                                                                       // 28
// $.ui might exist from components with no dependencies, e.g., $.ui.position                                          // 29
$.ui = $.ui || {};                                                                                                     // 30
                                                                                                                       // 31
$.extend( $.ui, {                                                                                                      // 32
	version: "1.11.2",                                                                                                    // 33
                                                                                                                       // 34
	keyCode: {                                                                                                            // 35
		BACKSPACE: 8,                                                                                                        // 36
		COMMA: 188,                                                                                                          // 37
		DELETE: 46,                                                                                                          // 38
		DOWN: 40,                                                                                                            // 39
		END: 35,                                                                                                             // 40
		ENTER: 13,                                                                                                           // 41
		ESCAPE: 27,                                                                                                          // 42
		HOME: 36,                                                                                                            // 43
		LEFT: 37,                                                                                                            // 44
		PAGE_DOWN: 34,                                                                                                       // 45
		PAGE_UP: 33,                                                                                                         // 46
		PERIOD: 190,                                                                                                         // 47
		RIGHT: 39,                                                                                                           // 48
		SPACE: 32,                                                                                                           // 49
		TAB: 9,                                                                                                              // 50
		UP: 38                                                                                                               // 51
	}                                                                                                                     // 52
});                                                                                                                    // 53
                                                                                                                       // 54
// plugins                                                                                                             // 55
$.fn.extend({                                                                                                          // 56
	scrollParent: function( includeHidden ) {                                                                             // 57
		var position = this.css( "position" ),                                                                               // 58
			excludeStaticParent = position === "absolute",                                                                      // 59
			overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,                                           // 60
			scrollParent = this.parents().filter( function() {                                                                  // 61
				var parent = $( this );                                                                                            // 62
				if ( excludeStaticParent && parent.css( "position" ) === "static" ) {                                              // 63
					return false;                                                                                                     // 64
				}                                                                                                                  // 65
				return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );   // 66
			}).eq( 0 );                                                                                                         // 67
                                                                                                                       // 68
		return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;       // 69
	},                                                                                                                    // 70
                                                                                                                       // 71
	uniqueId: (function() {                                                                                               // 72
		var uuid = 0;                                                                                                        // 73
                                                                                                                       // 74
		return function() {                                                                                                  // 75
			return this.each(function() {                                                                                       // 76
				if ( !this.id ) {                                                                                                  // 77
					this.id = "ui-id-" + ( ++uuid );                                                                                  // 78
				}                                                                                                                  // 79
			});                                                                                                                 // 80
		};                                                                                                                   // 81
	})(),                                                                                                                 // 82
                                                                                                                       // 83
	removeUniqueId: function() {                                                                                          // 84
		return this.each(function() {                                                                                        // 85
			if ( /^ui-id-\d+$/.test( this.id ) ) {                                                                              // 86
				$( this ).removeAttr( "id" );                                                                                      // 87
			}                                                                                                                   // 88
		});                                                                                                                  // 89
	}                                                                                                                     // 90
});                                                                                                                    // 91
                                                                                                                       // 92
// selectors                                                                                                           // 93
function focusable( element, isTabIndexNotNaN ) {                                                                      // 94
	var map, mapName, img,                                                                                                // 95
		nodeName = element.nodeName.toLowerCase();                                                                           // 96
	if ( "area" === nodeName ) {                                                                                          // 97
		map = element.parentNode;                                                                                            // 98
		mapName = map.name;                                                                                                  // 99
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {                                           // 100
			return false;                                                                                                       // 101
		}                                                                                                                    // 102
		img = $( "img[usemap='#" + mapName + "']" )[ 0 ];                                                                    // 103
		return !!img && visible( img );                                                                                      // 104
	}                                                                                                                     // 105
	return ( /input|select|textarea|button|object/.test( nodeName ) ?                                                     // 106
		!element.disabled :                                                                                                  // 107
		"a" === nodeName ?                                                                                                   // 108
			element.href || isTabIndexNotNaN :                                                                                  // 109
			isTabIndexNotNaN) &&                                                                                                // 110
		// the element and all of its ancestors must be visible                                                              // 111
		visible( element );                                                                                                  // 112
}                                                                                                                      // 113
                                                                                                                       // 114
function visible( element ) {                                                                                          // 115
	return $.expr.filters.visible( element ) &&                                                                           // 116
		!$( element ).parents().addBack().filter(function() {                                                                // 117
			return $.css( this, "visibility" ) === "hidden";                                                                    // 118
		}).length;                                                                                                           // 119
}                                                                                                                      // 120
                                                                                                                       // 121
$.extend( $.expr[ ":" ], {                                                                                             // 122
	data: $.expr.createPseudo ?                                                                                           // 123
		$.expr.createPseudo(function( dataName ) {                                                                           // 124
			return function( elem ) {                                                                                           // 125
				return !!$.data( elem, dataName );                                                                                 // 126
			};                                                                                                                  // 127
		}) :                                                                                                                 // 128
		// support: jQuery <1.8                                                                                              // 129
		function( elem, i, match ) {                                                                                         // 130
			return !!$.data( elem, match[ 3 ] );                                                                                // 131
		},                                                                                                                   // 132
                                                                                                                       // 133
	focusable: function( element ) {                                                                                      // 134
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );                                                // 135
	},                                                                                                                    // 136
                                                                                                                       // 137
	tabbable: function( element ) {                                                                                       // 138
		var tabIndex = $.attr( element, "tabindex" ),                                                                        // 139
			isTabIndexNaN = isNaN( tabIndex );                                                                                  // 140
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );                                   // 141
	}                                                                                                                     // 142
});                                                                                                                    // 143
                                                                                                                       // 144
// support: jQuery <1.8                                                                                                // 145
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {                                                                            // 146
	$.each( [ "Width", "Height" ], function( i, name ) {                                                                  // 147
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],                                             // 148
			type = name.toLowerCase(),                                                                                          // 149
			orig = {                                                                                                            // 150
				innerWidth: $.fn.innerWidth,                                                                                       // 151
				innerHeight: $.fn.innerHeight,                                                                                     // 152
				outerWidth: $.fn.outerWidth,                                                                                       // 153
				outerHeight: $.fn.outerHeight                                                                                      // 154
			};                                                                                                                  // 155
                                                                                                                       // 156
		function reduce( elem, size, border, margin ) {                                                                      // 157
			$.each( side, function() {                                                                                          // 158
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;                                                        // 159
				if ( border ) {                                                                                                    // 160
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;                                              // 161
				}                                                                                                                  // 162
				if ( margin ) {                                                                                                    // 163
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;                                                        // 164
				}                                                                                                                  // 165
			});                                                                                                                 // 166
			return size;                                                                                                        // 167
		}                                                                                                                    // 168
                                                                                                                       // 169
		$.fn[ "inner" + name ] = function( size ) {                                                                          // 170
			if ( size === undefined ) {                                                                                         // 171
				return orig[ "inner" + name ].call( this );                                                                        // 172
			}                                                                                                                   // 173
                                                                                                                       // 174
			return this.each(function() {                                                                                       // 175
				$( this ).css( type, reduce( this, size ) + "px" );                                                                // 176
			});                                                                                                                 // 177
		};                                                                                                                   // 178
                                                                                                                       // 179
		$.fn[ "outer" + name] = function( size, margin ) {                                                                   // 180
			if ( typeof size !== "number" ) {                                                                                   // 181
				return orig[ "outer" + name ].call( this, size );                                                                  // 182
			}                                                                                                                   // 183
                                                                                                                       // 184
			return this.each(function() {                                                                                       // 185
				$( this).css( type, reduce( this, size, true, margin ) + "px" );                                                   // 186
			});                                                                                                                 // 187
		};                                                                                                                   // 188
	});                                                                                                                   // 189
}                                                                                                                      // 190
                                                                                                                       // 191
// support: jQuery <1.8                                                                                                // 192
if ( !$.fn.addBack ) {                                                                                                 // 193
	$.fn.addBack = function( selector ) {                                                                                 // 194
		return this.add( selector == null ?                                                                                  // 195
			this.prevObject : this.prevObject.filter( selector )                                                                // 196
		);                                                                                                                   // 197
	};                                                                                                                    // 198
}                                                                                                                      // 199
                                                                                                                       // 200
// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)                                                   // 201
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {                                               // 202
	$.fn.removeData = (function( removeData ) {                                                                           // 203
		return function( key ) {                                                                                             // 204
			if ( arguments.length ) {                                                                                           // 205
				return removeData.call( this, $.camelCase( key ) );                                                                // 206
			} else {                                                                                                            // 207
				return removeData.call( this );                                                                                    // 208
			}                                                                                                                   // 209
		};                                                                                                                   // 210
	})( $.fn.removeData );                                                                                                // 211
}                                                                                                                      // 212
                                                                                                                       // 213
// deprecated                                                                                                          // 214
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );                                                   // 215
                                                                                                                       // 216
$.fn.extend({                                                                                                          // 217
	focus: (function( orig ) {                                                                                            // 218
		return function( delay, fn ) {                                                                                       // 219
			return typeof delay === "number" ?                                                                                  // 220
				this.each(function() {                                                                                             // 221
					var elem = this;                                                                                                  // 222
					setTimeout(function() {                                                                                           // 223
						$( elem ).focus();                                                                                               // 224
						if ( fn ) {                                                                                                      // 225
							fn.call( elem );                                                                                                // 226
						}                                                                                                                // 227
					}, delay );                                                                                                       // 228
				}) :                                                                                                               // 229
				orig.apply( this, arguments );                                                                                     // 230
		};                                                                                                                   // 231
	})( $.fn.focus ),                                                                                                     // 232
                                                                                                                       // 233
	disableSelection: (function() {                                                                                       // 234
		var eventType = "onselectstart" in document.createElement( "div" ) ?                                                 // 235
			"selectstart" :                                                                                                     // 236
			"mousedown";                                                                                                        // 237
                                                                                                                       // 238
		return function() {                                                                                                  // 239
			return this.bind( eventType + ".ui-disableSelection", function( event ) {                                           // 240
				event.preventDefault();                                                                                            // 241
			});                                                                                                                 // 242
		};                                                                                                                   // 243
	})(),                                                                                                                 // 244
                                                                                                                       // 245
	enableSelection: function() {                                                                                         // 246
		return this.unbind( ".ui-disableSelection" );                                                                        // 247
	},                                                                                                                    // 248
                                                                                                                       // 249
	zIndex: function( zIndex ) {                                                                                          // 250
		if ( zIndex !== undefined ) {                                                                                        // 251
			return this.css( "zIndex", zIndex );                                                                                // 252
		}                                                                                                                    // 253
                                                                                                                       // 254
		if ( this.length ) {                                                                                                 // 255
			var elem = $( this[ 0 ] ), position, value;                                                                         // 256
			while ( elem.length && elem[ 0 ] !== document ) {                                                                   // 257
				// Ignore z-index if position is set to a value where z-index is ignored by the browser                            // 258
				// This makes behavior of this function consistent across browsers                                                 // 259
				// WebKit always returns auto if the element is positioned                                                         // 260
				position = elem.css( "position" );                                                                                 // 261
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {                                // 262
					// IE returns 0 when zIndex is not specified                                                                      // 263
					// other browsers return a string                                                                                 // 264
					// we ignore the case of nested elements with an explicit value of 0                                              // 265
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>                                               // 266
					value = parseInt( elem.css( "zIndex" ), 10 );                                                                     // 267
					if ( !isNaN( value ) && value !== 0 ) {                                                                           // 268
						return value;                                                                                                    // 269
					}                                                                                                                 // 270
				}                                                                                                                  // 271
				elem = elem.parent();                                                                                              // 272
			}                                                                                                                   // 273
		}                                                                                                                    // 274
                                                                                                                       // 275
		return 0;                                                                                                            // 276
	}                                                                                                                     // 277
});                                                                                                                    // 278
                                                                                                                       // 279
// $.ui.plugin is deprecated. Use $.widget() extensions instead.                                                       // 280
$.ui.plugin = {                                                                                                        // 281
	add: function( module, option, set ) {                                                                                // 282
		var i,                                                                                                               // 283
			proto = $.ui[ module ].prototype;                                                                                   // 284
		for ( i in set ) {                                                                                                   // 285
			proto.plugins[ i ] = proto.plugins[ i ] || [];                                                                      // 286
			proto.plugins[ i ].push( [ option, set[ i ] ] );                                                                    // 287
		}                                                                                                                    // 288
	},                                                                                                                    // 289
	call: function( instance, name, args, allowDisconnected ) {                                                           // 290
		var i,                                                                                                               // 291
			set = instance.plugins[ name ];                                                                                     // 292
                                                                                                                       // 293
		if ( !set ) {                                                                                                        // 294
			return;                                                                                                             // 295
		}                                                                                                                    // 296
                                                                                                                       // 297
		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;                                                                                                             // 299
		}                                                                                                                    // 300
                                                                                                                       // 301
		for ( i = 0; i < set.length; i++ ) {                                                                                 // 302
			if ( instance.options[ set[ i ][ 0 ] ] ) {                                                                          // 303
				set[ i ][ 1 ].apply( instance.element, args );                                                                     // 304
			}                                                                                                                   // 305
		}                                                                                                                    // 306
	}                                                                                                                     // 307
};                                                                                                                     // 308
                                                                                                                       // 309
                                                                                                                       // 310
/*!                                                                                                                    // 311
 * jQuery UI Widget 1.11.2                                                                                             // 312
 * http://jqueryui.com                                                                                                 // 313
 *                                                                                                                     // 314
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 315
 * Released under the MIT license.                                                                                     // 316
 * http://jquery.org/license                                                                                           // 317
 *                                                                                                                     // 318
 * http://api.jqueryui.com/jQuery.widget/                                                                              // 319
 */                                                                                                                    // 320
                                                                                                                       // 321
                                                                                                                       // 322
var widget_uuid = 0,                                                                                                   // 323
	widget_slice = Array.prototype.slice;                                                                                 // 324
                                                                                                                       // 325
$.cleanData = (function( orig ) {                                                                                      // 326
	return function( elems ) {                                                                                            // 327
		var events, elem, i;                                                                                                 // 328
		for ( i = 0; (elem = elems[i]) != null; i++ ) {                                                                      // 329
			try {                                                                                                               // 330
                                                                                                                       // 331
				// Only trigger remove when necessary to save time                                                                 // 332
				events = $._data( elem, "events" );                                                                                // 333
				if ( events && events.remove ) {                                                                                   // 334
					$( elem ).triggerHandler( "remove" );                                                                             // 335
				}                                                                                                                  // 336
                                                                                                                       // 337
			// http://bugs.jquery.com/ticket/8235                                                                               // 338
			} catch ( e ) {}                                                                                                    // 339
		}                                                                                                                    // 340
		orig( elems );                                                                                                       // 341
	};                                                                                                                    // 342
})( $.cleanData );                                                                                                     // 343
                                                                                                                       // 344
$.widget = function( name, base, prototype ) {                                                                         // 345
	var fullName, existingConstructor, constructor, basePrototype,                                                        // 346
		// proxiedPrototype allows the provided prototype to remain unmodified                                               // 347
		// so that it can be used as a mixin for multiple widgets (#8876)                                                    // 348
		proxiedPrototype = {},                                                                                               // 349
		namespace = name.split( "." )[ 0 ];                                                                                  // 350
                                                                                                                       // 351
	name = name.split( "." )[ 1 ];                                                                                        // 352
	fullName = namespace + "-" + name;                                                                                    // 353
                                                                                                                       // 354
	if ( !prototype ) {                                                                                                   // 355
		prototype = base;                                                                                                    // 356
		base = $.Widget;                                                                                                     // 357
	}                                                                                                                     // 358
                                                                                                                       // 359
	// create selector for plugin                                                                                         // 360
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {                                                          // 361
		return !!$.data( elem, fullName );                                                                                   // 362
	};                                                                                                                    // 363
                                                                                                                       // 364
	$[ namespace ] = $[ namespace ] || {};                                                                                // 365
	existingConstructor = $[ namespace ][ name ];                                                                         // 366
	constructor = $[ namespace ][ name ] = function( options, element ) {                                                 // 367
		// allow instantiation without "new" keyword                                                                         // 368
		if ( !this._createWidget ) {                                                                                         // 369
			return new constructor( options, element );                                                                         // 370
		}                                                                                                                    // 371
                                                                                                                       // 372
		// allow instantiation without initializing for simple inheritance                                                   // 373
		// must use "new" keyword (the code above always passes args)                                                        // 374
		if ( arguments.length ) {                                                                                            // 375
			this._createWidget( options, element );                                                                             // 376
		}                                                                                                                    // 377
	};                                                                                                                    // 378
	// extend with the existing constructor to carry over any static properties                                           // 379
	$.extend( constructor, existingConstructor, {                                                                         // 380
		version: prototype.version,                                                                                          // 381
		// copy the object used to create the prototype in case we need to                                                   // 382
		// redefine the widget later                                                                                         // 383
		_proto: $.extend( {}, prototype ),                                                                                   // 384
		// track widgets that inherit from this widget in case this widget is                                                // 385
		// redefined after a widget inherits from it                                                                         // 386
		_childConstructors: []                                                                                               // 387
	});                                                                                                                   // 388
                                                                                                                       // 389
	basePrototype = new base();                                                                                           // 390
	// we need to make the options hash a property directly on the new instance                                           // 391
	// otherwise we'll modify the options hash on the prototype that we're                                                // 392
	// inheriting from                                                                                                    // 393
	basePrototype.options = $.widget.extend( {}, basePrototype.options );                                                 // 394
	$.each( prototype, function( prop, value ) {                                                                          // 395
		if ( !$.isFunction( value ) ) {                                                                                      // 396
			proxiedPrototype[ prop ] = value;                                                                                   // 397
			return;                                                                                                             // 398
		}                                                                                                                    // 399
		proxiedPrototype[ prop ] = (function() {                                                                             // 400
			var _super = function() {                                                                                           // 401
					return base.prototype[ prop ].apply( this, arguments );                                                           // 402
				},                                                                                                                 // 403
				_superApply = function( args ) {                                                                                   // 404
					return base.prototype[ prop ].apply( this, args );                                                                // 405
				};                                                                                                                 // 406
			return function() {                                                                                                 // 407
				var __super = this._super,                                                                                         // 408
					__superApply = this._superApply,                                                                                  // 409
					returnValue;                                                                                                      // 410
                                                                                                                       // 411
				this._super = _super;                                                                                              // 412
				this._superApply = _superApply;                                                                                    // 413
                                                                                                                       // 414
				returnValue = value.apply( this, arguments );                                                                      // 415
                                                                                                                       // 416
				this._super = __super;                                                                                             // 417
				this._superApply = __superApply;                                                                                   // 418
                                                                                                                       // 419
				return returnValue;                                                                                                // 420
			};                                                                                                                  // 421
		})();                                                                                                                // 422
	});                                                                                                                   // 423
	constructor.prototype = $.widget.extend( basePrototype, {                                                             // 424
		// TODO: remove support for widgetEventPrefix                                                                        // 425
		// always use the name + a colon as the prefix, e.g., draggable:start                                                // 426
		// don't prefix for widgets that aren't DOM-based                                                                    // 427
		widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name                            // 428
	}, proxiedPrototype, {                                                                                                // 429
		constructor: constructor,                                                                                            // 430
		namespace: namespace,                                                                                                // 431
		widgetName: name,                                                                                                    // 432
		widgetFullName: fullName                                                                                             // 433
	});                                                                                                                   // 434
                                                                                                                       // 435
	// If this widget is being redefined then we need to find all widgets that                                            // 436
	// are inheriting from it and redefine all of them so that they inherit from                                          // 437
	// the new version of this widget. We're essentially trying to replace one                                            // 438
	// level in the prototype chain.                                                                                      // 439
	if ( existingConstructor ) {                                                                                          // 440
		$.each( existingConstructor._childConstructors, function( i, child ) {                                               // 441
			var childPrototype = child.prototype;                                                                               // 442
                                                                                                                       // 443
			// redefine the child widget using the same prototype that was                                                      // 444
			// originally used, but inherit from the new version of the base                                                    // 445
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );                  // 446
		});                                                                                                                  // 447
		// remove the list of existing child constructors from the old constructor                                           // 448
		// so the old child constructors can be garbage collected                                                            // 449
		delete existingConstructor._childConstructors;                                                                       // 450
	} else {                                                                                                              // 451
		base._childConstructors.push( constructor );                                                                         // 452
	}                                                                                                                     // 453
                                                                                                                       // 454
	$.widget.bridge( name, constructor );                                                                                 // 455
                                                                                                                       // 456
	return constructor;                                                                                                   // 457
};                                                                                                                     // 458
                                                                                                                       // 459
$.widget.extend = function( target ) {                                                                                 // 460
	var input = widget_slice.call( arguments, 1 ),                                                                        // 461
		inputIndex = 0,                                                                                                      // 462
		inputLength = input.length,                                                                                          // 463
		key,                                                                                                                 // 464
		value;                                                                                                               // 465
	for ( ; inputIndex < inputLength; inputIndex++ ) {                                                                    // 466
		for ( key in input[ inputIndex ] ) {                                                                                 // 467
			value = input[ inputIndex ][ key ];                                                                                 // 468
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {                                           // 469
				// Clone objects                                                                                                   // 470
				if ( $.isPlainObject( value ) ) {                                                                                  // 471
					target[ key ] = $.isPlainObject( target[ key ] ) ?                                                                // 472
						$.widget.extend( {}, target[ key ], value ) :                                                                    // 473
						// Don't extend strings, arrays, etc. with objects                                                               // 474
						$.widget.extend( {}, value );                                                                                    // 475
				// Copy everything else by reference                                                                               // 476
				} else {                                                                                                           // 477
					target[ key ] = value;                                                                                            // 478
				}                                                                                                                  // 479
			}                                                                                                                   // 480
		}                                                                                                                    // 481
	}                                                                                                                     // 482
	return target;                                                                                                        // 483
};                                                                                                                     // 484
                                                                                                                       // 485
$.widget.bridge = function( name, object ) {                                                                           // 486
	var fullName = object.prototype.widgetFullName || name;                                                               // 487
	$.fn[ name ] = function( options ) {                                                                                  // 488
		var isMethodCall = typeof options === "string",                                                                      // 489
			args = widget_slice.call( arguments, 1 ),                                                                           // 490
			returnValue = this;                                                                                                 // 491
                                                                                                                       // 492
		// allow multiple hashes to be passed on init                                                                        // 493
		options = !isMethodCall && args.length ?                                                                             // 494
			$.widget.extend.apply( null, [ options ].concat(args) ) :                                                           // 495
			options;                                                                                                            // 496
                                                                                                                       // 497
		if ( isMethodCall ) {                                                                                                // 498
			this.each(function() {                                                                                              // 499
				var methodValue,                                                                                                   // 500
					instance = $.data( this, fullName );                                                                              // 501
				if ( options === "instance" ) {                                                                                    // 502
					returnValue = instance;                                                                                           // 503
					return false;                                                                                                     // 504
				}                                                                                                                  // 505
				if ( !instance ) {                                                                                                 // 506
					return $.error( "cannot call methods on " + name + " prior to initialization; " +                                 // 507
						"attempted to call method '" + options + "'" );                                                                  // 508
				}                                                                                                                  // 509
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {                                         // 510
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );                            // 511
				}                                                                                                                  // 512
				methodValue = instance[ options ].apply( instance, args );                                                         // 513
				if ( methodValue !== instance && methodValue !== undefined ) {                                                     // 514
					returnValue = methodValue && methodValue.jquery ?                                                                 // 515
						returnValue.pushStack( methodValue.get() ) :                                                                     // 516
						methodValue;                                                                                                     // 517
					return false;                                                                                                     // 518
				}                                                                                                                  // 519
			});                                                                                                                 // 520
		} else {                                                                                                             // 521
			this.each(function() {                                                                                              // 522
				var instance = $.data( this, fullName );                                                                           // 523
				if ( instance ) {                                                                                                  // 524
					instance.option( options || {} );                                                                                 // 525
					if ( instance._init ) {                                                                                           // 526
						instance._init();                                                                                                // 527
					}                                                                                                                 // 528
				} else {                                                                                                           // 529
					$.data( this, fullName, new object( options, this ) );                                                            // 530
				}                                                                                                                  // 531
			});                                                                                                                 // 532
		}                                                                                                                    // 533
                                                                                                                       // 534
		return returnValue;                                                                                                  // 535
	};                                                                                                                    // 536
};                                                                                                                     // 537
                                                                                                                       // 538
$.Widget = function( /* options, element */ ) {};                                                                      // 539
$.Widget._childConstructors = [];                                                                                      // 540
                                                                                                                       // 541
$.Widget.prototype = {                                                                                                 // 542
	widgetName: "widget",                                                                                                 // 543
	widgetEventPrefix: "",                                                                                                // 544
	defaultElement: "<div>",                                                                                              // 545
	options: {                                                                                                            // 546
		disabled: false,                                                                                                     // 547
                                                                                                                       // 548
		// callbacks                                                                                                         // 549
		create: null                                                                                                         // 550
	},                                                                                                                    // 551
	_createWidget: function( options, element ) {                                                                         // 552
		element = $( element || this.defaultElement || this )[ 0 ];                                                          // 553
		this.element = $( element );                                                                                         // 554
		this.uuid = widget_uuid++;                                                                                           // 555
		this.eventNamespace = "." + this.widgetName + this.uuid;                                                             // 556
                                                                                                                       // 557
		this.bindings = $();                                                                                                 // 558
		this.hoverable = $();                                                                                                // 559
		this.focusable = $();                                                                                                // 560
                                                                                                                       // 561
		if ( element !== this ) {                                                                                            // 562
			$.data( element, this.widgetFullName, this );                                                                       // 563
			this._on( true, this.element, {                                                                                     // 564
				remove: function( event ) {                                                                                        // 565
					if ( event.target === element ) {                                                                                 // 566
						this.destroy();                                                                                                  // 567
					}                                                                                                                 // 568
				}                                                                                                                  // 569
			});                                                                                                                 // 570
			this.document = $( element.style ?                                                                                  // 571
				// element within the document                                                                                     // 572
				element.ownerDocument :                                                                                            // 573
				// element is window or document                                                                                   // 574
				element.document || element );                                                                                     // 575
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );                                   // 576
		}                                                                                                                    // 577
                                                                                                                       // 578
		this.options = $.widget.extend( {},                                                                                  // 579
			this.options,                                                                                                       // 580
			this._getCreateOptions(),                                                                                           // 581
			options );                                                                                                          // 582
                                                                                                                       // 583
		this._create();                                                                                                      // 584
		this._trigger( "create", null, this._getCreateEventData() );                                                         // 585
		this._init();                                                                                                        // 586
	},                                                                                                                    // 587
	_getCreateOptions: $.noop,                                                                                            // 588
	_getCreateEventData: $.noop,                                                                                          // 589
	_create: $.noop,                                                                                                      // 590
	_init: $.noop,                                                                                                        // 591
                                                                                                                       // 592
	destroy: function() {                                                                                                 // 593
		this._destroy();                                                                                                     // 594
		// we can probably remove the unbind calls in 2.0                                                                    // 595
		// all event bindings should go through this._on()                                                                   // 596
		this.element                                                                                                         // 597
			.unbind( this.eventNamespace )                                                                                      // 598
			.removeData( this.widgetFullName )                                                                                  // 599
			// support: jquery <1.6.3                                                                                           // 600
			// http://bugs.jquery.com/ticket/9413                                                                               // 601
			.removeData( $.camelCase( this.widgetFullName ) );                                                                  // 602
		this.widget()                                                                                                        // 603
			.unbind( this.eventNamespace )                                                                                      // 604
			.removeAttr( "aria-disabled" )                                                                                      // 605
			.removeClass(                                                                                                       // 606
				this.widgetFullName + "-disabled " +                                                                               // 607
				"ui-state-disabled" );                                                                                             // 608
                                                                                                                       // 609
		// clean up events and states                                                                                        // 610
		this.bindings.unbind( this.eventNamespace );                                                                         // 611
		this.hoverable.removeClass( "ui-state-hover" );                                                                      // 612
		this.focusable.removeClass( "ui-state-focus" );                                                                      // 613
	},                                                                                                                    // 614
	_destroy: $.noop,                                                                                                     // 615
                                                                                                                       // 616
	widget: function() {                                                                                                  // 617
		return this.element;                                                                                                 // 618
	},                                                                                                                    // 619
                                                                                                                       // 620
	option: function( key, value ) {                                                                                      // 621
		var options = key,                                                                                                   // 622
			parts,                                                                                                              // 623
			curOption,                                                                                                          // 624
			i;                                                                                                                  // 625
                                                                                                                       // 626
		if ( arguments.length === 0 ) {                                                                                      // 627
			// don't return a reference to the internal hash                                                                    // 628
			return $.widget.extend( {}, this.options );                                                                         // 629
		}                                                                                                                    // 630
                                                                                                                       // 631
		if ( typeof key === "string" ) {                                                                                     // 632
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }                                                     // 633
			options = {};                                                                                                       // 634
			parts = key.split( "." );                                                                                           // 635
			key = parts.shift();                                                                                                // 636
			if ( parts.length ) {                                                                                               // 637
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );                                           // 638
				for ( i = 0; i < parts.length - 1; i++ ) {                                                                         // 639
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};                                                          // 640
					curOption = curOption[ parts[ i ] ];                                                                              // 641
				}                                                                                                                  // 642
				key = parts.pop();                                                                                                 // 643
				if ( arguments.length === 1 ) {                                                                                    // 644
					return curOption[ key ] === undefined ? null : curOption[ key ];                                                  // 645
				}                                                                                                                  // 646
				curOption[ key ] = value;                                                                                          // 647
			} else {                                                                                                            // 648
				if ( arguments.length === 1 ) {                                                                                    // 649
					return this.options[ key ] === undefined ? null : this.options[ key ];                                            // 650
				}                                                                                                                  // 651
				options[ key ] = value;                                                                                            // 652
			}                                                                                                                   // 653
		}                                                                                                                    // 654
                                                                                                                       // 655
		this._setOptions( options );                                                                                         // 656
                                                                                                                       // 657
		return this;                                                                                                         // 658
	},                                                                                                                    // 659
	_setOptions: function( options ) {                                                                                    // 660
		var key;                                                                                                             // 661
                                                                                                                       // 662
		for ( key in options ) {                                                                                             // 663
			this._setOption( key, options[ key ] );                                                                             // 664
		}                                                                                                                    // 665
                                                                                                                       // 666
		return this;                                                                                                         // 667
	},                                                                                                                    // 668
	_setOption: function( key, value ) {                                                                                  // 669
		this.options[ key ] = value;                                                                                         // 670
                                                                                                                       // 671
		if ( key === "disabled" ) {                                                                                          // 672
			this.widget()                                                                                                       // 673
				.toggleClass( this.widgetFullName + "-disabled", !!value );                                                        // 674
                                                                                                                       // 675
			// If the widget is becoming disabled, then nothing is interactive                                                  // 676
			if ( value ) {                                                                                                      // 677
				this.hoverable.removeClass( "ui-state-hover" );                                                                    // 678
				this.focusable.removeClass( "ui-state-focus" );                                                                    // 679
			}                                                                                                                   // 680
		}                                                                                                                    // 681
                                                                                                                       // 682
		return this;                                                                                                         // 683
	},                                                                                                                    // 684
                                                                                                                       // 685
	enable: function() {                                                                                                  // 686
		return this._setOptions({ disabled: false });                                                                        // 687
	},                                                                                                                    // 688
	disable: function() {                                                                                                 // 689
		return this._setOptions({ disabled: true });                                                                         // 690
	},                                                                                                                    // 691
                                                                                                                       // 692
	_on: function( suppressDisabledCheck, element, handlers ) {                                                           // 693
		var delegateElement,                                                                                                 // 694
			instance = this;                                                                                                    // 695
                                                                                                                       // 696
		// no suppressDisabledCheck flag, shuffle arguments                                                                  // 697
		if ( typeof suppressDisabledCheck !== "boolean" ) {                                                                  // 698
			handlers = element;                                                                                                 // 699
			element = suppressDisabledCheck;                                                                                    // 700
			suppressDisabledCheck = false;                                                                                      // 701
		}                                                                                                                    // 702
                                                                                                                       // 703
		// no element argument, shuffle and use this.element                                                                 // 704
		if ( !handlers ) {                                                                                                   // 705
			handlers = element;                                                                                                 // 706
			element = this.element;                                                                                             // 707
			delegateElement = this.widget();                                                                                    // 708
		} else {                                                                                                             // 709
			element = delegateElement = $( element );                                                                           // 710
			this.bindings = this.bindings.add( element );                                                                       // 711
		}                                                                                                                    // 712
                                                                                                                       // 713
		$.each( handlers, function( event, handler ) {                                                                       // 714
			function handlerProxy() {                                                                                           // 715
				// allow widgets to customize the disabled handling                                                                // 716
				// - disabled as an array instead of boolean                                                                       // 717
				// - disabled class as method for disabling individual parts                                                       // 718
				if ( !suppressDisabledCheck &&                                                                                     // 719
						( instance.options.disabled === true ||                                                                          // 720
							$( this ).hasClass( "ui-state-disabled" ) ) ) {                                                                 // 721
					return;                                                                                                           // 722
				}                                                                                                                  // 723
				return ( typeof handler === "string" ? instance[ handler ] : handler )                                             // 724
					.apply( instance, arguments );                                                                                    // 725
			}                                                                                                                   // 726
                                                                                                                       // 727
			// copy the guid so direct unbinding works                                                                          // 728
			if ( typeof handler !== "string" ) {                                                                                // 729
				handlerProxy.guid = handler.guid =                                                                                 // 730
					handler.guid || handlerProxy.guid || $.guid++;                                                                    // 731
			}                                                                                                                   // 732
                                                                                                                       // 733
			var match = event.match( /^([\w:-]*)\s*(.*)$/ ),                                                                    // 734
				eventName = match[1] + instance.eventNamespace,                                                                    // 735
				selector = match[2];                                                                                               // 736
			if ( selector ) {                                                                                                   // 737
				delegateElement.delegate( selector, eventName, handlerProxy );                                                     // 738
			} else {                                                                                                            // 739
				element.bind( eventName, handlerProxy );                                                                           // 740
			}                                                                                                                   // 741
		});                                                                                                                  // 742
	},                                                                                                                    // 743
                                                                                                                       // 744
	_off: function( element, eventName ) {                                                                                // 745
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +                                       // 746
			this.eventNamespace;                                                                                                // 747
		element.unbind( eventName ).undelegate( eventName );                                                                 // 748
                                                                                                                       // 749
		// Clear the stack to avoid memory leaks (#10056)                                                                    // 750
		this.bindings = $( this.bindings.not( element ).get() );                                                             // 751
		this.focusable = $( this.focusable.not( element ).get() );                                                           // 752
		this.hoverable = $( this.hoverable.not( element ).get() );                                                           // 753
	},                                                                                                                    // 754
                                                                                                                       // 755
	_delay: function( handler, delay ) {                                                                                  // 756
		function handlerProxy() {                                                                                            // 757
			return ( typeof handler === "string" ? instance[ handler ] : handler )                                              // 758
				.apply( instance, arguments );                                                                                     // 759
		}                                                                                                                    // 760
		var instance = this;                                                                                                 // 761
		return setTimeout( handlerProxy, delay || 0 );                                                                       // 762
	},                                                                                                                    // 763
                                                                                                                       // 764
	_hoverable: function( element ) {                                                                                     // 765
		this.hoverable = this.hoverable.add( element );                                                                      // 766
		this._on( element, {                                                                                                 // 767
			mouseenter: function( event ) {                                                                                     // 768
				$( event.currentTarget ).addClass( "ui-state-hover" );                                                             // 769
			},                                                                                                                  // 770
			mouseleave: function( event ) {                                                                                     // 771
				$( event.currentTarget ).removeClass( "ui-state-hover" );                                                          // 772
			}                                                                                                                   // 773
		});                                                                                                                  // 774
	},                                                                                                                    // 775
                                                                                                                       // 776
	_focusable: function( element ) {                                                                                     // 777
		this.focusable = this.focusable.add( element );                                                                      // 778
		this._on( element, {                                                                                                 // 779
			focusin: function( event ) {                                                                                        // 780
				$( event.currentTarget ).addClass( "ui-state-focus" );                                                             // 781
			},                                                                                                                  // 782
			focusout: function( event ) {                                                                                       // 783
				$( event.currentTarget ).removeClass( "ui-state-focus" );                                                          // 784
			}                                                                                                                   // 785
		});                                                                                                                  // 786
	},                                                                                                                    // 787
                                                                                                                       // 788
	_trigger: function( type, event, data ) {                                                                             // 789
		var prop, orig,                                                                                                      // 790
			callback = this.options[ type ];                                                                                    // 791
                                                                                                                       // 792
		data = data || {};                                                                                                   // 793
		event = $.Event( event );                                                                                            // 794
		event.type = ( type === this.widgetEventPrefix ?                                                                     // 795
			type :                                                                                                              // 796
			this.widgetEventPrefix + type ).toLowerCase();                                                                      // 797
		// the original event may come from any element                                                                      // 798
		// so we need to reset the target on the new event                                                                   // 799
		event.target = this.element[ 0 ];                                                                                    // 800
                                                                                                                       // 801
		// copy original event properties over to the new event                                                              // 802
		orig = event.originalEvent;                                                                                          // 803
		if ( orig ) {                                                                                                        // 804
			for ( prop in orig ) {                                                                                              // 805
				if ( !( prop in event ) ) {                                                                                        // 806
					event[ prop ] = orig[ prop ];                                                                                     // 807
				}                                                                                                                  // 808
			}                                                                                                                   // 809
		}                                                                                                                    // 810
                                                                                                                       // 811
		this.element.trigger( event, data );                                                                                 // 812
		return !( $.isFunction( callback ) &&                                                                                // 813
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||                                            // 814
			event.isDefaultPrevented() );                                                                                       // 815
	}                                                                                                                     // 816
};                                                                                                                     // 817
                                                                                                                       // 818
$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {                                       // 819
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {                                         // 820
		if ( typeof options === "string" ) {                                                                                 // 821
			options = { effect: options };                                                                                      // 822
		}                                                                                                                    // 823
		var hasOptions,                                                                                                      // 824
			effectName = !options ?                                                                                             // 825
				method :                                                                                                           // 826
				options === true || typeof options === "number" ?                                                                  // 827
					defaultEffect :                                                                                                   // 828
					options.effect || defaultEffect;                                                                                  // 829
		options = options || {};                                                                                             // 830
		if ( typeof options === "number" ) {                                                                                 // 831
			options = { duration: options };                                                                                    // 832
		}                                                                                                                    // 833
		hasOptions = !$.isEmptyObject( options );                                                                            // 834
		options.complete = callback;                                                                                         // 835
		if ( options.delay ) {                                                                                               // 836
			element.delay( options.delay );                                                                                     // 837
		}                                                                                                                    // 838
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {                                                   // 839
			element[ method ]( options );                                                                                       // 840
		} else if ( effectName !== method && element[ effectName ] ) {                                                       // 841
			element[ effectName ]( options.duration, options.easing, callback );                                                // 842
		} else {                                                                                                             // 843
			element.queue(function( next ) {                                                                                    // 844
				$( this )[ method ]();                                                                                             // 845
				if ( callback ) {                                                                                                  // 846
					callback.call( element[ 0 ] );                                                                                    // 847
				}                                                                                                                  // 848
				next();                                                                                                            // 849
			});                                                                                                                 // 850
		}                                                                                                                    // 851
	};                                                                                                                    // 852
});                                                                                                                    // 853
                                                                                                                       // 854
var widget = $.widget;                                                                                                 // 855
                                                                                                                       // 856
                                                                                                                       // 857
/*!                                                                                                                    // 858
 * jQuery UI Mouse 1.11.2                                                                                              // 859
 * http://jqueryui.com                                                                                                 // 860
 *                                                                                                                     // 861
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 862
 * Released under the MIT license.                                                                                     // 863
 * http://jquery.org/license                                                                                           // 864
 *                                                                                                                     // 865
 * http://api.jqueryui.com/mouse/                                                                                      // 866
 */                                                                                                                    // 867
                                                                                                                       // 868
                                                                                                                       // 869
var mouseHandled = false;                                                                                              // 870
$( document ).mouseup( function() {                                                                                    // 871
	mouseHandled = false;                                                                                                 // 872
});                                                                                                                    // 873
                                                                                                                       // 874
var mouse = $.widget("ui.mouse", {                                                                                     // 875
	version: "1.11.2",                                                                                                    // 876
	options: {                                                                                                            // 877
		cancel: "input,textarea,button,select,option",                                                                       // 878
		distance: 1,                                                                                                         // 879
		delay: 0                                                                                                             // 880
	},                                                                                                                    // 881
	_mouseInit: function() {                                                                                              // 882
		var that = this;                                                                                                     // 883
                                                                                                                       // 884
		this.element                                                                                                         // 885
			.bind("mousedown." + this.widgetName, function(event) {                                                             // 886
				return that._mouseDown(event);                                                                                     // 887
			})                                                                                                                  // 888
			.bind("click." + this.widgetName, function(event) {                                                                 // 889
				if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {                                       // 890
					$.removeData(event.target, that.widgetName + ".preventClickEvent");                                               // 891
					event.stopImmediatePropagation();                                                                                 // 892
					return false;                                                                                                     // 893
				}                                                                                                                  // 894
			});                                                                                                                 // 895
                                                                                                                       // 896
		this.started = false;                                                                                                // 897
	},                                                                                                                    // 898
                                                                                                                       // 899
	// TODO: make sure destroying one instance of mouse doesn't mess with                                                 // 900
	// other instances of mouse                                                                                           // 901
	_mouseDestroy: function() {                                                                                           // 902
		this.element.unbind("." + this.widgetName);                                                                          // 903
		if ( this._mouseMoveDelegate ) {                                                                                     // 904
			this.document                                                                                                       // 905
				.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)                                                   // 906
				.unbind("mouseup." + this.widgetName, this._mouseUpDelegate);                                                      // 907
		}                                                                                                                    // 908
	},                                                                                                                    // 909
                                                                                                                       // 910
	_mouseDown: function(event) {                                                                                         // 911
		// don't let more than one widget handle mouseStart                                                                  // 912
		if ( mouseHandled ) {                                                                                                // 913
			return;                                                                                                             // 914
		}                                                                                                                    // 915
                                                                                                                       // 916
		this._mouseMoved = false;                                                                                            // 917
                                                                                                                       // 918
		// we may have missed mouseup (out of window)                                                                        // 919
		(this._mouseStarted && this._mouseUp(event));                                                                        // 920
                                                                                                                       // 921
		this._mouseDownEvent = event;                                                                                        // 922
                                                                                                                       // 923
		var that = this,                                                                                                     // 924
			btnIsLeft = (event.which === 1),                                                                                    // 925
			// event.target.nodeName works around a bug in IE 8 with                                                            // 926
			// disabled inputs (#7620)                                                                                          // 927
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {                                                        // 929
			return true;                                                                                                        // 930
		}                                                                                                                    // 931
                                                                                                                       // 932
		this.mouseDelayMet = !this.options.delay;                                                                            // 933
		if (!this.mouseDelayMet) {                                                                                           // 934
			this._mouseDelayTimer = setTimeout(function() {                                                                     // 935
				that.mouseDelayMet = true;                                                                                         // 936
			}, this.options.delay);                                                                                             // 937
		}                                                                                                                    // 938
                                                                                                                       // 939
		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {                                                   // 940
			this._mouseStarted = (this._mouseStart(event) !== false);                                                           // 941
			if (!this._mouseStarted) {                                                                                          // 942
				event.preventDefault();                                                                                            // 943
				return true;                                                                                                       // 944
			}                                                                                                                   // 945
		}                                                                                                                    // 946
                                                                                                                       // 947
		// Click event may never have fired (Gecko & Opera)                                                                  // 948
		if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {                                         // 949
			$.removeData(event.target, this.widgetName + ".preventClickEvent");                                                 // 950
		}                                                                                                                    // 951
                                                                                                                       // 952
		// these delegates are required to keep context                                                                      // 953
		this._mouseMoveDelegate = function(event) {                                                                          // 954
			return that._mouseMove(event);                                                                                      // 955
		};                                                                                                                   // 956
		this._mouseUpDelegate = function(event) {                                                                            // 957
			return that._mouseUp(event);                                                                                        // 958
		};                                                                                                                   // 959
                                                                                                                       // 960
		this.document                                                                                                        // 961
			.bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )                                                    // 962
			.bind( "mouseup." + this.widgetName, this._mouseUpDelegate );                                                       // 963
                                                                                                                       // 964
		event.preventDefault();                                                                                              // 965
                                                                                                                       // 966
		mouseHandled = true;                                                                                                 // 967
		return true;                                                                                                         // 968
	},                                                                                                                    // 969
                                                                                                                       // 970
	_mouseMove: function(event) {                                                                                         // 971
		// Only check for mouseups outside the document if you've moved inside the document                                  // 972
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will                                // 973
		// fire a mousemove event if content is placed under the cursor. See #7778                                           // 974
		// Support: IE <9                                                                                                    // 975
		if ( this._mouseMoved ) {                                                                                            // 976
			// IE mouseup check - mouseup happened when mouse was out of window                                                 // 977
			if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {                          // 978
				return this._mouseUp(event);                                                                                       // 979
                                                                                                                       // 980
			// Iframe mouseup check - mouseup occurred in another document                                                      // 981
			} else if ( !event.which ) {                                                                                        // 982
				return this._mouseUp( event );                                                                                     // 983
			}                                                                                                                   // 984
		}                                                                                                                    // 985
                                                                                                                       // 986
		if ( event.which || event.button ) {                                                                                 // 987
			this._mouseMoved = true;                                                                                            // 988
		}                                                                                                                    // 989
                                                                                                                       // 990
		if (this._mouseStarted) {                                                                                            // 991
			this._mouseDrag(event);                                                                                             // 992
			return event.preventDefault();                                                                                      // 993
		}                                                                                                                    // 994
                                                                                                                       // 995
		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {                                                   // 996
			this._mouseStarted =                                                                                                // 997
				(this._mouseStart(this._mouseDownEvent, event) !== false);                                                         // 998
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));                                               // 999
		}                                                                                                                    // 1000
                                                                                                                       // 1001
		return !this._mouseStarted;                                                                                          // 1002
	},                                                                                                                    // 1003
                                                                                                                       // 1004
	_mouseUp: function(event) {                                                                                           // 1005
		this.document                                                                                                        // 1006
			.unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )                                                  // 1007
			.unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );                                                     // 1008
                                                                                                                       // 1009
		if (this._mouseStarted) {                                                                                            // 1010
			this._mouseStarted = false;                                                                                         // 1011
                                                                                                                       // 1012
			if (event.target === this._mouseDownEvent.target) {                                                                 // 1013
				$.data(event.target, this.widgetName + ".preventClickEvent", true);                                                // 1014
			}                                                                                                                   // 1015
                                                                                                                       // 1016
			this._mouseStop(event);                                                                                             // 1017
		}                                                                                                                    // 1018
                                                                                                                       // 1019
		mouseHandled = false;                                                                                                // 1020
		return false;                                                                                                        // 1021
	},                                                                                                                    // 1022
                                                                                                                       // 1023
	_mouseDistanceMet: function(event) {                                                                                  // 1024
		return (Math.max(                                                                                                    // 1025
				Math.abs(this._mouseDownEvent.pageX - event.pageX),                                                                // 1026
				Math.abs(this._mouseDownEvent.pageY - event.pageY)                                                                 // 1027
			) >= this.options.distance                                                                                          // 1028
		);                                                                                                                   // 1029
	},                                                                                                                    // 1030
                                                                                                                       // 1031
	_mouseDelayMet: function(/* event */) {                                                                               // 1032
		return this.mouseDelayMet;                                                                                           // 1033
	},                                                                                                                    // 1034
                                                                                                                       // 1035
	// These are placeholder methods, to be overriden by extending plugin                                                 // 1036
	_mouseStart: function(/* event */) {},                                                                                // 1037
	_mouseDrag: function(/* event */) {},                                                                                 // 1038
	_mouseStop: function(/* event */) {},                                                                                 // 1039
	_mouseCapture: function(/* event */) { return true; }                                                                 // 1040
});                                                                                                                    // 1041
                                                                                                                       // 1042
                                                                                                                       // 1043
/*!                                                                                                                    // 1044
 * jQuery UI Position 1.11.2                                                                                           // 1045
 * http://jqueryui.com                                                                                                 // 1046
 *                                                                                                                     // 1047
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 1048
 * Released under the MIT license.                                                                                     // 1049
 * http://jquery.org/license                                                                                           // 1050
 *                                                                                                                     // 1051
 * http://api.jqueryui.com/position/                                                                                   // 1052
 */                                                                                                                    // 1053
                                                                                                                       // 1054
(function() {                                                                                                          // 1055
                                                                                                                       // 1056
$.ui = $.ui || {};                                                                                                     // 1057
                                                                                                                       // 1058
var cachedScrollbarWidth, supportsOffsetFractions,                                                                     // 1059
	max = Math.max,                                                                                                       // 1060
	abs = Math.abs,                                                                                                       // 1061
	round = Math.round,                                                                                                   // 1062
	rhorizontal = /left|center|right/,                                                                                    // 1063
	rvertical = /top|center|bottom/,                                                                                      // 1064
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,                                                                                    // 1065
	rposition = /^\w+/,                                                                                                   // 1066
	rpercent = /%$/,                                                                                                      // 1067
	_position = $.fn.position;                                                                                            // 1068
                                                                                                                       // 1069
function getOffsets( offsets, width, height ) {                                                                        // 1070
	return [                                                                                                              // 1071
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),                                    // 1072
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )                                    // 1073
	];                                                                                                                    // 1074
}                                                                                                                      // 1075
                                                                                                                       // 1076
function parseCss( element, property ) {                                                                               // 1077
	return parseInt( $.css( element, property ), 10 ) || 0;                                                               // 1078
}                                                                                                                      // 1079
                                                                                                                       // 1080
function getDimensions( elem ) {                                                                                       // 1081
	var raw = elem[0];                                                                                                    // 1082
	if ( raw.nodeType === 9 ) {                                                                                           // 1083
		return {                                                                                                             // 1084
			width: elem.width(),                                                                                                // 1085
			height: elem.height(),                                                                                              // 1086
			offset: { top: 0, left: 0 }                                                                                         // 1087
		};                                                                                                                   // 1088
	}                                                                                                                     // 1089
	if ( $.isWindow( raw ) ) {                                                                                            // 1090
		return {                                                                                                             // 1091
			width: elem.width(),                                                                                                // 1092
			height: elem.height(),                                                                                              // 1093
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }                                                          // 1094
		};                                                                                                                   // 1095
	}                                                                                                                     // 1096
	if ( raw.preventDefault ) {                                                                                           // 1097
		return {                                                                                                             // 1098
			width: 0,                                                                                                           // 1099
			height: 0,                                                                                                          // 1100
			offset: { top: raw.pageY, left: raw.pageX }                                                                         // 1101
		};                                                                                                                   // 1102
	}                                                                                                                     // 1103
	return {                                                                                                              // 1104
		width: elem.outerWidth(),                                                                                            // 1105
		height: elem.outerHeight(),                                                                                          // 1106
		offset: elem.offset()                                                                                                // 1107
	};                                                                                                                    // 1108
}                                                                                                                      // 1109
                                                                                                                       // 1110
$.position = {                                                                                                         // 1111
	scrollbarWidth: function() {                                                                                          // 1112
		if ( cachedScrollbarWidth !== undefined ) {                                                                          // 1113
			return cachedScrollbarWidth;                                                                                        // 1114
		}                                                                                                                    // 1115
		var w1, w2,                                                                                                          // 1116
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];                                                                                       // 1118
                                                                                                                       // 1119
		$( "body" ).append( div );                                                                                           // 1120
		w1 = innerDiv.offsetWidth;                                                                                           // 1121
		div.css( "overflow", "scroll" );                                                                                     // 1122
                                                                                                                       // 1123
		w2 = innerDiv.offsetWidth;                                                                                           // 1124
                                                                                                                       // 1125
		if ( w1 === w2 ) {                                                                                                   // 1126
			w2 = div[0].clientWidth;                                                                                            // 1127
		}                                                                                                                    // 1128
                                                                                                                       // 1129
		div.remove();                                                                                                        // 1130
                                                                                                                       // 1131
		return (cachedScrollbarWidth = w1 - w2);                                                                             // 1132
	},                                                                                                                    // 1133
	getScrollInfo: function( within ) {                                                                                   // 1134
		var overflowX = within.isWindow || within.isDocument ? "" :                                                          // 1135
				within.element.css( "overflow-x" ),                                                                                // 1136
			overflowY = within.isWindow || within.isDocument ? "" :                                                             // 1137
				within.element.css( "overflow-y" ),                                                                                // 1138
			hasOverflowX = overflowX === "scroll" ||                                                                            // 1139
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),                                          // 1140
			hasOverflowY = overflowY === "scroll" ||                                                                            // 1141
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );                                        // 1142
		return {                                                                                                             // 1143
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,                                                              // 1144
			height: hasOverflowX ? $.position.scrollbarWidth() : 0                                                              // 1145
		};                                                                                                                   // 1146
	},                                                                                                                    // 1147
	getWithinInfo: function( element ) {                                                                                  // 1148
		var withinElement = $( element || window ),                                                                          // 1149
			isWindow = $.isWindow( withinElement[0] ),                                                                          // 1150
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;                                             // 1151
		return {                                                                                                             // 1152
			element: withinElement,                                                                                             // 1153
			isWindow: isWindow,                                                                                                 // 1154
			isDocument: isDocument,                                                                                             // 1155
			offset: withinElement.offset() || { left: 0, top: 0 },                                                              // 1156
			scrollLeft: withinElement.scrollLeft(),                                                                             // 1157
			scrollTop: withinElement.scrollTop(),                                                                               // 1158
                                                                                                                       // 1159
			// support: jQuery 1.6.x                                                                                            // 1160
			// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows                                          // 1161
			width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),                                 // 1162
			height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()                               // 1163
		};                                                                                                                   // 1164
	}                                                                                                                     // 1165
};                                                                                                                     // 1166
                                                                                                                       // 1167
$.fn.position = function( options ) {                                                                                  // 1168
	if ( !options || !options.of ) {                                                                                      // 1169
		return _position.apply( this, arguments );                                                                           // 1170
	}                                                                                                                     // 1171
                                                                                                                       // 1172
	// make a copy, we don't want to modify arguments                                                                     // 1173
	options = $.extend( {}, options );                                                                                    // 1174
                                                                                                                       // 1175
	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,                                      // 1176
		target = $( options.of ),                                                                                            // 1177
		within = $.position.getWithinInfo( options.within ),                                                                 // 1178
		scrollInfo = $.position.getScrollInfo( within ),                                                                     // 1179
		collision = ( options.collision || "flip" ).split( " " ),                                                            // 1180
		offsets = {};                                                                                                        // 1181
                                                                                                                       // 1182
	dimensions = getDimensions( target );                                                                                 // 1183
	if ( target[0].preventDefault ) {                                                                                     // 1184
		// force left top to allow flipping                                                                                  // 1185
		options.at = "left top";                                                                                             // 1186
	}                                                                                                                     // 1187
	targetWidth = dimensions.width;                                                                                       // 1188
	targetHeight = dimensions.height;                                                                                     // 1189
	targetOffset = dimensions.offset;                                                                                     // 1190
	// clone to reuse original targetOffset later                                                                         // 1191
	basePosition = $.extend( {}, targetOffset );                                                                          // 1192
                                                                                                                       // 1193
	// force my and at to have valid horizontal and vertical positions                                                    // 1194
	// if a value is missing or invalid, it will be converted to center                                                   // 1195
	$.each( [ "my", "at" ], function() {                                                                                  // 1196
		var pos = ( options[ this ] || "" ).split( " " ),                                                                    // 1197
			horizontalOffset,                                                                                                   // 1198
			verticalOffset;                                                                                                     // 1199
                                                                                                                       // 1200
		if ( pos.length === 1) {                                                                                             // 1201
			pos = rhorizontal.test( pos[ 0 ] ) ?                                                                                // 1202
				pos.concat( [ "center" ] ) :                                                                                       // 1203
				rvertical.test( pos[ 0 ] ) ?                                                                                       // 1204
					[ "center" ].concat( pos ) :                                                                                      // 1205
					[ "center", "center" ];                                                                                           // 1206
		}                                                                                                                    // 1207
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";                                                       // 1208
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";                                                         // 1209
                                                                                                                       // 1210
		// calculate offsets                                                                                                 // 1211
		horizontalOffset = roffset.exec( pos[ 0 ] );                                                                         // 1212
		verticalOffset = roffset.exec( pos[ 1 ] );                                                                           // 1213
		offsets[ this ] = [                                                                                                  // 1214
			horizontalOffset ? horizontalOffset[ 0 ] : 0,                                                                       // 1215
			verticalOffset ? verticalOffset[ 0 ] : 0                                                                            // 1216
		];                                                                                                                   // 1217
                                                                                                                       // 1218
		// reduce to just the positions without the offsets                                                                  // 1219
		options[ this ] = [                                                                                                  // 1220
			rposition.exec( pos[ 0 ] )[ 0 ],                                                                                    // 1221
			rposition.exec( pos[ 1 ] )[ 0 ]                                                                                     // 1222
		];                                                                                                                   // 1223
	});                                                                                                                   // 1224
                                                                                                                       // 1225
	// normalize collision option                                                                                         // 1226
	if ( collision.length === 1 ) {                                                                                       // 1227
		collision[ 1 ] = collision[ 0 ];                                                                                     // 1228
	}                                                                                                                     // 1229
                                                                                                                       // 1230
	if ( options.at[ 0 ] === "right" ) {                                                                                  // 1231
		basePosition.left += targetWidth;                                                                                    // 1232
	} else if ( options.at[ 0 ] === "center" ) {                                                                          // 1233
		basePosition.left += targetWidth / 2;                                                                                // 1234
	}                                                                                                                     // 1235
                                                                                                                       // 1236
	if ( options.at[ 1 ] === "bottom" ) {                                                                                 // 1237
		basePosition.top += targetHeight;                                                                                    // 1238
	} else if ( options.at[ 1 ] === "center" ) {                                                                          // 1239
		basePosition.top += targetHeight / 2;                                                                                // 1240
	}                                                                                                                     // 1241
                                                                                                                       // 1242
	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );                                                       // 1243
	basePosition.left += atOffset[ 0 ];                                                                                   // 1244
	basePosition.top += atOffset[ 1 ];                                                                                    // 1245
                                                                                                                       // 1246
	return this.each(function() {                                                                                         // 1247
		var collisionPosition, using,                                                                                        // 1248
			elem = $( this ),                                                                                                   // 1249
			elemWidth = elem.outerWidth(),                                                                                      // 1250
			elemHeight = elem.outerHeight(),                                                                                    // 1251
			marginLeft = parseCss( this, "marginLeft" ),                                                                        // 1252
			marginTop = parseCss( this, "marginTop" ),                                                                          // 1253
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,                       // 1254
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,                    // 1255
			position = $.extend( {}, basePosition ),                                                                            // 1256
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );                                         // 1257
                                                                                                                       // 1258
		if ( options.my[ 0 ] === "right" ) {                                                                                 // 1259
			position.left -= elemWidth;                                                                                         // 1260
		} else if ( options.my[ 0 ] === "center" ) {                                                                         // 1261
			position.left -= elemWidth / 2;                                                                                     // 1262
		}                                                                                                                    // 1263
                                                                                                                       // 1264
		if ( options.my[ 1 ] === "bottom" ) {                                                                                // 1265
			position.top -= elemHeight;                                                                                         // 1266
		} else if ( options.my[ 1 ] === "center" ) {                                                                         // 1267
			position.top -= elemHeight / 2;                                                                                     // 1268
		}                                                                                                                    // 1269
                                                                                                                       // 1270
		position.left += myOffset[ 0 ];                                                                                      // 1271
		position.top += myOffset[ 1 ];                                                                                       // 1272
                                                                                                                       // 1273
		// if the browser doesn't support fractions, then round for consistent results                                       // 1274
		if ( !supportsOffsetFractions ) {                                                                                    // 1275
			position.left = round( position.left );                                                                             // 1276
			position.top = round( position.top );                                                                               // 1277
		}                                                                                                                    // 1278
                                                                                                                       // 1279
		collisionPosition = {                                                                                                // 1280
			marginLeft: marginLeft,                                                                                             // 1281
			marginTop: marginTop                                                                                                // 1282
		};                                                                                                                   // 1283
                                                                                                                       // 1284
		$.each( [ "left", "top" ], function( i, dir ) {                                                                      // 1285
			if ( $.ui.position[ collision[ i ] ] ) {                                                                            // 1286
				$.ui.position[ collision[ i ] ][ dir ]( position, {                                                                // 1287
					targetWidth: targetWidth,                                                                                         // 1288
					targetHeight: targetHeight,                                                                                       // 1289
					elemWidth: elemWidth,                                                                                             // 1290
					elemHeight: elemHeight,                                                                                           // 1291
					collisionPosition: collisionPosition,                                                                             // 1292
					collisionWidth: collisionWidth,                                                                                   // 1293
					collisionHeight: collisionHeight,                                                                                 // 1294
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],                                        // 1295
					my: options.my,                                                                                                   // 1296
					at: options.at,                                                                                                   // 1297
					within: within,                                                                                                   // 1298
					elem: elem                                                                                                        // 1299
				});                                                                                                                // 1300
			}                                                                                                                   // 1301
		});                                                                                                                  // 1302
                                                                                                                       // 1303
		if ( options.using ) {                                                                                               // 1304
			// adds feedback as second argument to using callback, if present                                                   // 1305
			using = function( props ) {                                                                                         // 1306
				var left = targetOffset.left - position.left,                                                                      // 1307
					right = left + targetWidth - elemWidth,                                                                           // 1308
					top = targetOffset.top - position.top,                                                                            // 1309
					bottom = top + targetHeight - elemHeight,                                                                         // 1310
					feedback = {                                                                                                      // 1311
						target: {                                                                                                        // 1312
							element: target,                                                                                                // 1313
							left: targetOffset.left,                                                                                        // 1314
							top: targetOffset.top,                                                                                          // 1315
							width: targetWidth,                                                                                             // 1316
							height: targetHeight                                                                                            // 1317
						},                                                                                                               // 1318
						element: {                                                                                                       // 1319
							element: elem,                                                                                                  // 1320
							left: position.left,                                                                                            // 1321
							top: position.top,                                                                                              // 1322
							width: elemWidth,                                                                                               // 1323
							height: elemHeight                                                                                              // 1324
						},                                                                                                               // 1325
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",                                                  // 1326
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"                                                     // 1327
					};                                                                                                                // 1328
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {                                              // 1329
					feedback.horizontal = "center";                                                                                   // 1330
				}                                                                                                                  // 1331
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {                                           // 1332
					feedback.vertical = "middle";                                                                                     // 1333
				}                                                                                                                  // 1334
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {                                       // 1335
					feedback.important = "horizontal";                                                                                // 1336
				} else {                                                                                                           // 1337
					feedback.important = "vertical";                                                                                  // 1338
				}                                                                                                                  // 1339
				options.using.call( this, props, feedback );                                                                       // 1340
			};                                                                                                                  // 1341
		}                                                                                                                    // 1342
                                                                                                                       // 1343
		elem.offset( $.extend( position, { using: using } ) );                                                               // 1344
	});                                                                                                                   // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
$.ui.position = {                                                                                                      // 1348
	fit: {                                                                                                                // 1349
		left: function( position, data ) {                                                                                   // 1350
			var within = data.within,                                                                                           // 1351
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,                                           // 1352
				outerWidth = within.width,                                                                                         // 1353
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,                                              // 1354
				overLeft = withinOffset - collisionPosLeft,                                                                        // 1355
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,                                    // 1356
				newOverRight;                                                                                                      // 1357
                                                                                                                       // 1358
			// element is wider than within                                                                                     // 1359
			if ( data.collisionWidth > outerWidth ) {                                                                           // 1360
				// element is initially over the left side of within                                                               // 1361
				if ( overLeft > 0 && overRight <= 0 ) {                                                                            // 1362
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;                        // 1363
					position.left += overLeft - newOverRight;                                                                         // 1364
				// element is initially over right side of within                                                                  // 1365
				} else if ( overRight > 0 && overLeft <= 0 ) {                                                                     // 1366
					position.left = withinOffset;                                                                                     // 1367
				// element is initially over both left and right sides of within                                                   // 1368
				} else {                                                                                                           // 1369
					if ( overLeft > overRight ) {                                                                                     // 1370
						position.left = withinOffset + outerWidth - data.collisionWidth;                                                 // 1371
					} else {                                                                                                          // 1372
						position.left = withinOffset;                                                                                    // 1373
					}                                                                                                                 // 1374
				}                                                                                                                  // 1375
			// too far left -> align with left edge                                                                             // 1376
			} else if ( overLeft > 0 ) {                                                                                        // 1377
				position.left += overLeft;                                                                                         // 1378
			// too far right -> align with right edge                                                                           // 1379
			} else if ( overRight > 0 ) {                                                                                       // 1380
				position.left -= overRight;                                                                                        // 1381
			// adjust based on position and margin                                                                              // 1382
			} else {                                                                                                            // 1383
				position.left = max( position.left - collisionPosLeft, position.left );                                            // 1384
			}                                                                                                                   // 1385
		},                                                                                                                   // 1386
		top: function( position, data ) {                                                                                    // 1387
			var within = data.within,                                                                                           // 1388
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,                                             // 1389
				outerHeight = data.within.height,                                                                                  // 1390
				collisionPosTop = position.top - data.collisionPosition.marginTop,                                                 // 1391
				overTop = withinOffset - collisionPosTop,                                                                          // 1392
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,                                  // 1393
				newOverBottom;                                                                                                     // 1394
                                                                                                                       // 1395
			// element is taller than within                                                                                    // 1396
			if ( data.collisionHeight > outerHeight ) {                                                                         // 1397
				// element is initially over the top of within                                                                     // 1398
				if ( overTop > 0 && overBottom <= 0 ) {                                                                            // 1399
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;                       // 1400
					position.top += overTop - newOverBottom;                                                                          // 1401
				// element is initially over bottom of within                                                                      // 1402
				} else if ( overBottom > 0 && overTop <= 0 ) {                                                                     // 1403
					position.top = withinOffset;                                                                                      // 1404
				// element is initially over both top and bottom of within                                                         // 1405
				} else {                                                                                                           // 1406
					if ( overTop > overBottom ) {                                                                                     // 1407
						position.top = withinOffset + outerHeight - data.collisionHeight;                                                // 1408
					} else {                                                                                                          // 1409
						position.top = withinOffset;                                                                                     // 1410
					}                                                                                                                 // 1411
				}                                                                                                                  // 1412
			// too far up -> align with top                                                                                     // 1413
			} else if ( overTop > 0 ) {                                                                                         // 1414
				position.top += overTop;                                                                                           // 1415
			// too far down -> align with bottom edge                                                                           // 1416
			} else if ( overBottom > 0 ) {                                                                                      // 1417
				position.top -= overBottom;                                                                                        // 1418
			// adjust based on position and margin                                                                              // 1419
			} else {                                                                                                            // 1420
				position.top = max( position.top - collisionPosTop, position.top );                                                // 1421
			}                                                                                                                   // 1422
		}                                                                                                                    // 1423
	},                                                                                                                    // 1424
	flip: {                                                                                                               // 1425
		left: function( position, data ) {                                                                                   // 1426
			var within = data.within,                                                                                           // 1427
				withinOffset = within.offset.left + within.scrollLeft,                                                             // 1428
				outerWidth = within.width,                                                                                         // 1429
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,                                             // 1430
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,                                              // 1431
				overLeft = collisionPosLeft - offsetLeft,                                                                          // 1432
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,                                      // 1433
				myOffset = data.my[ 0 ] === "left" ?                                                                               // 1434
					-data.elemWidth :                                                                                                 // 1435
					data.my[ 0 ] === "right" ?                                                                                        // 1436
						data.elemWidth :                                                                                                 // 1437
						0,                                                                                                               // 1438
				atOffset = data.at[ 0 ] === "left" ?                                                                               // 1439
					data.targetWidth :                                                                                                // 1440
					data.at[ 0 ] === "right" ?                                                                                        // 1441
						-data.targetWidth :                                                                                              // 1442
						0,                                                                                                               // 1443
				offset = -2 * data.offset[ 0 ],                                                                                    // 1444
				newOverRight,                                                                                                      // 1445
				newOverLeft;                                                                                                       // 1446
                                                                                                                       // 1447
			if ( overLeft < 0 ) {                                                                                               // 1448
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;     // 1449
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {                                                        // 1450
					position.left += myOffset + atOffset + offset;                                                                    // 1451
				}                                                                                                                  // 1452
			} else if ( overRight > 0 ) {                                                                                       // 1453
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;       // 1454
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {                                                         // 1455
					position.left += myOffset + atOffset + offset;                                                                    // 1456
				}                                                                                                                  // 1457
			}                                                                                                                   // 1458
		},                                                                                                                   // 1459
		top: function( position, data ) {                                                                                    // 1460
			var within = data.within,                                                                                           // 1461
				withinOffset = within.offset.top + within.scrollTop,                                                               // 1462
				outerHeight = within.height,                                                                                       // 1463
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,                                                // 1464
				collisionPosTop = position.top - data.collisionPosition.marginTop,                                                 // 1465
				overTop = collisionPosTop - offsetTop,                                                                             // 1466
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,                                     // 1467
				top = data.my[ 1 ] === "top",                                                                                      // 1468
				myOffset = top ?                                                                                                   // 1469
					-data.elemHeight :                                                                                                // 1470
					data.my[ 1 ] === "bottom" ?                                                                                       // 1471
						data.elemHeight :                                                                                                // 1472
						0,                                                                                                               // 1473
				atOffset = data.at[ 1 ] === "top" ?                                                                                // 1474
					data.targetHeight :                                                                                               // 1475
					data.at[ 1 ] === "bottom" ?                                                                                       // 1476
						-data.targetHeight :                                                                                             // 1477
						0,                                                                                                               // 1478
				offset = -2 * data.offset[ 1 ],                                                                                    // 1479
				newOverTop,                                                                                                        // 1480
				newOverBottom;                                                                                                     // 1481
			if ( overTop < 0 ) {                                                                                                // 1482
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;   // 1483
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;                                                                     // 1485
				}                                                                                                                  // 1486
			} else if ( overBottom > 0 ) {                                                                                      // 1487
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;           // 1488
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;                                                                     // 1490
				}                                                                                                                  // 1491
			}                                                                                                                   // 1492
		}                                                                                                                    // 1493
	},                                                                                                                    // 1494
	flipfit: {                                                                                                            // 1495
		left: function() {                                                                                                   // 1496
			$.ui.position.flip.left.apply( this, arguments );                                                                   // 1497
			$.ui.position.fit.left.apply( this, arguments );                                                                    // 1498
		},                                                                                                                   // 1499
		top: function() {                                                                                                    // 1500
			$.ui.position.flip.top.apply( this, arguments );                                                                    // 1501
			$.ui.position.fit.top.apply( this, arguments );                                                                     // 1502
		}                                                                                                                    // 1503
	}                                                                                                                     // 1504
};                                                                                                                     // 1505
                                                                                                                       // 1506
// fraction support test                                                                                               // 1507
(function() {                                                                                                          // 1508
	var testElement, testElementParent, testElementStyle, offsetLeft, i,                                                  // 1509
		body = document.getElementsByTagName( "body" )[ 0 ],                                                                 // 1510
		div = document.createElement( "div" );                                                                               // 1511
                                                                                                                       // 1512
	//Create a "fake body" for testing based on method used in jQuery.support                                             // 1513
	testElement = document.createElement( body ? "div" : "body" );                                                        // 1514
	testElementStyle = {                                                                                                  // 1515
		visibility: "hidden",                                                                                                // 1516
		width: 0,                                                                                                            // 1517
		height: 0,                                                                                                           // 1518
		border: 0,                                                                                                           // 1519
		margin: 0,                                                                                                           // 1520
		background: "none"                                                                                                   // 1521
	};                                                                                                                    // 1522
	if ( body ) {                                                                                                         // 1523
		$.extend( testElementStyle, {                                                                                        // 1524
			position: "absolute",                                                                                               // 1525
			left: "-1000px",                                                                                                    // 1526
			top: "-1000px"                                                                                                      // 1527
		});                                                                                                                  // 1528
	}                                                                                                                     // 1529
	for ( i in testElementStyle ) {                                                                                       // 1530
		testElement.style[ i ] = testElementStyle[ i ];                                                                      // 1531
	}                                                                                                                     // 1532
	testElement.appendChild( div );                                                                                       // 1533
	testElementParent = body || document.documentElement;                                                                 // 1534
	testElementParent.insertBefore( testElement, testElementParent.firstChild );                                          // 1535
                                                                                                                       // 1536
	div.style.cssText = "position: absolute; left: 10.7432222px;";                                                        // 1537
                                                                                                                       // 1538
	offsetLeft = $( div ).offset().left;                                                                                  // 1539
	supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;                                                         // 1540
                                                                                                                       // 1541
	testElement.innerHTML = "";                                                                                           // 1542
	testElementParent.removeChild( testElement );                                                                         // 1543
})();                                                                                                                  // 1544
                                                                                                                       // 1545
})();                                                                                                                  // 1546
                                                                                                                       // 1547
var position = $.ui.position;                                                                                          // 1548
                                                                                                                       // 1549
                                                                                                                       // 1550
/*!                                                                                                                    // 1551
 * jQuery UI Accordion 1.11.2                                                                                          // 1552
 * http://jqueryui.com                                                                                                 // 1553
 *                                                                                                                     // 1554
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 1555
 * Released under the MIT license.                                                                                     // 1556
 * http://jquery.org/license                                                                                           // 1557
 *                                                                                                                     // 1558
 * http://api.jqueryui.com/accordion/                                                                                  // 1559
 */                                                                                                                    // 1560
                                                                                                                       // 1561
                                                                                                                       // 1562
var accordion = $.widget( "ui.accordion", {                                                                            // 1563
	version: "1.11.2",                                                                                                    // 1564
	options: {                                                                                                            // 1565
		active: 0,                                                                                                           // 1566
		animate: {},                                                                                                         // 1567
		collapsible: false,                                                                                                  // 1568
		event: "click",                                                                                                      // 1569
		header: "> li > :first-child,> :not(li):even",                                                                       // 1570
		heightStyle: "auto",                                                                                                 // 1571
		icons: {                                                                                                             // 1572
			activeHeader: "ui-icon-triangle-1-s",                                                                               // 1573
			header: "ui-icon-triangle-1-e"                                                                                      // 1574
		},                                                                                                                   // 1575
                                                                                                                       // 1576
		// callbacks                                                                                                         // 1577
		activate: null,                                                                                                      // 1578
		beforeActivate: null                                                                                                 // 1579
	},                                                                                                                    // 1580
                                                                                                                       // 1581
	hideProps: {                                                                                                          // 1582
		borderTopWidth: "hide",                                                                                              // 1583
		borderBottomWidth: "hide",                                                                                           // 1584
		paddingTop: "hide",                                                                                                  // 1585
		paddingBottom: "hide",                                                                                               // 1586
		height: "hide"                                                                                                       // 1587
	},                                                                                                                    // 1588
                                                                                                                       // 1589
	showProps: {                                                                                                          // 1590
		borderTopWidth: "show",                                                                                              // 1591
		borderBottomWidth: "show",                                                                                           // 1592
		paddingTop: "show",                                                                                                  // 1593
		paddingBottom: "show",                                                                                               // 1594
		height: "show"                                                                                                       // 1595
	},                                                                                                                    // 1596
                                                                                                                       // 1597
	_create: function() {                                                                                                 // 1598
		var options = this.options;                                                                                          // 1599
		this.prevShow = this.prevHide = $();                                                                                 // 1600
		this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )                                                    // 1601
			// ARIA                                                                                                             // 1602
			.attr( "role", "tablist" );                                                                                         // 1603
                                                                                                                       // 1604
		// don't allow collapsible: false and active: false / null                                                           // 1605
		if ( !options.collapsible && (options.active === false || options.active == null) ) {                                // 1606
			options.active = 0;                                                                                                 // 1607
		}                                                                                                                    // 1608
                                                                                                                       // 1609
		this._processPanels();                                                                                               // 1610
		// handle negative values                                                                                            // 1611
		if ( options.active < 0 ) {                                                                                          // 1612
			options.active += this.headers.length;                                                                              // 1613
		}                                                                                                                    // 1614
		this._refresh();                                                                                                     // 1615
	},                                                                                                                    // 1616
                                                                                                                       // 1617
	_getCreateEventData: function() {                                                                                     // 1618
		return {                                                                                                             // 1619
			header: this.active,                                                                                                // 1620
			panel: !this.active.length ? $() : this.active.next()                                                               // 1621
		};                                                                                                                   // 1622
	},                                                                                                                    // 1623
                                                                                                                       // 1624
	_createIcons: function() {                                                                                            // 1625
		var icons = this.options.icons;                                                                                      // 1626
		if ( icons ) {                                                                                                       // 1627
			$( "<span>" )                                                                                                       // 1628
				.addClass( "ui-accordion-header-icon ui-icon " + icons.header )                                                    // 1629
				.prependTo( this.headers );                                                                                        // 1630
			this.active.children( ".ui-accordion-header-icon" )                                                                 // 1631
				.removeClass( icons.header )                                                                                       // 1632
				.addClass( icons.activeHeader );                                                                                   // 1633
			this.headers.addClass( "ui-accordion-icons" );                                                                      // 1634
		}                                                                                                                    // 1635
	},                                                                                                                    // 1636
                                                                                                                       // 1637
	_destroyIcons: function() {                                                                                           // 1638
		this.headers                                                                                                         // 1639
			.removeClass( "ui-accordion-icons" )                                                                                // 1640
			.children( ".ui-accordion-header-icon" )                                                                            // 1641
				.remove();                                                                                                         // 1642
	},                                                                                                                    // 1643
                                                                                                                       // 1644
	_destroy: function() {                                                                                                // 1645
		var contents;                                                                                                        // 1646
                                                                                                                       // 1647
		// clean up main element                                                                                             // 1648
		this.element                                                                                                         // 1649
			.removeClass( "ui-accordion ui-widget ui-helper-reset" )                                                            // 1650
			.removeAttr( "role" );                                                                                              // 1651
                                                                                                                       // 1652
		// clean up headers                                                                                                  // 1653
		this.headers                                                                                                         // 1654
			.removeClass( "ui-accordion-header ui-accordion-header-active ui-state-default " +                                  // 1655
				"ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )                                                  // 1656
			.removeAttr( "role" )                                                                                               // 1657
			.removeAttr( "aria-expanded" )                                                                                      // 1658
			.removeAttr( "aria-selected" )                                                                                      // 1659
			.removeAttr( "aria-controls" )                                                                                      // 1660
			.removeAttr( "tabIndex" )                                                                                           // 1661
			.removeUniqueId();                                                                                                  // 1662
                                                                                                                       // 1663
		this._destroyIcons();                                                                                                // 1664
                                                                                                                       // 1665
		// clean up content panels                                                                                           // 1666
		contents = this.headers.next()                                                                                       // 1667
			.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom " +                                               // 1668
				"ui-accordion-content ui-accordion-content-active ui-state-disabled" )                                             // 1669
			.css( "display", "" )                                                                                               // 1670
			.removeAttr( "role" )                                                                                               // 1671
			.removeAttr( "aria-hidden" )                                                                                        // 1672
			.removeAttr( "aria-labelledby" )                                                                                    // 1673
			.removeUniqueId();                                                                                                  // 1674
                                                                                                                       // 1675
		if ( this.options.heightStyle !== "content" ) {                                                                      // 1676
			contents.css( "height", "" );                                                                                       // 1677
		}                                                                                                                    // 1678
	},                                                                                                                    // 1679
                                                                                                                       // 1680
	_setOption: function( key, value ) {                                                                                  // 1681
		if ( key === "active" ) {                                                                                            // 1682
			// _activate() will handle invalid values and update this.options                                                   // 1683
			this._activate( value );                                                                                            // 1684
			return;                                                                                                             // 1685
		}                                                                                                                    // 1686
                                                                                                                       // 1687
		if ( key === "event" ) {                                                                                             // 1688
			if ( this.options.event ) {                                                                                         // 1689
				this._off( this.headers, this.options.event );                                                                     // 1690
			}                                                                                                                   // 1691
			this._setupEvents( value );                                                                                         // 1692
		}                                                                                                                    // 1693
                                                                                                                       // 1694
		this._super( key, value );                                                                                           // 1695
                                                                                                                       // 1696
		// setting collapsible: false while collapsed; open first panel                                                      // 1697
		if ( key === "collapsible" && !value && this.options.active === false ) {                                            // 1698
			this._activate( 0 );                                                                                                // 1699
		}                                                                                                                    // 1700
                                                                                                                       // 1701
		if ( key === "icons" ) {                                                                                             // 1702
			this._destroyIcons();                                                                                               // 1703
			if ( value ) {                                                                                                      // 1704
				this._createIcons();                                                                                               // 1705
			}                                                                                                                   // 1706
		}                                                                                                                    // 1707
                                                                                                                       // 1708
		// #5332 - opacity doesn't cascade to positioned elements in IE                                                      // 1709
		// so we need to add the disabled class to the headers and panels                                                    // 1710
		if ( key === "disabled" ) {                                                                                          // 1711
			this.element                                                                                                        // 1712
				.toggleClass( "ui-state-disabled", !!value )                                                                       // 1713
				.attr( "aria-disabled", value );                                                                                   // 1714
			this.headers.add( this.headers.next() )                                                                             // 1715
				.toggleClass( "ui-state-disabled", !!value );                                                                      // 1716
		}                                                                                                                    // 1717
	},                                                                                                                    // 1718
                                                                                                                       // 1719
	_keydown: function( event ) {                                                                                         // 1720
		if ( event.altKey || event.ctrlKey ) {                                                                               // 1721
			return;                                                                                                             // 1722
		}                                                                                                                    // 1723
                                                                                                                       // 1724
		var keyCode = $.ui.keyCode,                                                                                          // 1725
			length = this.headers.length,                                                                                       // 1726
			currentIndex = this.headers.index( event.target ),                                                                  // 1727
			toFocus = false;                                                                                                    // 1728
                                                                                                                       // 1729
		switch ( event.keyCode ) {                                                                                           // 1730
			case keyCode.RIGHT:                                                                                                 // 1731
			case keyCode.DOWN:                                                                                                  // 1732
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];                                                           // 1733
				break;                                                                                                             // 1734
			case keyCode.LEFT:                                                                                                  // 1735
			case keyCode.UP:                                                                                                    // 1736
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];                                                  // 1737
				break;                                                                                                             // 1738
			case keyCode.SPACE:                                                                                                 // 1739
			case keyCode.ENTER:                                                                                                 // 1740
				this._eventHandler( event );                                                                                       // 1741
				break;                                                                                                             // 1742
			case keyCode.HOME:                                                                                                  // 1743
				toFocus = this.headers[ 0 ];                                                                                       // 1744
				break;                                                                                                             // 1745
			case keyCode.END:                                                                                                   // 1746
				toFocus = this.headers[ length - 1 ];                                                                              // 1747
				break;                                                                                                             // 1748
		}                                                                                                                    // 1749
                                                                                                                       // 1750
		if ( toFocus ) {                                                                                                     // 1751
			$( event.target ).attr( "tabIndex", -1 );                                                                           // 1752
			$( toFocus ).attr( "tabIndex", 0 );                                                                                 // 1753
			toFocus.focus();                                                                                                    // 1754
			event.preventDefault();                                                                                             // 1755
		}                                                                                                                    // 1756
	},                                                                                                                    // 1757
                                                                                                                       // 1758
	_panelKeyDown: function( event ) {                                                                                    // 1759
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {                                                          // 1760
			$( event.currentTarget ).prev().focus();                                                                            // 1761
		}                                                                                                                    // 1762
	},                                                                                                                    // 1763
                                                                                                                       // 1764
	refresh: function() {                                                                                                 // 1765
		var options = this.options;                                                                                          // 1766
		this._processPanels();                                                                                               // 1767
                                                                                                                       // 1768
		// was collapsed or no panel                                                                                         // 1769
		if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {                        // 1770
			options.active = false;                                                                                             // 1771
			this.active = $();                                                                                                  // 1772
		// active false only when collapsible is true                                                                        // 1773
		} else if ( options.active === false ) {                                                                             // 1774
			this._activate( 0 );                                                                                                // 1775
		// was active, but active panel is gone                                                                              // 1776
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {                             // 1777
			// all remaining panel are disabled                                                                                 // 1778
			if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {                                     // 1779
				options.active = false;                                                                                            // 1780
				this.active = $();                                                                                                 // 1781
			// activate previous panel                                                                                          // 1782
			} else {                                                                                                            // 1783
				this._activate( Math.max( 0, options.active - 1 ) );                                                               // 1784
			}                                                                                                                   // 1785
		// was active, active panel still exists                                                                             // 1786
		} else {                                                                                                             // 1787
			// make sure active index is correct                                                                                // 1788
			options.active = this.headers.index( this.active );                                                                 // 1789
		}                                                                                                                    // 1790
                                                                                                                       // 1791
		this._destroyIcons();                                                                                                // 1792
                                                                                                                       // 1793
		this._refresh();                                                                                                     // 1794
	},                                                                                                                    // 1795
                                                                                                                       // 1796
	_processPanels: function() {                                                                                          // 1797
		var prevHeaders = this.headers,                                                                                      // 1798
			prevPanels = this.panels;                                                                                           // 1799
                                                                                                                       // 1800
		this.headers = this.element.find( this.options.header )                                                              // 1801
			.addClass( "ui-accordion-header ui-state-default ui-corner-all" );                                                  // 1802
                                                                                                                       // 1803
		this.panels = this.headers.next()                                                                                    // 1804
			.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )                              // 1805
			.filter( ":not(.ui-accordion-content-active)" )                                                                     // 1806
			.hide();                                                                                                            // 1807
                                                                                                                       // 1808
		// Avoid memory leaks (#10056)                                                                                       // 1809
		if ( prevPanels ) {                                                                                                  // 1810
			this._off( prevHeaders.not( this.headers ) );                                                                       // 1811
			this._off( prevPanels.not( this.panels ) );                                                                         // 1812
		}                                                                                                                    // 1813
	},                                                                                                                    // 1814
                                                                                                                       // 1815
	_refresh: function() {                                                                                                // 1816
		var maxHeight,                                                                                                       // 1817
			options = this.options,                                                                                             // 1818
			heightStyle = options.heightStyle,                                                                                  // 1819
			parent = this.element.parent();                                                                                     // 1820
                                                                                                                       // 1821
		this.active = this._findActive( options.active )                                                                     // 1822
			.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )                                             // 1823
			.removeClass( "ui-corner-all" );                                                                                    // 1824
		this.active.next()                                                                                                   // 1825
			.addClass( "ui-accordion-content-active" )                                                                          // 1826
			.show();                                                                                                            // 1827
                                                                                                                       // 1828
		this.headers                                                                                                         // 1829
			.attr( "role", "tab" )                                                                                              // 1830
			.each(function() {                                                                                                  // 1831
				var header = $( this ),                                                                                            // 1832
					headerId = header.uniqueId().attr( "id" ),                                                                        // 1833
					panel = header.next(),                                                                                            // 1834
					panelId = panel.uniqueId().attr( "id" );                                                                          // 1835
				header.attr( "aria-controls", panelId );                                                                           // 1836
				panel.attr( "aria-labelledby", headerId );                                                                         // 1837
			})                                                                                                                  // 1838
			.next()                                                                                                             // 1839
				.attr( "role", "tabpanel" );                                                                                       // 1840
                                                                                                                       // 1841
		this.headers                                                                                                         // 1842
			.not( this.active )                                                                                                 // 1843
			.attr({                                                                                                             // 1844
				"aria-selected": "false",                                                                                          // 1845
				"aria-expanded": "false",                                                                                          // 1846
				tabIndex: -1                                                                                                       // 1847
			})                                                                                                                  // 1848
			.next()                                                                                                             // 1849
				.attr({                                                                                                            // 1850
					"aria-hidden": "true"                                                                                             // 1851
				})                                                                                                                 // 1852
				.hide();                                                                                                           // 1853
                                                                                                                       // 1854
		// make sure at least one header is in the tab order                                                                 // 1855
		if ( !this.active.length ) {                                                                                         // 1856
			this.headers.eq( 0 ).attr( "tabIndex", 0 );                                                                         // 1857
		} else {                                                                                                             // 1858
			this.active.attr({                                                                                                  // 1859
				"aria-selected": "true",                                                                                           // 1860
				"aria-expanded": "true",                                                                                           // 1861
				tabIndex: 0                                                                                                        // 1862
			})                                                                                                                  // 1863
			.next()                                                                                                             // 1864
				.attr({                                                                                                            // 1865
					"aria-hidden": "false"                                                                                            // 1866
				});                                                                                                                // 1867
		}                                                                                                                    // 1868
                                                                                                                       // 1869
		this._createIcons();                                                                                                 // 1870
                                                                                                                       // 1871
		this._setupEvents( options.event );                                                                                  // 1872
                                                                                                                       // 1873
		if ( heightStyle === "fill" ) {                                                                                      // 1874
			maxHeight = parent.height();                                                                                        // 1875
			this.element.siblings( ":visible" ).each(function() {                                                               // 1876
				var elem = $( this ),                                                                                              // 1877
					position = elem.css( "position" );                                                                                // 1878
                                                                                                                       // 1879
				if ( position === "absolute" || position === "fixed" ) {                                                           // 1880
					return;                                                                                                           // 1881
				}                                                                                                                  // 1882
				maxHeight -= elem.outerHeight( true );                                                                             // 1883
			});                                                                                                                 // 1884
                                                                                                                       // 1885
			this.headers.each(function() {                                                                                      // 1886
				maxHeight -= $( this ).outerHeight( true );                                                                        // 1887
			});                                                                                                                 // 1888
                                                                                                                       // 1889
			this.headers.next()                                                                                                 // 1890
				.each(function() {                                                                                                 // 1891
					$( this ).height( Math.max( 0, maxHeight -                                                                        // 1892
						$( this ).innerHeight() + $( this ).height() ) );                                                                // 1893
				})                                                                                                                 // 1894
				.css( "overflow", "auto" );                                                                                        // 1895
		} else if ( heightStyle === "auto" ) {                                                                               // 1896
			maxHeight = 0;                                                                                                      // 1897
			this.headers.next()                                                                                                 // 1898
				.each(function() {                                                                                                 // 1899
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );                                        // 1900
				})                                                                                                                 // 1901
				.height( maxHeight );                                                                                              // 1902
		}                                                                                                                    // 1903
	},                                                                                                                    // 1904
                                                                                                                       // 1905
	_activate: function( index ) {                                                                                        // 1906
		var active = this._findActive( index )[ 0 ];                                                                         // 1907
                                                                                                                       // 1908
		// trying to activate the already active panel                                                                       // 1909
		if ( active === this.active[ 0 ] ) {                                                                                 // 1910
			return;                                                                                                             // 1911
		}                                                                                                                    // 1912
                                                                                                                       // 1913
		// trying to collapse, simulate a click on the currently active header                                               // 1914
		active = active || this.active[ 0 ];                                                                                 // 1915
                                                                                                                       // 1916
		this._eventHandler({                                                                                                 // 1917
			target: active,                                                                                                     // 1918
			currentTarget: active,                                                                                              // 1919
			preventDefault: $.noop                                                                                              // 1920
		});                                                                                                                  // 1921
	},                                                                                                                    // 1922
                                                                                                                       // 1923
	_findActive: function( selector ) {                                                                                   // 1924
		return typeof selector === "number" ? this.headers.eq( selector ) : $();                                             // 1925
	},                                                                                                                    // 1926
                                                                                                                       // 1927
	_setupEvents: function( event ) {                                                                                     // 1928
		var events = {                                                                                                       // 1929
			keydown: "_keydown"                                                                                                 // 1930
		};                                                                                                                   // 1931
		if ( event ) {                                                                                                       // 1932
			$.each( event.split( " " ), function( index, eventName ) {                                                          // 1933
				events[ eventName ] = "_eventHandler";                                                                             // 1934
			});                                                                                                                 // 1935
		}                                                                                                                    // 1936
                                                                                                                       // 1937
		this._off( this.headers.add( this.headers.next() ) );                                                                // 1938
		this._on( this.headers, events );                                                                                    // 1939
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });                                                        // 1940
		this._hoverable( this.headers );                                                                                     // 1941
		this._focusable( this.headers );                                                                                     // 1942
	},                                                                                                                    // 1943
                                                                                                                       // 1944
	_eventHandler: function( event ) {                                                                                    // 1945
		var options = this.options,                                                                                          // 1946
			active = this.active,                                                                                               // 1947
			clicked = $( event.currentTarget ),                                                                                 // 1948
			clickedIsActive = clicked[ 0 ] === active[ 0 ],                                                                     // 1949
			collapsing = clickedIsActive && options.collapsible,                                                                // 1950
			toShow = collapsing ? $() : clicked.next(),                                                                         // 1951
			toHide = active.next(),                                                                                             // 1952
			eventData = {                                                                                                       // 1953
				oldHeader: active,                                                                                                 // 1954
				oldPanel: toHide,                                                                                                  // 1955
				newHeader: collapsing ? $() : clicked,                                                                             // 1956
				newPanel: toShow                                                                                                   // 1957
			};                                                                                                                  // 1958
                                                                                                                       // 1959
		event.preventDefault();                                                                                              // 1960
                                                                                                                       // 1961
		if (                                                                                                                 // 1962
				// click on active header, but not collapsible                                                                     // 1963
				( clickedIsActive && !options.collapsible ) ||                                                                     // 1964
				// allow canceling activation                                                                                      // 1965
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {                                              // 1966
			return;                                                                                                             // 1967
		}                                                                                                                    // 1968
                                                                                                                       // 1969
		options.active = collapsing ? false : this.headers.index( clicked );                                                 // 1970
                                                                                                                       // 1971
		// when the call to ._toggle() comes after the class changes                                                         // 1972
		// it causes a very odd bug in IE 8 (see #6720)                                                                      // 1973
		this.active = clickedIsActive ? $() : clicked;                                                                       // 1974
		this._toggle( eventData );                                                                                           // 1975
                                                                                                                       // 1976
		// switch classes                                                                                                    // 1977
		// corner classes on the previously active header stay after the animation                                           // 1978
		active.removeClass( "ui-accordion-header-active ui-state-active" );                                                  // 1979
		if ( options.icons ) {                                                                                               // 1980
			active.children( ".ui-accordion-header-icon" )                                                                      // 1981
				.removeClass( options.icons.activeHeader )                                                                         // 1982
				.addClass( options.icons.header );                                                                                 // 1983
		}                                                                                                                    // 1984
                                                                                                                       // 1985
		if ( !clickedIsActive ) {                                                                                            // 1986
			clicked                                                                                                             // 1987
				.removeClass( "ui-corner-all" )                                                                                    // 1988
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );                                           // 1989
			if ( options.icons ) {                                                                                              // 1990
				clicked.children( ".ui-accordion-header-icon" )                                                                    // 1991
					.removeClass( options.icons.header )                                                                              // 1992
					.addClass( options.icons.activeHeader );                                                                          // 1993
			}                                                                                                                   // 1994
                                                                                                                       // 1995
			clicked                                                                                                             // 1996
				.next()                                                                                                            // 1997
				.addClass( "ui-accordion-content-active" );                                                                        // 1998
		}                                                                                                                    // 1999
	},                                                                                                                    // 2000
                                                                                                                       // 2001
	_toggle: function( data ) {                                                                                           // 2002
		var toShow = data.newPanel,                                                                                          // 2003
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;                                                      // 2004
                                                                                                                       // 2005
		// handle activating a panel during the animation for another activation                                             // 2006
		this.prevShow.add( this.prevHide ).stop( true, true );                                                               // 2007
		this.prevShow = toShow;                                                                                              // 2008
		this.prevHide = toHide;                                                                                              // 2009
                                                                                                                       // 2010
		if ( this.options.animate ) {                                                                                        // 2011
			this._animate( toShow, toHide, data );                                                                              // 2012
		} else {                                                                                                             // 2013
			toHide.hide();                                                                                                      // 2014
			toShow.show();                                                                                                      // 2015
			this._toggleComplete( data );                                                                                       // 2016
		}                                                                                                                    // 2017
                                                                                                                       // 2018
		toHide.attr({                                                                                                        // 2019
			"aria-hidden": "true"                                                                                               // 2020
		});                                                                                                                  // 2021
		toHide.prev().attr( "aria-selected", "false" );                                                                      // 2022
		// if we're switching panels, remove the old header from the tab order                                               // 2023
		// if we're opening from collapsed state, remove the previous header from the tab order                              // 2024
		// if we're collapsing, then keep the collapsing header in the tab order                                             // 2025
		if ( toShow.length && toHide.length ) {                                                                              // 2026
			toHide.prev().attr({                                                                                                // 2027
				"tabIndex": -1,                                                                                                    // 2028
				"aria-expanded": "false"                                                                                           // 2029
			});                                                                                                                 // 2030
		} else if ( toShow.length ) {                                                                                        // 2031
			this.headers.filter(function() {                                                                                    // 2032
				return $( this ).attr( "tabIndex" ) === 0;                                                                         // 2033
			})                                                                                                                  // 2034
			.attr( "tabIndex", -1 );                                                                                            // 2035
		}                                                                                                                    // 2036
                                                                                                                       // 2037
		toShow                                                                                                               // 2038
			.attr( "aria-hidden", "false" )                                                                                     // 2039
			.prev()                                                                                                             // 2040
				.attr({                                                                                                            // 2041
					"aria-selected": "true",                                                                                          // 2042
					tabIndex: 0,                                                                                                      // 2043
					"aria-expanded": "true"                                                                                           // 2044
				});                                                                                                                // 2045
	},                                                                                                                    // 2046
                                                                                                                       // 2047
	_animate: function( toShow, toHide, data ) {                                                                          // 2048
		var total, easing, duration,                                                                                         // 2049
			that = this,                                                                                                        // 2050
			adjust = 0,                                                                                                         // 2051
			down = toShow.length &&                                                                                             // 2052
				( !toHide.length || ( toShow.index() < toHide.index() ) ),                                                         // 2053
			animate = this.options.animate || {},                                                                               // 2054
			options = down && animate.down || animate,                                                                          // 2055
			complete = function() {                                                                                             // 2056
				that._toggleComplete( data );                                                                                      // 2057
			};                                                                                                                  // 2058
                                                                                                                       // 2059
		if ( typeof options === "number" ) {                                                                                 // 2060
			duration = options;                                                                                                 // 2061
		}                                                                                                                    // 2062
		if ( typeof options === "string" ) {                                                                                 // 2063
			easing = options;                                                                                                   // 2064
		}                                                                                                                    // 2065
		// fall back from options to animation in case of partial down settings                                              // 2066
		easing = easing || options.easing || animate.easing;                                                                 // 2067
		duration = duration || options.duration || animate.duration;                                                         // 2068
                                                                                                                       // 2069
		if ( !toHide.length ) {                                                                                              // 2070
			return toShow.animate( this.showProps, duration, easing, complete );                                                // 2071
		}                                                                                                                    // 2072
		if ( !toShow.length ) {                                                                                              // 2073
			return toHide.animate( this.hideProps, duration, easing, complete );                                                // 2074
		}                                                                                                                    // 2075
                                                                                                                       // 2076
		total = toShow.show().outerHeight();                                                                                 // 2077
		toHide.animate( this.hideProps, {                                                                                    // 2078
			duration: duration,                                                                                                 // 2079
			easing: easing,                                                                                                     // 2080
			step: function( now, fx ) {                                                                                         // 2081
				fx.now = Math.round( now );                                                                                        // 2082
			}                                                                                                                   // 2083
		});                                                                                                                  // 2084
		toShow                                                                                                               // 2085
			.hide()                                                                                                             // 2086
			.animate( this.showProps, {                                                                                         // 2087
				duration: duration,                                                                                                // 2088
				easing: easing,                                                                                                    // 2089
				complete: complete,                                                                                                // 2090
				step: function( now, fx ) {                                                                                        // 2091
					fx.now = Math.round( now );                                                                                       // 2092
					if ( fx.prop !== "height" ) {                                                                                     // 2093
						adjust += fx.now;                                                                                                // 2094
					} else if ( that.options.heightStyle !== "content" ) {                                                            // 2095
						fx.now = Math.round( total - toHide.outerHeight() - adjust );                                                    // 2096
						adjust = 0;                                                                                                      // 2097
					}                                                                                                                 // 2098
				}                                                                                                                  // 2099
			});                                                                                                                 // 2100
	},                                                                                                                    // 2101
                                                                                                                       // 2102
	_toggleComplete: function( data ) {                                                                                   // 2103
		var toHide = data.oldPanel;                                                                                          // 2104
                                                                                                                       // 2105
		toHide                                                                                                               // 2106
			.removeClass( "ui-accordion-content-active" )                                                                       // 2107
			.prev()                                                                                                             // 2108
				.removeClass( "ui-corner-top" )                                                                                    // 2109
				.addClass( "ui-corner-all" );                                                                                      // 2110
                                                                                                                       // 2111
		// Work around for rendering bug in IE (#5421)                                                                       // 2112
		if ( toHide.length ) {                                                                                               // 2113
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;                                                    // 2114
		}                                                                                                                    // 2115
		this._trigger( "activate", null, data );                                                                             // 2116
	}                                                                                                                     // 2117
});                                                                                                                    // 2118
                                                                                                                       // 2119
                                                                                                                       // 2120
/*!                                                                                                                    // 2121
 * jQuery UI Menu 1.11.2                                                                                               // 2122
 * http://jqueryui.com                                                                                                 // 2123
 *                                                                                                                     // 2124
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 2125
 * Released under the MIT license.                                                                                     // 2126
 * http://jquery.org/license                                                                                           // 2127
 *                                                                                                                     // 2128
 * http://api.jqueryui.com/menu/                                                                                       // 2129
 */                                                                                                                    // 2130
                                                                                                                       // 2131
                                                                                                                       // 2132
var menu = $.widget( "ui.menu", {                                                                                      // 2133
	version: "1.11.2",                                                                                                    // 2134
	defaultElement: "<ul>",                                                                                               // 2135
	delay: 300,                                                                                                           // 2136
	options: {                                                                                                            // 2137
		icons: {                                                                                                             // 2138
			submenu: "ui-icon-carat-1-e"                                                                                        // 2139
		},                                                                                                                   // 2140
		items: "> *",                                                                                                        // 2141
		menus: "ul",                                                                                                         // 2142
		position: {                                                                                                          // 2143
			my: "left-1 top",                                                                                                   // 2144
			at: "right top"                                                                                                     // 2145
		},                                                                                                                   // 2146
		role: "menu",                                                                                                        // 2147
                                                                                                                       // 2148
		// callbacks                                                                                                         // 2149
		blur: null,                                                                                                          // 2150
		focus: null,                                                                                                         // 2151
		select: null                                                                                                         // 2152
	},                                                                                                                    // 2153
                                                                                                                       // 2154
	_create: function() {                                                                                                 // 2155
		this.activeMenu = this.element;                                                                                      // 2156
                                                                                                                       // 2157
		// Flag used to prevent firing of the click handler                                                                  // 2158
		// as the event bubbles up through nested menus                                                                      // 2159
		this.mouseHandled = false;                                                                                           // 2160
		this.element                                                                                                         // 2161
			.uniqueId()                                                                                                         // 2162
			.addClass( "ui-menu ui-widget ui-widget-content" )                                                                  // 2163
			.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )                                           // 2164
			.attr({                                                                                                             // 2165
				role: this.options.role,                                                                                           // 2166
				tabIndex: 0                                                                                                        // 2167
			});                                                                                                                 // 2168
                                                                                                                       // 2169
		if ( this.options.disabled ) {                                                                                       // 2170
			this.element                                                                                                        // 2171
				.addClass( "ui-state-disabled" )                                                                                   // 2172
				.attr( "aria-disabled", "true" );                                                                                  // 2173
		}                                                                                                                    // 2174
                                                                                                                       // 2175
		this._on({                                                                                                           // 2176
			// Prevent focus from sticking to links inside menu after clicking                                                  // 2177
			// them (focus should always stay on UL during navigation).                                                         // 2178
			"mousedown .ui-menu-item": function( event ) {                                                                      // 2179
				event.preventDefault();                                                                                            // 2180
			},                                                                                                                  // 2181
			"click .ui-menu-item": function( event ) {                                                                          // 2182
				var target = $( event.target );                                                                                    // 2183
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {                                           // 2184
					this.select( event );                                                                                             // 2185
                                                                                                                       // 2186
					// Only set the mouseHandled flag if the event will bubble, see #9469.                                            // 2187
					if ( !event.isPropagationStopped() ) {                                                                            // 2188
						this.mouseHandled = true;                                                                                        // 2189
					}                                                                                                                 // 2190
                                                                                                                       // 2191
					// Open submenu on click                                                                                          // 2192
					if ( target.has( ".ui-menu" ).length ) {                                                                          // 2193
						this.expand( event );                                                                                            // 2194
					} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {
                                                                                                                       // 2196
						// Redirect focus to the menu                                                                                    // 2197
						this.element.trigger( "focus", [ true ] );                                                                       // 2198
                                                                                                                       // 2199
						// If the active item is on the top level, let it stay active.                                                   // 2200
						// Otherwise, blur the active item since it is no longer visible.                                                // 2201
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {                                           // 2202
							clearTimeout( this.timer );                                                                                     // 2203
						}                                                                                                                // 2204
					}                                                                                                                 // 2205
				}                                                                                                                  // 2206
			},                                                                                                                  // 2207
			"mouseenter .ui-menu-item": function( event ) {                                                                     // 2208
				// Ignore mouse events while typeahead is active, see #10458.                                                      // 2209
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse                                 // 2210
				// is over an item in the menu                                                                                     // 2211
				if ( this.previousFilter ) {                                                                                       // 2212
					return;                                                                                                           // 2213
				}                                                                                                                  // 2214
				var target = $( event.currentTarget );                                                                             // 2215
				// Remove ui-state-active class from siblings of the newly focused menu item                                       // 2216
				// to avoid a jump caused by adjacent elements both having a class with a border                                   // 2217
				target.siblings( ".ui-state-active" ).removeClass( "ui-state-active" );                                            // 2218
				this.focus( event, target );                                                                                       // 2219
			},                                                                                                                  // 2220
			mouseleave: "collapseAll",                                                                                          // 2221
			"mouseleave .ui-menu": "collapseAll",                                                                               // 2222
			focus: function( event, keepActiveItem ) {                                                                          // 2223
				// If there's already an active item, keep it active                                                               // 2224
				// If not, activate the first item                                                                                 // 2225
				var item = this.active || this.element.find( this.options.items ).eq( 0 );                                         // 2226
                                                                                                                       // 2227
				if ( !keepActiveItem ) {                                                                                           // 2228
					this.focus( event, item );                                                                                        // 2229
				}                                                                                                                  // 2230
			},                                                                                                                  // 2231
			blur: function( event ) {                                                                                           // 2232
				this._delay(function() {                                                                                           // 2233
					if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {                                           // 2234
						this.collapseAll( event );                                                                                       // 2235
					}                                                                                                                 // 2236
				});                                                                                                                // 2237
			},                                                                                                                  // 2238
			keydown: "_keydown"                                                                                                 // 2239
		});                                                                                                                  // 2240
                                                                                                                       // 2241
		this.refresh();                                                                                                      // 2242
                                                                                                                       // 2243
		// Clicks outside of a menu collapse any open menus                                                                  // 2244
		this._on( this.document, {                                                                                           // 2245
			click: function( event ) {                                                                                          // 2246
				if ( this._closeOnDocumentClick( event ) ) {                                                                       // 2247
					this.collapseAll( event );                                                                                        // 2248
				}                                                                                                                  // 2249
                                                                                                                       // 2250
				// Reset the mouseHandled flag                                                                                     // 2251
				this.mouseHandled = false;                                                                                         // 2252
			}                                                                                                                   // 2253
		});                                                                                                                  // 2254
	},                                                                                                                    // 2255
                                                                                                                       // 2256
	_destroy: function() {                                                                                                // 2257
		// Destroy (sub)menus                                                                                                // 2258
		this.element                                                                                                         // 2259
			.removeAttr( "aria-activedescendant" )                                                                              // 2260
			.find( ".ui-menu" ).addBack()                                                                                       // 2261
				.removeClass( "ui-menu ui-widget ui-widget-content ui-menu-icons ui-front" )                                       // 2262
				.removeAttr( "role" )                                                                                              // 2263
				.removeAttr( "tabIndex" )                                                                                          // 2264
				.removeAttr( "aria-labelledby" )                                                                                   // 2265
				.removeAttr( "aria-expanded" )                                                                                     // 2266
				.removeAttr( "aria-hidden" )                                                                                       // 2267
				.removeAttr( "aria-disabled" )                                                                                     // 2268
				.removeUniqueId()                                                                                                  // 2269
				.show();                                                                                                           // 2270
                                                                                                                       // 2271
		// Destroy menu items                                                                                                // 2272
		this.element.find( ".ui-menu-item" )                                                                                 // 2273
			.removeClass( "ui-menu-item" )                                                                                      // 2274
			.removeAttr( "role" )                                                                                               // 2275
			.removeAttr( "aria-disabled" )                                                                                      // 2276
			.removeUniqueId()                                                                                                   // 2277
			.removeClass( "ui-state-hover" )                                                                                    // 2278
			.removeAttr( "tabIndex" )                                                                                           // 2279
			.removeAttr( "role" )                                                                                               // 2280
			.removeAttr( "aria-haspopup" )                                                                                      // 2281
			.children().each( function() {                                                                                      // 2282
				var elem = $( this );                                                                                              // 2283
				if ( elem.data( "ui-menu-submenu-carat" ) ) {                                                                      // 2284
					elem.remove();                                                                                                    // 2285
				}                                                                                                                  // 2286
			});                                                                                                                 // 2287
                                                                                                                       // 2288
		// Destroy menu dividers                                                                                             // 2289
		this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );                          // 2290
	},                                                                                                                    // 2291
                                                                                                                       // 2292
	_keydown: function( event ) {                                                                                         // 2293
		var match, prev, character, skip,                                                                                    // 2294
			preventDefault = true;                                                                                              // 2295
                                                                                                                       // 2296
		switch ( event.keyCode ) {                                                                                           // 2297
		case $.ui.keyCode.PAGE_UP:                                                                                           // 2298
			this.previousPage( event );                                                                                         // 2299
			break;                                                                                                              // 2300
		case $.ui.keyCode.PAGE_DOWN:                                                                                         // 2301
			this.nextPage( event );                                                                                             // 2302
			break;                                                                                                              // 2303
		case $.ui.keyCode.HOME:                                                                                              // 2304
			this._move( "first", "first", event );                                                                              // 2305
			break;                                                                                                              // 2306
		case $.ui.keyCode.END:                                                                                               // 2307
			this._move( "last", "last", event );                                                                                // 2308
			break;                                                                                                              // 2309
		case $.ui.keyCode.UP:                                                                                                // 2310
			this.previous( event );                                                                                             // 2311
			break;                                                                                                              // 2312
		case $.ui.keyCode.DOWN:                                                                                              // 2313
			this.next( event );                                                                                                 // 2314
			break;                                                                                                              // 2315
		case $.ui.keyCode.LEFT:                                                                                              // 2316
			this.collapse( event );                                                                                             // 2317
			break;                                                                                                              // 2318
		case $.ui.keyCode.RIGHT:                                                                                             // 2319
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {                                                     // 2320
				this.expand( event );                                                                                              // 2321
			}                                                                                                                   // 2322
			break;                                                                                                              // 2323
		case $.ui.keyCode.ENTER:                                                                                             // 2324
		case $.ui.keyCode.SPACE:                                                                                             // 2325
			this._activate( event );                                                                                            // 2326
			break;                                                                                                              // 2327
		case $.ui.keyCode.ESCAPE:                                                                                            // 2328
			this.collapse( event );                                                                                             // 2329
			break;                                                                                                              // 2330
		default:                                                                                                             // 2331
			preventDefault = false;                                                                                             // 2332
			prev = this.previousFilter || "";                                                                                   // 2333
			character = String.fromCharCode( event.keyCode );                                                                   // 2334
			skip = false;                                                                                                       // 2335
                                                                                                                       // 2336
			clearTimeout( this.filterTimer );                                                                                   // 2337
                                                                                                                       // 2338
			if ( character === prev ) {                                                                                         // 2339
				skip = true;                                                                                                       // 2340
			} else {                                                                                                            // 2341
				character = prev + character;                                                                                      // 2342
			}                                                                                                                   // 2343
                                                                                                                       // 2344
			match = this._filterMenuItems( character );                                                                         // 2345
			match = skip && match.index( this.active.next() ) !== -1 ?                                                          // 2346
				this.active.nextAll( ".ui-menu-item" ) :                                                                           // 2347
				match;                                                                                                             // 2348
                                                                                                                       // 2349
			// If no matches on the current filter, reset to the last character pressed                                         // 2350
			// to move down the menu to the first item that starts with that character                                          // 2351
			if ( !match.length ) {                                                                                              // 2352
				character = String.fromCharCode( event.keyCode );                                                                  // 2353
				match = this._filterMenuItems( character );                                                                        // 2354
			}                                                                                                                   // 2355
                                                                                                                       // 2356
			if ( match.length ) {                                                                                               // 2357
				this.focus( event, match );                                                                                        // 2358
				this.previousFilter = character;                                                                                   // 2359
				this.filterTimer = this._delay(function() {                                                                        // 2360
					delete this.previousFilter;                                                                                       // 2361
				}, 1000 );                                                                                                         // 2362
			} else {                                                                                                            // 2363
				delete this.previousFilter;                                                                                        // 2364
			}                                                                                                                   // 2365
		}                                                                                                                    // 2366
                                                                                                                       // 2367
		if ( preventDefault ) {                                                                                              // 2368
			event.preventDefault();                                                                                             // 2369
		}                                                                                                                    // 2370
	},                                                                                                                    // 2371
                                                                                                                       // 2372
	_activate: function( event ) {                                                                                        // 2373
		if ( !this.active.is( ".ui-state-disabled" ) ) {                                                                     // 2374
			if ( this.active.is( "[aria-haspopup='true']" ) ) {                                                                 // 2375
				this.expand( event );                                                                                              // 2376
			} else {                                                                                                            // 2377
				this.select( event );                                                                                              // 2378
			}                                                                                                                   // 2379
		}                                                                                                                    // 2380
	},                                                                                                                    // 2381
                                                                                                                       // 2382
	refresh: function() {                                                                                                 // 2383
		var menus, items,                                                                                                    // 2384
			that = this,                                                                                                        // 2385
			icon = this.options.icons.submenu,                                                                                  // 2386
			submenus = this.element.find( this.options.menus );                                                                 // 2387
                                                                                                                       // 2388
		this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );                               // 2389
                                                                                                                       // 2390
		// Initialize nested menus                                                                                           // 2391
		submenus.filter( ":not(.ui-menu)" )                                                                                  // 2392
			.addClass( "ui-menu ui-widget ui-widget-content ui-front" )                                                         // 2393
			.hide()                                                                                                             // 2394
			.attr({                                                                                                             // 2395
				role: this.options.role,                                                                                           // 2396
				"aria-hidden": "true",                                                                                             // 2397
				"aria-expanded": "false"                                                                                           // 2398
			})                                                                                                                  // 2399
			.each(function() {                                                                                                  // 2400
				var menu = $( this ),                                                                                              // 2401
					item = menu.parent(),                                                                                             // 2402
					submenuCarat = $( "<span>" )                                                                                      // 2403
						.addClass( "ui-menu-icon ui-icon " + icon )                                                                      // 2404
						.data( "ui-menu-submenu-carat", true );                                                                          // 2405
                                                                                                                       // 2406
				item                                                                                                               // 2407
					.attr( "aria-haspopup", "true" )                                                                                  // 2408
					.prepend( submenuCarat );                                                                                         // 2409
				menu.attr( "aria-labelledby", item.attr( "id" ) );                                                                 // 2410
			});                                                                                                                 // 2411
                                                                                                                       // 2412
		menus = submenus.add( this.element );                                                                                // 2413
		items = menus.find( this.options.items );                                                                            // 2414
                                                                                                                       // 2415
		// Initialize menu-items containing spaces and/or dashes only as dividers                                            // 2416
		items.not( ".ui-menu-item" ).each(function() {                                                                       // 2417
			var item = $( this );                                                                                               // 2418
			if ( that._isDivider( item ) ) {                                                                                    // 2419
				item.addClass( "ui-widget-content ui-menu-divider" );                                                              // 2420
			}                                                                                                                   // 2421
		});                                                                                                                  // 2422
                                                                                                                       // 2423
		// Don't refresh list items that are already adapted                                                                 // 2424
		items.not( ".ui-menu-item, .ui-menu-divider" )                                                                       // 2425
			.addClass( "ui-menu-item" )                                                                                         // 2426
			.uniqueId()                                                                                                         // 2427
			.attr({                                                                                                             // 2428
				tabIndex: -1,                                                                                                      // 2429
				role: this._itemRole()                                                                                             // 2430
			});                                                                                                                 // 2431
                                                                                                                       // 2432
		// Add aria-disabled attribute to any disabled menu item                                                             // 2433
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );                                                // 2434
                                                                                                                       // 2435
		// If the active item has been removed, blur the menu                                                                // 2436
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {                                           // 2437
			this.blur();                                                                                                        // 2438
		}                                                                                                                    // 2439
	},                                                                                                                    // 2440
                                                                                                                       // 2441
	_itemRole: function() {                                                                                               // 2442
		return {                                                                                                             // 2443
			menu: "menuitem",                                                                                                   // 2444
			listbox: "option"                                                                                                   // 2445
		}[ this.options.role ];                                                                                              // 2446
	},                                                                                                                    // 2447
                                                                                                                       // 2448
	_setOption: function( key, value ) {                                                                                  // 2449
		if ( key === "icons" ) {                                                                                             // 2450
			this.element.find( ".ui-menu-icon" )                                                                                // 2451
				.removeClass( this.options.icons.submenu )                                                                         // 2452
				.addClass( value.submenu );                                                                                        // 2453
		}                                                                                                                    // 2454
		if ( key === "disabled" ) {                                                                                          // 2455
			this.element                                                                                                        // 2456
				.toggleClass( "ui-state-disabled", !!value )                                                                       // 2457
				.attr( "aria-disabled", value );                                                                                   // 2458
		}                                                                                                                    // 2459
		this._super( key, value );                                                                                           // 2460
	},                                                                                                                    // 2461
                                                                                                                       // 2462
	focus: function( event, item ) {                                                                                      // 2463
		var nested, focused;                                                                                                 // 2464
		this.blur( event, event && event.type === "focus" );                                                                 // 2465
                                                                                                                       // 2466
		this._scrollIntoView( item );                                                                                        // 2467
                                                                                                                       // 2468
		this.active = item.first();                                                                                          // 2469
		focused = this.active.addClass( "ui-state-focus" ).removeClass( "ui-state-active" );                                 // 2470
		// Only update aria-activedescendant if there's a role                                                               // 2471
		// otherwise we assume focus is managed elsewhere                                                                    // 2472
		if ( this.options.role ) {                                                                                           // 2473
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );                                                 // 2474
		}                                                                                                                    // 2475
                                                                                                                       // 2476
		// Highlight active parent menu item, if any                                                                         // 2477
		this.active                                                                                                          // 2478
			.parent()                                                                                                           // 2479
			.closest( ".ui-menu-item" )                                                                                         // 2480
			.addClass( "ui-state-active" );                                                                                     // 2481
                                                                                                                       // 2482
		if ( event && event.type === "keydown" ) {                                                                           // 2483
			this._close();                                                                                                      // 2484
		} else {                                                                                                             // 2485
			this.timer = this._delay(function() {                                                                               // 2486
				this._close();                                                                                                     // 2487
			}, this.delay );                                                                                                    // 2488
		}                                                                                                                    // 2489
                                                                                                                       // 2490
		nested = item.children( ".ui-menu" );                                                                                // 2491
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {                                                   // 2492
			this._startOpening(nested);                                                                                         // 2493
		}                                                                                                                    // 2494
		this.activeMenu = item.parent();                                                                                     // 2495
                                                                                                                       // 2496
		this._trigger( "focus", event, { item: item } );                                                                     // 2497
	},                                                                                                                    // 2498
                                                                                                                       // 2499
	_scrollIntoView: function( item ) {                                                                                   // 2500
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;                                                // 2501
		if ( this._hasScroll() ) {                                                                                           // 2502
			borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;                                       // 2503
			paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;                                          // 2504
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;                                 // 2505
			scroll = this.activeMenu.scrollTop();                                                                               // 2506
			elementHeight = this.activeMenu.height();                                                                           // 2507
			itemHeight = item.outerHeight();                                                                                    // 2508
                                                                                                                       // 2509
			if ( offset < 0 ) {                                                                                                 // 2510
				this.activeMenu.scrollTop( scroll + offset );                                                                      // 2511
			} else if ( offset + itemHeight > elementHeight ) {                                                                 // 2512
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );                                         // 2513
			}                                                                                                                   // 2514
		}                                                                                                                    // 2515
	},                                                                                                                    // 2516
                                                                                                                       // 2517
	blur: function( event, fromFocus ) {                                                                                  // 2518
		if ( !fromFocus ) {                                                                                                  // 2519
			clearTimeout( this.timer );                                                                                         // 2520
		}                                                                                                                    // 2521
                                                                                                                       // 2522
		if ( !this.active ) {                                                                                                // 2523
			return;                                                                                                             // 2524
		}                                                                                                                    // 2525
                                                                                                                       // 2526
		this.active.removeClass( "ui-state-focus" );                                                                         // 2527
		this.active = null;                                                                                                  // 2528
                                                                                                                       // 2529
		this._trigger( "blur", event, { item: this.active } );                                                               // 2530
	},                                                                                                                    // 2531
                                                                                                                       // 2532
	_startOpening: function( submenu ) {                                                                                  // 2533
		clearTimeout( this.timer );                                                                                          // 2534
                                                                                                                       // 2535
		// Don't open if already open fixes a Firefox bug that caused a .5 pixel                                             // 2536
		// shift in the submenu position when mousing over the carat icon                                                    // 2537
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {                                                                    // 2538
			return;                                                                                                             // 2539
		}                                                                                                                    // 2540
                                                                                                                       // 2541
		this.timer = this._delay(function() {                                                                                // 2542
			this._close();                                                                                                      // 2543
			this._open( submenu );                                                                                              // 2544
		}, this.delay );                                                                                                     // 2545
	},                                                                                                                    // 2546
                                                                                                                       // 2547
	_open: function( submenu ) {                                                                                          // 2548
		var position = $.extend({                                                                                            // 2549
			of: this.active                                                                                                     // 2550
		}, this.options.position );                                                                                          // 2551
                                                                                                                       // 2552
		clearTimeout( this.timer );                                                                                          // 2553
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )                                                 // 2554
			.hide()                                                                                                             // 2555
			.attr( "aria-hidden", "true" );                                                                                     // 2556
                                                                                                                       // 2557
		submenu                                                                                                              // 2558
			.show()                                                                                                             // 2559
			.removeAttr( "aria-hidden" )                                                                                        // 2560
			.attr( "aria-expanded", "true" )                                                                                    // 2561
			.position( position );                                                                                              // 2562
	},                                                                                                                    // 2563
                                                                                                                       // 2564
	collapseAll: function( event, all ) {                                                                                 // 2565
		clearTimeout( this.timer );                                                                                          // 2566
		this.timer = this._delay(function() {                                                                                // 2567
			// If we were passed an event, look for the submenu that contains the event                                         // 2568
			var currentMenu = all ? this.element :                                                                              // 2569
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );                                             // 2570
                                                                                                                       // 2571
			// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway                           // 2572
			if ( !currentMenu.length ) {                                                                                        // 2573
				currentMenu = this.element;                                                                                        // 2574
			}                                                                                                                   // 2575
                                                                                                                       // 2576
			this._close( currentMenu );                                                                                         // 2577
                                                                                                                       // 2578
			this.blur( event );                                                                                                 // 2579
			this.activeMenu = currentMenu;                                                                                      // 2580
		}, this.delay );                                                                                                     // 2581
	},                                                                                                                    // 2582
                                                                                                                       // 2583
	// With no arguments, closes the currently active menu - if nothing is active                                         // 2584
	// it closes all menus.  If passed an argument, it will search for menus BELOW                                        // 2585
	_close: function( startMenu ) {                                                                                       // 2586
		if ( !startMenu ) {                                                                                                  // 2587
			startMenu = this.active ? this.active.parent() : this.element;                                                      // 2588
		}                                                                                                                    // 2589
                                                                                                                       // 2590
		startMenu                                                                                                            // 2591
			.find( ".ui-menu" )                                                                                                 // 2592
				.hide()                                                                                                            // 2593
				.attr( "aria-hidden", "true" )                                                                                     // 2594
				.attr( "aria-expanded", "false" )                                                                                  // 2595
			.end()                                                                                                              // 2596
			.find( ".ui-state-active" ).not( ".ui-state-focus" )                                                                // 2597
				.removeClass( "ui-state-active" );                                                                                 // 2598
	},                                                                                                                    // 2599
                                                                                                                       // 2600
	_closeOnDocumentClick: function( event ) {                                                                            // 2601
		return !$( event.target ).closest( ".ui-menu" ).length;                                                              // 2602
	},                                                                                                                    // 2603
                                                                                                                       // 2604
	_isDivider: function( item ) {                                                                                        // 2605
                                                                                                                       // 2606
		// Match hyphen, em dash, en dash                                                                                    // 2607
		return !/[^\-\u2014\u2013\s]/.test( item.text() );                                                                   // 2608
	},                                                                                                                    // 2609
                                                                                                                       // 2610
	collapse: function( event ) {                                                                                         // 2611
		var newItem = this.active &&                                                                                         // 2612
			this.active.parent().closest( ".ui-menu-item", this.element );                                                      // 2613
		if ( newItem && newItem.length ) {                                                                                   // 2614
			this._close();                                                                                                      // 2615
			this.focus( event, newItem );                                                                                       // 2616
		}                                                                                                                    // 2617
	},                                                                                                                    // 2618
                                                                                                                       // 2619
	expand: function( event ) {                                                                                           // 2620
		var newItem = this.active &&                                                                                         // 2621
			this.active                                                                                                         // 2622
				.children( ".ui-menu " )                                                                                           // 2623
				.find( this.options.items )                                                                                        // 2624
				.first();                                                                                                          // 2625
                                                                                                                       // 2626
		if ( newItem && newItem.length ) {                                                                                   // 2627
			this._open( newItem.parent() );                                                                                     // 2628
                                                                                                                       // 2629
			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT                              // 2630
			this._delay(function() {                                                                                            // 2631
				this.focus( event, newItem );                                                                                      // 2632
			});                                                                                                                 // 2633
		}                                                                                                                    // 2634
	},                                                                                                                    // 2635
                                                                                                                       // 2636
	next: function( event ) {                                                                                             // 2637
		this._move( "next", "first", event );                                                                                // 2638
	},                                                                                                                    // 2639
                                                                                                                       // 2640
	previous: function( event ) {                                                                                         // 2641
		this._move( "prev", "last", event );                                                                                 // 2642
	},                                                                                                                    // 2643
                                                                                                                       // 2644
	isFirstItem: function() {                                                                                             // 2645
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;                                                // 2646
	},                                                                                                                    // 2647
                                                                                                                       // 2648
	isLastItem: function() {                                                                                              // 2649
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;                                                // 2650
	},                                                                                                                    // 2651
                                                                                                                       // 2652
	_move: function( direction, filter, event ) {                                                                         // 2653
		var next;                                                                                                            // 2654
		if ( this.active ) {                                                                                                 // 2655
			if ( direction === "first" || direction === "last" ) {                                                              // 2656
				next = this.active                                                                                                 // 2657
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )                                              // 2658
					.eq( -1 );                                                                                                        // 2659
			} else {                                                                                                            // 2660
				next = this.active                                                                                                 // 2661
					[ direction + "All" ]( ".ui-menu-item" )                                                                          // 2662
					.eq( 0 );                                                                                                         // 2663
			}                                                                                                                   // 2664
		}                                                                                                                    // 2665
		if ( !next || !next.length || !this.active ) {                                                                       // 2666
			next = this.activeMenu.find( this.options.items )[ filter ]();                                                      // 2667
		}                                                                                                                    // 2668
                                                                                                                       // 2669
		this.focus( event, next );                                                                                           // 2670
	},                                                                                                                    // 2671
                                                                                                                       // 2672
	nextPage: function( event ) {                                                                                         // 2673
		var item, base, height;                                                                                              // 2674
                                                                                                                       // 2675
		if ( !this.active ) {                                                                                                // 2676
			this.next( event );                                                                                                 // 2677
			return;                                                                                                             // 2678
		}                                                                                                                    // 2679
		if ( this.isLastItem() ) {                                                                                           // 2680
			return;                                                                                                             // 2681
		}                                                                                                                    // 2682
		if ( this._hasScroll() ) {                                                                                           // 2683
			base = this.active.offset().top;                                                                                    // 2684
			height = this.element.height();                                                                                     // 2685
			this.active.nextAll( ".ui-menu-item" ).each(function() {                                                            // 2686
				item = $( this );                                                                                                  // 2687
				return item.offset().top - base - height < 0;                                                                      // 2688
			});                                                                                                                 // 2689
                                                                                                                       // 2690
			this.focus( event, item );                                                                                          // 2691
		} else {                                                                                                             // 2692
			this.focus( event, this.activeMenu.find( this.options.items )                                                       // 2693
				[ !this.active ? "first" : "last" ]() );                                                                           // 2694
		}                                                                                                                    // 2695
	},                                                                                                                    // 2696
                                                                                                                       // 2697
	previousPage: function( event ) {                                                                                     // 2698
		var item, base, height;                                                                                              // 2699
		if ( !this.active ) {                                                                                                // 2700
			this.next( event );                                                                                                 // 2701
			return;                                                                                                             // 2702
		}                                                                                                                    // 2703
		if ( this.isFirstItem() ) {                                                                                          // 2704
			return;                                                                                                             // 2705
		}                                                                                                                    // 2706
		if ( this._hasScroll() ) {                                                                                           // 2707
			base = this.active.offset().top;                                                                                    // 2708
			height = this.element.height();                                                                                     // 2709
			this.active.prevAll( ".ui-menu-item" ).each(function() {                                                            // 2710
				item = $( this );                                                                                                  // 2711
				return item.offset().top - base + height > 0;                                                                      // 2712
			});                                                                                                                 // 2713
                                                                                                                       // 2714
			this.focus( event, item );                                                                                          // 2715
		} else {                                                                                                             // 2716
			this.focus( event, this.activeMenu.find( this.options.items ).first() );                                            // 2717
		}                                                                                                                    // 2718
	},                                                                                                                    // 2719
                                                                                                                       // 2720
	_hasScroll: function() {                                                                                              // 2721
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );                                             // 2722
	},                                                                                                                    // 2723
                                                                                                                       // 2724
	select: function( event ) {                                                                                           // 2725
		// TODO: It should never be possible to not have an active item at this                                              // 2726
		// point, but the tests don't trigger mouseenter before click.                                                       // 2727
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );                                           // 2728
		var ui = { item: this.active };                                                                                      // 2729
		if ( !this.active.has( ".ui-menu" ).length ) {                                                                       // 2730
			this.collapseAll( event, true );                                                                                    // 2731
		}                                                                                                                    // 2732
		this._trigger( "select", event, ui );                                                                                // 2733
	},                                                                                                                    // 2734
                                                                                                                       // 2735
	_filterMenuItems: function(character) {                                                                               // 2736
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),                                   // 2737
			regex = new RegExp( "^" + escapedCharacter, "i" );                                                                  // 2738
                                                                                                                       // 2739
		return this.activeMenu                                                                                               // 2740
			.find( this.options.items )                                                                                         // 2741
                                                                                                                       // 2742
			// Only match on items, not dividers or other content (#10571)                                                      // 2743
			.filter( ".ui-menu-item" )                                                                                          // 2744
			.filter(function() {                                                                                                // 2745
				return regex.test( $.trim( $( this ).text() ) );                                                                   // 2746
			});                                                                                                                 // 2747
	}                                                                                                                     // 2748
});                                                                                                                    // 2749
                                                                                                                       // 2750
                                                                                                                       // 2751
/*!                                                                                                                    // 2752
 * jQuery UI Autocomplete 1.11.2                                                                                       // 2753
 * http://jqueryui.com                                                                                                 // 2754
 *                                                                                                                     // 2755
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 2756
 * Released under the MIT license.                                                                                     // 2757
 * http://jquery.org/license                                                                                           // 2758
 *                                                                                                                     // 2759
 * http://api.jqueryui.com/autocomplete/                                                                               // 2760
 */                                                                                                                    // 2761
                                                                                                                       // 2762
                                                                                                                       // 2763
$.widget( "ui.autocomplete", {                                                                                         // 2764
	version: "1.11.2",                                                                                                    // 2765
	defaultElement: "<input>",                                                                                            // 2766
	options: {                                                                                                            // 2767
		appendTo: null,                                                                                                      // 2768
		autoFocus: false,                                                                                                    // 2769
		delay: 300,                                                                                                          // 2770
		minLength: 1,                                                                                                        // 2771
		position: {                                                                                                          // 2772
			my: "left top",                                                                                                     // 2773
			at: "left bottom",                                                                                                  // 2774
			collision: "none"                                                                                                   // 2775
		},                                                                                                                   // 2776
		source: null,                                                                                                        // 2777
                                                                                                                       // 2778
		// callbacks                                                                                                         // 2779
		change: null,                                                                                                        // 2780
		close: null,                                                                                                         // 2781
		focus: null,                                                                                                         // 2782
		open: null,                                                                                                          // 2783
		response: null,                                                                                                      // 2784
		search: null,                                                                                                        // 2785
		select: null                                                                                                         // 2786
	},                                                                                                                    // 2787
                                                                                                                       // 2788
	requestIndex: 0,                                                                                                      // 2789
	pending: 0,                                                                                                           // 2790
                                                                                                                       // 2791
	_create: function() {                                                                                                 // 2792
		// Some browsers only repeat keydown events, not keypress events,                                                    // 2793
		// so we use the suppressKeyPress flag to determine if we've already                                                 // 2794
		// handled the keydown event. #7269                                                                                  // 2795
		// Unfortunately the code for & in keypress is the same as the up arrow,                                             // 2796
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress                                              // 2797
		// events when we know the keydown event was used to modify the                                                      // 2798
		// search term. #7799                                                                                                // 2799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,                                                         // 2800
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),                                                                // 2801
			isTextarea = nodeName === "textarea",                                                                               // 2802
			isInput = nodeName === "input";                                                                                     // 2803
                                                                                                                       // 2804
		this.isMultiLine =                                                                                                   // 2805
			// Textareas are always multi-line                                                                                  // 2806
			isTextarea ? true :                                                                                                 // 2807
			// Inputs are always single-line, even if inside a contentEditable element                                          // 2808
			// IE also treats inputs as contentEditable                                                                         // 2809
			isInput ? false :                                                                                                   // 2810
			// All other element types are determined by whether or not they're contentEditable                                 // 2811
			this.element.prop( "isContentEditable" );                                                                           // 2812
                                                                                                                       // 2813
		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];                                           // 2814
		this.isNewMenu = true;                                                                                               // 2815
                                                                                                                       // 2816
		this.element                                                                                                         // 2817
			.addClass( "ui-autocomplete-input" )                                                                                // 2818
			.attr( "autocomplete", "off" );                                                                                     // 2819
                                                                                                                       // 2820
		this._on( this.element, {                                                                                            // 2821
			keydown: function( event ) {                                                                                        // 2822
				if ( this.element.prop( "readOnly" ) ) {                                                                           // 2823
					suppressKeyPress = true;                                                                                          // 2824
					suppressInput = true;                                                                                             // 2825
					suppressKeyPressRepeat = true;                                                                                    // 2826
					return;                                                                                                           // 2827
				}                                                                                                                  // 2828
                                                                                                                       // 2829
				suppressKeyPress = false;                                                                                          // 2830
				suppressInput = false;                                                                                             // 2831
				suppressKeyPressRepeat = false;                                                                                    // 2832
				var keyCode = $.ui.keyCode;                                                                                        // 2833
				switch ( event.keyCode ) {                                                                                         // 2834
				case keyCode.PAGE_UP:                                                                                              // 2835
					suppressKeyPress = true;                                                                                          // 2836
					this._move( "previousPage", event );                                                                              // 2837
					break;                                                                                                            // 2838
				case keyCode.PAGE_DOWN:                                                                                            // 2839
					suppressKeyPress = true;                                                                                          // 2840
					this._move( "nextPage", event );                                                                                  // 2841
					break;                                                                                                            // 2842
				case keyCode.UP:                                                                                                   // 2843
					suppressKeyPress = true;                                                                                          // 2844
					this._keyEvent( "previous", event );                                                                              // 2845
					break;                                                                                                            // 2846
				case keyCode.DOWN:                                                                                                 // 2847
					suppressKeyPress = true;                                                                                          // 2848
					this._keyEvent( "next", event );                                                                                  // 2849
					break;                                                                                                            // 2850
				case keyCode.ENTER:                                                                                                // 2851
					// when menu is open and has focus                                                                                // 2852
					if ( this.menu.active ) {                                                                                         // 2853
						// #6055 - Opera still allows the keypress to occur                                                              // 2854
						// which causes forms to submit                                                                                  // 2855
						suppressKeyPress = true;                                                                                         // 2856
						event.preventDefault();                                                                                          // 2857
						this.menu.select( event );                                                                                       // 2858
					}                                                                                                                 // 2859
					break;                                                                                                            // 2860
				case keyCode.TAB:                                                                                                  // 2861
					if ( this.menu.active ) {                                                                                         // 2862
						this.menu.select( event );                                                                                       // 2863
					}                                                                                                                 // 2864
					break;                                                                                                            // 2865
				case keyCode.ESCAPE:                                                                                               // 2866
					if ( this.menu.element.is( ":visible" ) ) {                                                                       // 2867
						if ( !this.isMultiLine ) {                                                                                       // 2868
							this._value( this.term );                                                                                       // 2869
						}                                                                                                                // 2870
						this.close( event );                                                                                             // 2871
						// Different browsers have different default behavior for escape                                                 // 2872
						// Single press can mean undo or clear                                                                           // 2873
						// Double press in IE means clear the whole form                                                                 // 2874
						event.preventDefault();                                                                                          // 2875
					}                                                                                                                 // 2876
					break;                                                                                                            // 2877
				default:                                                                                                           // 2878
					suppressKeyPressRepeat = true;                                                                                    // 2879
					// search timeout should be triggered before the input value is changed                                           // 2880
					this._searchTimeout( event );                                                                                     // 2881
					break;                                                                                                            // 2882
				}                                                                                                                  // 2883
			},                                                                                                                  // 2884
			keypress: function( event ) {                                                                                       // 2885
				if ( suppressKeyPress ) {                                                                                          // 2886
					suppressKeyPress = false;                                                                                         // 2887
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {                                                  // 2888
						event.preventDefault();                                                                                          // 2889
					}                                                                                                                 // 2890
					return;                                                                                                           // 2891
				}                                                                                                                  // 2892
				if ( suppressKeyPressRepeat ) {                                                                                    // 2893
					return;                                                                                                           // 2894
				}                                                                                                                  // 2895
                                                                                                                       // 2896
				// replicate some key handlers to allow them to repeat in Firefox and Opera                                        // 2897
				var keyCode = $.ui.keyCode;                                                                                        // 2898
				switch ( event.keyCode ) {                                                                                         // 2899
				case keyCode.PAGE_UP:                                                                                              // 2900
					this._move( "previousPage", event );                                                                              // 2901
					break;                                                                                                            // 2902
				case keyCode.PAGE_DOWN:                                                                                            // 2903
					this._move( "nextPage", event );                                                                                  // 2904
					break;                                                                                                            // 2905
				case keyCode.UP:                                                                                                   // 2906
					this._keyEvent( "previous", event );                                                                              // 2907
					break;                                                                                                            // 2908
				case keyCode.DOWN:                                                                                                 // 2909
					this._keyEvent( "next", event );                                                                                  // 2910
					break;                                                                                                            // 2911
				}                                                                                                                  // 2912
			},                                                                                                                  // 2913
			input: function( event ) {                                                                                          // 2914
				if ( suppressInput ) {                                                                                             // 2915
					suppressInput = false;                                                                                            // 2916
					event.preventDefault();                                                                                           // 2917
					return;                                                                                                           // 2918
				}                                                                                                                  // 2919
				this._searchTimeout( event );                                                                                      // 2920
			},                                                                                                                  // 2921
			focus: function() {                                                                                                 // 2922
				this.selectedItem = null;                                                                                          // 2923
				this.previous = this._value();                                                                                     // 2924
			},                                                                                                                  // 2925
			blur: function( event ) {                                                                                           // 2926
				if ( this.cancelBlur ) {                                                                                           // 2927
					delete this.cancelBlur;                                                                                           // 2928
					return;                                                                                                           // 2929
				}                                                                                                                  // 2930
                                                                                                                       // 2931
				clearTimeout( this.searching );                                                                                    // 2932
				this.close( event );                                                                                               // 2933
				this._change( event );                                                                                             // 2934
			}                                                                                                                   // 2935
		});                                                                                                                  // 2936
                                                                                                                       // 2937
		this._initSource();                                                                                                  // 2938
		this.menu = $( "<ul>" )                                                                                              // 2939
			.addClass( "ui-autocomplete ui-front" )                                                                             // 2940
			.appendTo( this._appendTo() )                                                                                       // 2941
			.menu({                                                                                                             // 2942
				// disable ARIA support, the live region takes care of that                                                        // 2943
				role: null                                                                                                         // 2944
			})                                                                                                                  // 2945
			.hide()                                                                                                             // 2946
			.menu( "instance" );                                                                                                // 2947
                                                                                                                       // 2948
		this._on( this.menu.element, {                                                                                       // 2949
			mousedown: function( event ) {                                                                                      // 2950
				// prevent moving focus out of the text field                                                                      // 2951
				event.preventDefault();                                                                                            // 2952
                                                                                                                       // 2953
				// IE doesn't prevent moving focus even with event.preventDefault()                                                // 2954
				// so we set a flag to know when we should ignore the blur event                                                   // 2955
				this.cancelBlur = true;                                                                                            // 2956
				this._delay(function() {                                                                                           // 2957
					delete this.cancelBlur;                                                                                           // 2958
				});                                                                                                                // 2959
                                                                                                                       // 2960
				// clicking on the scrollbar causes focus to shift to the body                                                     // 2961
				// but we can't detect a mouseup or a click immediately afterward                                                  // 2962
				// so we have to track the next mousedown and close the menu if                                                    // 2963
				// the user clicks somewhere outside of the autocomplete                                                           // 2964
				var menuElement = this.menu.element[ 0 ];                                                                          // 2965
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {                                                      // 2966
					this._delay(function() {                                                                                          // 2967
						var that = this;                                                                                                 // 2968
						this.document.one( "mousedown", function( event ) {                                                              // 2969
							if ( event.target !== that.element[ 0 ] &&                                                                      // 2970
									event.target !== menuElement &&                                                                               // 2971
									!$.contains( menuElement, event.target ) ) {                                                                  // 2972
								that.close();                                                                                                  // 2973
							}                                                                                                               // 2974
						});                                                                                                              // 2975
					});                                                                                                               // 2976
				}                                                                                                                  // 2977
			},                                                                                                                  // 2978
			menufocus: function( event, ui ) {                                                                                  // 2979
				var label, item;                                                                                                   // 2980
				// support: Firefox                                                                                                // 2981
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)                                            // 2982
				if ( this.isNewMenu ) {                                                                                            // 2983
					this.isNewMenu = false;                                                                                           // 2984
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {                                         // 2985
						this.menu.blur();                                                                                                // 2986
                                                                                                                       // 2987
						this.document.one( "mousemove", function() {                                                                     // 2988
							$( event.target ).trigger( event.originalEvent );                                                               // 2989
						});                                                                                                              // 2990
                                                                                                                       // 2991
						return;                                                                                                          // 2992
					}                                                                                                                 // 2993
				}                                                                                                                  // 2994
                                                                                                                       // 2995
				item = ui.item.data( "ui-autocomplete-item" );                                                                     // 2996
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {                                                 // 2997
					// use value to match what will end up in the input, if it was a key event                                        // 2998
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {                                           // 2999
						this._value( item.value );                                                                                       // 3000
					}                                                                                                                 // 3001
				}                                                                                                                  // 3002
                                                                                                                       // 3003
				// Announce the value in the liveRegion                                                                            // 3004
				label = ui.item.attr( "aria-label" ) || item.value;                                                                // 3005
				if ( label && $.trim( label ).length ) {                                                                           // 3006
					this.liveRegion.children().hide();                                                                                // 3007
					$( "<div>" ).text( label ).appendTo( this.liveRegion );                                                           // 3008
				}                                                                                                                  // 3009
			},                                                                                                                  // 3010
			menuselect: function( event, ui ) {                                                                                 // 3011
				var item = ui.item.data( "ui-autocomplete-item" ),                                                                 // 3012
					previous = this.previous;                                                                                         // 3013
                                                                                                                       // 3014
				// only trigger when focus was lost (click on menu)                                                                // 3015
				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {                                                    // 3016
					this.element.focus();                                                                                             // 3017
					this.previous = previous;                                                                                         // 3018
					// #6109 - IE triggers two focus events and the second                                                            // 3019
					// is asynchronous, so we need to reset the previous                                                              // 3020
					// term synchronously and asynchronously :-(                                                                      // 3021
					this._delay(function() {                                                                                          // 3022
						this.previous = previous;                                                                                        // 3023
						this.selectedItem = item;                                                                                        // 3024
					});                                                                                                               // 3025
				}                                                                                                                  // 3026
                                                                                                                       // 3027
				if ( false !== this._trigger( "select", event, { item: item } ) ) {                                                // 3028
					this._value( item.value );                                                                                        // 3029
				}                                                                                                                  // 3030
				// reset the term after the select event                                                                           // 3031
				// this allows custom select handling to work properly                                                             // 3032
				this.term = this._value();                                                                                         // 3033
                                                                                                                       // 3034
				this.close( event );                                                                                               // 3035
				this.selectedItem = item;                                                                                          // 3036
			}                                                                                                                   // 3037
		});                                                                                                                  // 3038
                                                                                                                       // 3039
		this.liveRegion = $( "<span>", {                                                                                     // 3040
				role: "status",                                                                                                    // 3041
				"aria-live": "assertive",                                                                                          // 3042
				"aria-relevant": "additions"                                                                                       // 3043
			})                                                                                                                  // 3044
			.addClass( "ui-helper-hidden-accessible" )                                                                          // 3045
			.appendTo( this.document[ 0 ].body );                                                                               // 3046
                                                                                                                       // 3047
		// turning off autocomplete prevents the browser from remembering the                                                // 3048
		// value when navigating through history, so we re-enable autocomplete                                               // 3049
		// if the page is unloaded before the widget is destroyed. #7790                                                     // 3050
		this._on( this.window, {                                                                                             // 3051
			beforeunload: function() {                                                                                          // 3052
				this.element.removeAttr( "autocomplete" );                                                                         // 3053
			}                                                                                                                   // 3054
		});                                                                                                                  // 3055
	},                                                                                                                    // 3056
                                                                                                                       // 3057
	_destroy: function() {                                                                                                // 3058
		clearTimeout( this.searching );                                                                                      // 3059
		this.element                                                                                                         // 3060
			.removeClass( "ui-autocomplete-input" )                                                                             // 3061
			.removeAttr( "autocomplete" );                                                                                      // 3062
		this.menu.element.remove();                                                                                          // 3063
		this.liveRegion.remove();                                                                                            // 3064
	},                                                                                                                    // 3065
                                                                                                                       // 3066
	_setOption: function( key, value ) {                                                                                  // 3067
		this._super( key, value );                                                                                           // 3068
		if ( key === "source" ) {                                                                                            // 3069
			this._initSource();                                                                                                 // 3070
		}                                                                                                                    // 3071
		if ( key === "appendTo" ) {                                                                                          // 3072
			this.menu.element.appendTo( this._appendTo() );                                                                     // 3073
		}                                                                                                                    // 3074
		if ( key === "disabled" && value && this.xhr ) {                                                                     // 3075
			this.xhr.abort();                                                                                                   // 3076
		}                                                                                                                    // 3077
	},                                                                                                                    // 3078
                                                                                                                       // 3079
	_appendTo: function() {                                                                                               // 3080
		var element = this.options.appendTo;                                                                                 // 3081
                                                                                                                       // 3082
		if ( element ) {                                                                                                     // 3083
			element = element.jquery || element.nodeType ?                                                                      // 3084
				$( element ) :                                                                                                     // 3085
				this.document.find( element ).eq( 0 );                                                                             // 3086
		}                                                                                                                    // 3087
                                                                                                                       // 3088
		if ( !element || !element[ 0 ] ) {                                                                                   // 3089
			element = this.element.closest( ".ui-front" );                                                                      // 3090
		}                                                                                                                    // 3091
                                                                                                                       // 3092
		if ( !element.length ) {                                                                                             // 3093
			element = this.document[ 0 ].body;                                                                                  // 3094
		}                                                                                                                    // 3095
                                                                                                                       // 3096
		return element;                                                                                                      // 3097
	},                                                                                                                    // 3098
                                                                                                                       // 3099
	_initSource: function() {                                                                                             // 3100
		var array, url,                                                                                                      // 3101
			that = this;                                                                                                        // 3102
		if ( $.isArray( this.options.source ) ) {                                                                            // 3103
			array = this.options.source;                                                                                        // 3104
			this.source = function( request, response ) {                                                                       // 3105
				response( $.ui.autocomplete.filter( array, request.term ) );                                                       // 3106
			};                                                                                                                  // 3107
		} else if ( typeof this.options.source === "string" ) {                                                              // 3108
			url = this.options.source;                                                                                          // 3109
			this.source = function( request, response ) {                                                                       // 3110
				if ( that.xhr ) {                                                                                                  // 3111
					that.xhr.abort();                                                                                                 // 3112
				}                                                                                                                  // 3113
				that.xhr = $.ajax({                                                                                                // 3114
					url: url,                                                                                                         // 3115
					data: request,                                                                                                    // 3116
					dataType: "json",                                                                                                 // 3117
					success: function( data ) {                                                                                       // 3118
						response( data );                                                                                                // 3119
					},                                                                                                                // 3120
					error: function() {                                                                                               // 3121
						response([]);                                                                                                    // 3122
					}                                                                                                                 // 3123
				});                                                                                                                // 3124
			};                                                                                                                  // 3125
		} else {                                                                                                             // 3126
			this.source = this.options.source;                                                                                  // 3127
		}                                                                                                                    // 3128
	},                                                                                                                    // 3129
                                                                                                                       // 3130
	_searchTimeout: function( event ) {                                                                                   // 3131
		clearTimeout( this.searching );                                                                                      // 3132
		this.searching = this._delay(function() {                                                                            // 3133
                                                                                                                       // 3134
			// Search if the value has changed, or if the user retypes the same value (see #7434)                               // 3135
			var equalValues = this.term === this._value(),                                                                      // 3136
				menuVisible = this.menu.element.is( ":visible" ),                                                                  // 3137
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;                                    // 3138
                                                                                                                       // 3139
			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {                                            // 3140
				this.selectedItem = null;                                                                                          // 3141
				this.search( null, event );                                                                                        // 3142
			}                                                                                                                   // 3143
		}, this.options.delay );                                                                                             // 3144
	},                                                                                                                    // 3145
                                                                                                                       // 3146
	search: function( value, event ) {                                                                                    // 3147
		value = value != null ? value : this._value();                                                                       // 3148
                                                                                                                       // 3149
		// always save the actual value, not the one passed as an argument                                                   // 3150
		this.term = this._value();                                                                                           // 3151
                                                                                                                       // 3152
		if ( value.length < this.options.minLength ) {                                                                       // 3153
			return this.close( event );                                                                                         // 3154
		}                                                                                                                    // 3155
                                                                                                                       // 3156
		if ( this._trigger( "search", event ) === false ) {                                                                  // 3157
			return;                                                                                                             // 3158
		}                                                                                                                    // 3159
                                                                                                                       // 3160
		return this._search( value );                                                                                        // 3161
	},                                                                                                                    // 3162
                                                                                                                       // 3163
	_search: function( value ) {                                                                                          // 3164
		this.pending++;                                                                                                      // 3165
		this.element.addClass( "ui-autocomplete-loading" );                                                                  // 3166
		this.cancelSearch = false;                                                                                           // 3167
                                                                                                                       // 3168
		this.source( { term: value }, this._response() );                                                                    // 3169
	},                                                                                                                    // 3170
                                                                                                                       // 3171
	_response: function() {                                                                                               // 3172
		var index = ++this.requestIndex;                                                                                     // 3173
                                                                                                                       // 3174
		return $.proxy(function( content ) {                                                                                 // 3175
			if ( index === this.requestIndex ) {                                                                                // 3176
				this.__response( content );                                                                                        // 3177
			}                                                                                                                   // 3178
                                                                                                                       // 3179
			this.pending--;                                                                                                     // 3180
			if ( !this.pending ) {                                                                                              // 3181
				this.element.removeClass( "ui-autocomplete-loading" );                                                             // 3182
			}                                                                                                                   // 3183
		}, this );                                                                                                           // 3184
	},                                                                                                                    // 3185
                                                                                                                       // 3186
	__response: function( content ) {                                                                                     // 3187
		if ( content ) {                                                                                                     // 3188
			content = this._normalize( content );                                                                               // 3189
		}                                                                                                                    // 3190
		this._trigger( "response", null, { content: content } );                                                             // 3191
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {                                   // 3192
			this._suggest( content );                                                                                           // 3193
			this._trigger( "open" );                                                                                            // 3194
		} else {                                                                                                             // 3195
			// use ._close() instead of .close() so we don't cancel future searches                                             // 3196
			this._close();                                                                                                      // 3197
		}                                                                                                                    // 3198
	},                                                                                                                    // 3199
                                                                                                                       // 3200
	close: function( event ) {                                                                                            // 3201
		this.cancelSearch = true;                                                                                            // 3202
		this._close( event );                                                                                                // 3203
	},                                                                                                                    // 3204
                                                                                                                       // 3205
	_close: function( event ) {                                                                                           // 3206
		if ( this.menu.element.is( ":visible" ) ) {                                                                          // 3207
			this.menu.element.hide();                                                                                           // 3208
			this.menu.blur();                                                                                                   // 3209
			this.isNewMenu = true;                                                                                              // 3210
			this._trigger( "close", event );                                                                                    // 3211
		}                                                                                                                    // 3212
	},                                                                                                                    // 3213
                                                                                                                       // 3214
	_change: function( event ) {                                                                                          // 3215
		if ( this.previous !== this._value() ) {                                                                             // 3216
			this._trigger( "change", event, { item: this.selectedItem } );                                                      // 3217
		}                                                                                                                    // 3218
	},                                                                                                                    // 3219
                                                                                                                       // 3220
	_normalize: function( items ) {                                                                                       // 3221
		// assume all items have the right format when the first item is complete                                            // 3222
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {                                                        // 3223
			return items;                                                                                                       // 3224
		}                                                                                                                    // 3225
		return $.map( items, function( item ) {                                                                              // 3226
			if ( typeof item === "string" ) {                                                                                   // 3227
				return {                                                                                                           // 3228
					label: item,                                                                                                      // 3229
					value: item                                                                                                       // 3230
				};                                                                                                                 // 3231
			}                                                                                                                   // 3232
			return $.extend( {}, item, {                                                                                        // 3233
				label: item.label || item.value,                                                                                   // 3234
				value: item.value || item.label                                                                                    // 3235
			});                                                                                                                 // 3236
		});                                                                                                                  // 3237
	},                                                                                                                    // 3238
                                                                                                                       // 3239
	_suggest: function( items ) {                                                                                         // 3240
		var ul = this.menu.element.empty();                                                                                  // 3241
		this._renderMenu( ul, items );                                                                                       // 3242
		this.isNewMenu = true;                                                                                               // 3243
		this.menu.refresh();                                                                                                 // 3244
                                                                                                                       // 3245
		// size and position menu                                                                                            // 3246
		ul.show();                                                                                                           // 3247
		this._resizeMenu();                                                                                                  // 3248
		ul.position( $.extend({                                                                                              // 3249
			of: this.element                                                                                                    // 3250
		}, this.options.position ) );                                                                                        // 3251
                                                                                                                       // 3252
		if ( this.options.autoFocus ) {                                                                                      // 3253
			this.menu.next();                                                                                                   // 3254
		}                                                                                                                    // 3255
	},                                                                                                                    // 3256
                                                                                                                       // 3257
	_resizeMenu: function() {                                                                                             // 3258
		var ul = this.menu.element;                                                                                          // 3259
		ul.outerWidth( Math.max(                                                                                             // 3260
			// Firefox wraps long text (possibly a rounding bug)                                                                // 3261
			// so we add 1px to avoid the wrapping (#7513)                                                                      // 3262
			ul.width( "" ).outerWidth() + 1,                                                                                    // 3263
			this.element.outerWidth()                                                                                           // 3264
		) );                                                                                                                 // 3265
	},                                                                                                                    // 3266
                                                                                                                       // 3267
	_renderMenu: function( ul, items ) {                                                                                  // 3268
		var that = this;                                                                                                     // 3269
		$.each( items, function( index, item ) {                                                                             // 3270
			that._renderItemData( ul, item );                                                                                   // 3271
		});                                                                                                                  // 3272
	},                                                                                                                    // 3273
                                                                                                                       // 3274
	_renderItemData: function( ul, item ) {                                                                               // 3275
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );                                            // 3276
	},                                                                                                                    // 3277
                                                                                                                       // 3278
	_renderItem: function( ul, item ) {                                                                                   // 3279
		return $( "<li>" ).text( item.label ).appendTo( ul );                                                                // 3280
	},                                                                                                                    // 3281
                                                                                                                       // 3282
	_move: function( direction, event ) {                                                                                 // 3283
		if ( !this.menu.element.is( ":visible" ) ) {                                                                         // 3284
			this.search( null, event );                                                                                         // 3285
			return;                                                                                                             // 3286
		}                                                                                                                    // 3287
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||                                                     // 3288
				this.menu.isLastItem() && /^next/.test( direction ) ) {                                                            // 3289
                                                                                                                       // 3290
			if ( !this.isMultiLine ) {                                                                                          // 3291
				this._value( this.term );                                                                                          // 3292
			}                                                                                                                   // 3293
                                                                                                                       // 3294
			this.menu.blur();                                                                                                   // 3295
			return;                                                                                                             // 3296
		}                                                                                                                    // 3297
		this.menu[ direction ]( event );                                                                                     // 3298
	},                                                                                                                    // 3299
                                                                                                                       // 3300
	widget: function() {                                                                                                  // 3301
		return this.menu.element;                                                                                            // 3302
	},                                                                                                                    // 3303
                                                                                                                       // 3304
	_value: function() {                                                                                                  // 3305
		return this.valueMethod.apply( this.element, arguments );                                                            // 3306
	},                                                                                                                    // 3307
                                                                                                                       // 3308
	_keyEvent: function( keyEvent, event ) {                                                                              // 3309
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {                                                     // 3310
			this._move( keyEvent, event );                                                                                      // 3311
                                                                                                                       // 3312
			// prevents moving cursor to beginning/end of the text field in some browsers                                       // 3313
			event.preventDefault();                                                                                             // 3314
		}                                                                                                                    // 3315
	}                                                                                                                     // 3316
});                                                                                                                    // 3317
                                                                                                                       // 3318
$.extend( $.ui.autocomplete, {                                                                                         // 3319
	escapeRegex: function( value ) {                                                                                      // 3320
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );                                                       // 3321
	},                                                                                                                    // 3322
	filter: function( array, term ) {                                                                                     // 3323
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );                                              // 3324
		return $.grep( array, function( value ) {                                                                            // 3325
			return matcher.test( value.label || value.value || value );                                                         // 3326
		});                                                                                                                  // 3327
	}                                                                                                                     // 3328
});                                                                                                                    // 3329
                                                                                                                       // 3330
// live region extension, adding a `messages` option                                                                   // 3331
// NOTE: This is an experimental API. We are still investigating                                                       // 3332
// a full solution for string manipulation and internationalization.                                                   // 3333
$.widget( "ui.autocomplete", $.ui.autocomplete, {                                                                      // 3334
	options: {                                                                                                            // 3335
		messages: {                                                                                                          // 3336
			noResults: "No search results.",                                                                                    // 3337
			results: function( amount ) {                                                                                       // 3338
				return amount + ( amount > 1 ? " results are" : " result is" ) +                                                   // 3339
					" available, use up and down arrow keys to navigate.";                                                            // 3340
			}                                                                                                                   // 3341
		}                                                                                                                    // 3342
	},                                                                                                                    // 3343
                                                                                                                       // 3344
	__response: function( content ) {                                                                                     // 3345
		var message;                                                                                                         // 3346
		this._superApply( arguments );                                                                                       // 3347
		if ( this.options.disabled || this.cancelSearch ) {                                                                  // 3348
			return;                                                                                                             // 3349
		}                                                                                                                    // 3350
		if ( content && content.length ) {                                                                                   // 3351
			message = this.options.messages.results( content.length );                                                          // 3352
		} else {                                                                                                             // 3353
			message = this.options.messages.noResults;                                                                          // 3354
		}                                                                                                                    // 3355
		this.liveRegion.children().hide();                                                                                   // 3356
		$( "<div>" ).text( message ).appendTo( this.liveRegion );                                                            // 3357
	}                                                                                                                     // 3358
});                                                                                                                    // 3359
                                                                                                                       // 3360
var autocomplete = $.ui.autocomplete;                                                                                  // 3361
                                                                                                                       // 3362
                                                                                                                       // 3363
/*!                                                                                                                    // 3364
 * jQuery UI Button 1.11.2                                                                                             // 3365
 * http://jqueryui.com                                                                                                 // 3366
 *                                                                                                                     // 3367
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 3368
 * Released under the MIT license.                                                                                     // 3369
 * http://jquery.org/license                                                                                           // 3370
 *                                                                                                                     // 3371
 * http://api.jqueryui.com/button/                                                                                     // 3372
 */                                                                                                                    // 3373
                                                                                                                       // 3374
                                                                                                                       // 3375
var lastActive,                                                                                                        // 3376
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",                                                   // 3377
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {                                                                                       // 3379
		var form = $( this );                                                                                                // 3380
		setTimeout(function() {                                                                                              // 3381
			form.find( ":ui-button" ).button( "refresh" );                                                                      // 3382
		}, 1 );                                                                                                              // 3383
	},                                                                                                                    // 3384
	radioGroup = function( radio ) {                                                                                      // 3385
		var name = radio.name,                                                                                               // 3386
			form = radio.form,                                                                                                  // 3387
			radios = $( [] );                                                                                                   // 3388
		if ( name ) {                                                                                                        // 3389
			name = name.replace( /'/g, "\\'" );                                                                                 // 3390
			if ( form ) {                                                                                                       // 3391
				radios = $( form ).find( "[name='" + name + "'][type=radio]" );                                                    // 3392
			} else {                                                                                                            // 3393
				radios = $( "[name='" + name + "'][type=radio]", radio.ownerDocument )                                             // 3394
					.filter(function() {                                                                                              // 3395
						return !this.form;                                                                                               // 3396
					});                                                                                                               // 3397
			}                                                                                                                   // 3398
		}                                                                                                                    // 3399
		return radios;                                                                                                       // 3400
	};                                                                                                                    // 3401
                                                                                                                       // 3402
$.widget( "ui.button", {                                                                                               // 3403
	version: "1.11.2",                                                                                                    // 3404
	defaultElement: "<button>",                                                                                           // 3405
	options: {                                                                                                            // 3406
		disabled: null,                                                                                                      // 3407
		text: true,                                                                                                          // 3408
		label: null,                                                                                                         // 3409
		icons: {                                                                                                             // 3410
			primary: null,                                                                                                      // 3411
			secondary: null                                                                                                     // 3412
		}                                                                                                                    // 3413
	},                                                                                                                    // 3414
	_create: function() {                                                                                                 // 3415
		this.element.closest( "form" )                                                                                       // 3416
			.unbind( "reset" + this.eventNamespace )                                                                            // 3417
			.bind( "reset" + this.eventNamespace, formResetHandler );                                                           // 3418
                                                                                                                       // 3419
		if ( typeof this.options.disabled !== "boolean" ) {                                                                  // 3420
			this.options.disabled = !!this.element.prop( "disabled" );                                                          // 3421
		} else {                                                                                                             // 3422
			this.element.prop( "disabled", this.options.disabled );                                                             // 3423
		}                                                                                                                    // 3424
                                                                                                                       // 3425
		this._determineButtonType();                                                                                         // 3426
		this.hasTitle = !!this.buttonElement.attr( "title" );                                                                // 3427
                                                                                                                       // 3428
		var that = this,                                                                                                     // 3429
			options = this.options,                                                                                             // 3430
			toggleButton = this.type === "checkbox" || this.type === "radio",                                                   // 3431
			activeClass = !toggleButton ? "ui-state-active" : "";                                                               // 3432
                                                                                                                       // 3433
		if ( options.label === null ) {                                                                                      // 3434
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());                     // 3435
		}                                                                                                                    // 3436
                                                                                                                       // 3437
		this._hoverable( this.buttonElement );                                                                               // 3438
                                                                                                                       // 3439
		this.buttonElement                                                                                                   // 3440
			.addClass( baseClasses )                                                                                            // 3441
			.attr( "role", "button" )                                                                                           // 3442
			.bind( "mouseenter" + this.eventNamespace, function() {                                                             // 3443
				if ( options.disabled ) {                                                                                          // 3444
					return;                                                                                                           // 3445
				}                                                                                                                  // 3446
				if ( this === lastActive ) {                                                                                       // 3447
					$( this ).addClass( "ui-state-active" );                                                                          // 3448
				}                                                                                                                  // 3449
			})                                                                                                                  // 3450
			.bind( "mouseleave" + this.eventNamespace, function() {                                                             // 3451
				if ( options.disabled ) {                                                                                          // 3452
					return;                                                                                                           // 3453
				}                                                                                                                  // 3454
				$( this ).removeClass( activeClass );                                                                              // 3455
			})                                                                                                                  // 3456
			.bind( "click" + this.eventNamespace, function( event ) {                                                           // 3457
				if ( options.disabled ) {                                                                                          // 3458
					event.preventDefault();                                                                                           // 3459
					event.stopImmediatePropagation();                                                                                 // 3460
				}                                                                                                                  // 3461
			});                                                                                                                 // 3462
                                                                                                                       // 3463
		// Can't use _focusable() because the element that receives focus                                                    // 3464
		// and the element that gets the ui-state-focus class are different                                                  // 3465
		this._on({                                                                                                           // 3466
			focus: function() {                                                                                                 // 3467
				this.buttonElement.addClass( "ui-state-focus" );                                                                   // 3468
			},                                                                                                                  // 3469
			blur: function() {                                                                                                  // 3470
				this.buttonElement.removeClass( "ui-state-focus" );                                                                // 3471
			}                                                                                                                   // 3472
		});                                                                                                                  // 3473
                                                                                                                       // 3474
		if ( toggleButton ) {                                                                                                // 3475
			this.element.bind( "change" + this.eventNamespace, function() {                                                     // 3476
				that.refresh();                                                                                                    // 3477
			});                                                                                                                 // 3478
		}                                                                                                                    // 3479
                                                                                                                       // 3480
		if ( this.type === "checkbox" ) {                                                                                    // 3481
			this.buttonElement.bind( "click" + this.eventNamespace, function() {                                                // 3482
				if ( options.disabled ) {                                                                                          // 3483
					return false;                                                                                                     // 3484
				}                                                                                                                  // 3485
			});                                                                                                                 // 3486
		} else if ( this.type === "radio" ) {                                                                                // 3487
			this.buttonElement.bind( "click" + this.eventNamespace, function() {                                                // 3488
				if ( options.disabled ) {                                                                                          // 3489
					return false;                                                                                                     // 3490
				}                                                                                                                  // 3491
				$( this ).addClass( "ui-state-active" );                                                                           // 3492
				that.buttonElement.attr( "aria-pressed", "true" );                                                                 // 3493
                                                                                                                       // 3494
				var radio = that.element[ 0 ];                                                                                     // 3495
				radioGroup( radio )                                                                                                // 3496
					.not( radio )                                                                                                     // 3497
					.map(function() {                                                                                                 // 3498
						return $( this ).button( "widget" )[ 0 ];                                                                        // 3499
					})                                                                                                                // 3500
					.removeClass( "ui-state-active" )                                                                                 // 3501
					.attr( "aria-pressed", "false" );                                                                                 // 3502
			});                                                                                                                 // 3503
		} else {                                                                                                             // 3504
			this.buttonElement                                                                                                  // 3505
				.bind( "mousedown" + this.eventNamespace, function() {                                                             // 3506
					if ( options.disabled ) {                                                                                         // 3507
						return false;                                                                                                    // 3508
					}                                                                                                                 // 3509
					$( this ).addClass( "ui-state-active" );                                                                          // 3510
					lastActive = this;                                                                                                // 3511
					that.document.one( "mouseup", function() {                                                                        // 3512
						lastActive = null;                                                                                               // 3513
					});                                                                                                               // 3514
				})                                                                                                                 // 3515
				.bind( "mouseup" + this.eventNamespace, function() {                                                               // 3516
					if ( options.disabled ) {                                                                                         // 3517
						return false;                                                                                                    // 3518
					}                                                                                                                 // 3519
					$( this ).removeClass( "ui-state-active" );                                                                       // 3520
				})                                                                                                                 // 3521
				.bind( "keydown" + this.eventNamespace, function(event) {                                                          // 3522
					if ( options.disabled ) {                                                                                         // 3523
						return false;                                                                                                    // 3524
					}                                                                                                                 // 3525
					if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {                             // 3526
						$( this ).addClass( "ui-state-active" );                                                                         // 3527
					}                                                                                                                 // 3528
				})                                                                                                                 // 3529
				// see #8559, we bind to blur here in case the button element loses                                                // 3530
				// focus between keydown and keyup, it would be left in an "active" state                                          // 3531
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {                                 // 3532
					$( this ).removeClass( "ui-state-active" );                                                                       // 3533
				});                                                                                                                // 3534
                                                                                                                       // 3535
			if ( this.buttonElement.is("a") ) {                                                                                 // 3536
				this.buttonElement.keyup(function(event) {                                                                         // 3537
					if ( event.keyCode === $.ui.keyCode.SPACE ) {                                                                     // 3538
						// TODO pass through original event correctly (just as 2nd argument doesn't work)                                // 3539
						$( this ).click();                                                                                               // 3540
					}                                                                                                                 // 3541
				});                                                                                                                // 3542
			}                                                                                                                   // 3543
		}                                                                                                                    // 3544
                                                                                                                       // 3545
		this._setOption( "disabled", options.disabled );                                                                     // 3546
		this._resetButton();                                                                                                 // 3547
	},                                                                                                                    // 3548
                                                                                                                       // 3549
	_determineButtonType: function() {                                                                                    // 3550
		var ancestor, labelSelector, checked;                                                                                // 3551
                                                                                                                       // 3552
		if ( this.element.is("[type=checkbox]") ) {                                                                          // 3553
			this.type = "checkbox";                                                                                             // 3554
		} else if ( this.element.is("[type=radio]") ) {                                                                      // 3555
			this.type = "radio";                                                                                                // 3556
		} else if ( this.element.is("input") ) {                                                                             // 3557
			this.type = "input";                                                                                                // 3558
		} else {                                                                                                             // 3559
			this.type = "button";                                                                                               // 3560
		}                                                                                                                    // 3561
                                                                                                                       // 3562
		if ( this.type === "checkbox" || this.type === "radio" ) {                                                           // 3563
			// we don't search against the document in case the element                                                         // 3564
			// is disconnected from the DOM                                                                                     // 3565
			ancestor = this.element.parents().last();                                                                           // 3566
			labelSelector = "label[for='" + this.element.attr("id") + "']";                                                     // 3567
			this.buttonElement = ancestor.find( labelSelector );                                                                // 3568
			if ( !this.buttonElement.length ) {                                                                                 // 3569
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();                                        // 3570
				this.buttonElement = ancestor.filter( labelSelector );                                                             // 3571
				if ( !this.buttonElement.length ) {                                                                                // 3572
					this.buttonElement = ancestor.find( labelSelector );                                                              // 3573
				}                                                                                                                  // 3574
			}                                                                                                                   // 3575
			this.element.addClass( "ui-helper-hidden-accessible" );                                                             // 3576
                                                                                                                       // 3577
			checked = this.element.is( ":checked" );                                                                            // 3578
			if ( checked ) {                                                                                                    // 3579
				this.buttonElement.addClass( "ui-state-active" );                                                                  // 3580
			}                                                                                                                   // 3581
			this.buttonElement.prop( "aria-pressed", checked );                                                                 // 3582
		} else {                                                                                                             // 3583
			this.buttonElement = this.element;                                                                                  // 3584
		}                                                                                                                    // 3585
	},                                                                                                                    // 3586
                                                                                                                       // 3587
	widget: function() {                                                                                                  // 3588
		return this.buttonElement;                                                                                           // 3589
	},                                                                                                                    // 3590
                                                                                                                       // 3591
	_destroy: function() {                                                                                                // 3592
		this.element                                                                                                         // 3593
			.removeClass( "ui-helper-hidden-accessible" );                                                                      // 3594
		this.buttonElement                                                                                                   // 3595
			.removeClass( baseClasses + " ui-state-active " + typeClasses )                                                     // 3596
			.removeAttr( "role" )                                                                                               // 3597
			.removeAttr( "aria-pressed" )                                                                                       // 3598
			.html( this.buttonElement.find(".ui-button-text").html() );                                                         // 3599
                                                                                                                       // 3600
		if ( !this.hasTitle ) {                                                                                              // 3601
			this.buttonElement.removeAttr( "title" );                                                                           // 3602
		}                                                                                                                    // 3603
	},                                                                                                                    // 3604
                                                                                                                       // 3605
	_setOption: function( key, value ) {                                                                                  // 3606
		this._super( key, value );                                                                                           // 3607
		if ( key === "disabled" ) {                                                                                          // 3608
			this.widget().toggleClass( "ui-state-disabled", !!value );                                                          // 3609
			this.element.prop( "disabled", !!value );                                                                           // 3610
			if ( value ) {                                                                                                      // 3611
				if ( this.type === "checkbox" || this.type === "radio" ) {                                                         // 3612
					this.buttonElement.removeClass( "ui-state-focus" );                                                               // 3613
				} else {                                                                                                           // 3614
					this.buttonElement.removeClass( "ui-state-focus ui-state-active" );                                               // 3615
				}                                                                                                                  // 3616
			}                                                                                                                   // 3617
			return;                                                                                                             // 3618
		}                                                                                                                    // 3619
		this._resetButton();                                                                                                 // 3620
	},                                                                                                                    // 3621
                                                                                                                       // 3622
	refresh: function() {                                                                                                 // 3623
		//See #8237 & #8828                                                                                                  // 3624
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );
                                                                                                                       // 3626
		if ( isDisabled !== this.options.disabled ) {                                                                        // 3627
			this._setOption( "disabled", isDisabled );                                                                          // 3628
		}                                                                                                                    // 3629
		if ( this.type === "radio" ) {                                                                                       // 3630
			radioGroup( this.element[0] ).each(function() {                                                                     // 3631
				if ( $( this ).is( ":checked" ) ) {                                                                                // 3632
					$( this ).button( "widget" )                                                                                      // 3633
						.addClass( "ui-state-active" )                                                                                   // 3634
						.attr( "aria-pressed", "true" );                                                                                 // 3635
				} else {                                                                                                           // 3636
					$( this ).button( "widget" )                                                                                      // 3637
						.removeClass( "ui-state-active" )                                                                                // 3638
						.attr( "aria-pressed", "false" );                                                                                // 3639
				}                                                                                                                  // 3640
			});                                                                                                                 // 3641
		} else if ( this.type === "checkbox" ) {                                                                             // 3642
			if ( this.element.is( ":checked" ) ) {                                                                              // 3643
				this.buttonElement                                                                                                 // 3644
					.addClass( "ui-state-active" )                                                                                    // 3645
					.attr( "aria-pressed", "true" );                                                                                  // 3646
			} else {                                                                                                            // 3647
				this.buttonElement                                                                                                 // 3648
					.removeClass( "ui-state-active" )                                                                                 // 3649
					.attr( "aria-pressed", "false" );                                                                                 // 3650
			}                                                                                                                   // 3651
		}                                                                                                                    // 3652
	},                                                                                                                    // 3653
                                                                                                                       // 3654
	_resetButton: function() {                                                                                            // 3655
		if ( this.type === "input" ) {                                                                                       // 3656
			if ( this.options.label ) {                                                                                         // 3657
				this.element.val( this.options.label );                                                                            // 3658
			}                                                                                                                   // 3659
			return;                                                                                                             // 3660
		}                                                                                                                    // 3661
		var buttonElement = this.buttonElement.removeClass( typeClasses ),                                                   // 3662
			buttonText = $( "<span></span>", this.document[0] )                                                                 // 3663
				.addClass( "ui-button-text" )                                                                                      // 3664
				.html( this.options.label )                                                                                        // 3665
				.appendTo( buttonElement.empty() )                                                                                 // 3666
				.text(),                                                                                                           // 3667
			icons = this.options.icons,                                                                                         // 3668
			multipleIcons = icons.primary && icons.secondary,                                                                   // 3669
			buttonClasses = [];                                                                                                 // 3670
                                                                                                                       // 3671
		if ( icons.primary || icons.secondary ) {                                                                            // 3672
			if ( this.options.text ) {                                                                                          // 3673
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}                                                                                                                   // 3675
                                                                                                                       // 3676
			if ( icons.primary ) {                                                                                              // 3677
				buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );             // 3678
			}                                                                                                                   // 3679
                                                                                                                       // 3680
			if ( icons.secondary ) {                                                                                            // 3681
				buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );          // 3682
			}                                                                                                                   // 3683
                                                                                                                       // 3684
			if ( !this.options.text ) {                                                                                         // 3685
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );                              // 3686
                                                                                                                       // 3687
				if ( !this.hasTitle ) {                                                                                            // 3688
					buttonElement.attr( "title", $.trim( buttonText ) );                                                              // 3689
				}                                                                                                                  // 3690
			}                                                                                                                   // 3691
		} else {                                                                                                             // 3692
			buttonClasses.push( "ui-button-text-only" );                                                                        // 3693
		}                                                                                                                    // 3694
		buttonElement.addClass( buttonClasses.join( " " ) );                                                                 // 3695
	}                                                                                                                     // 3696
});                                                                                                                    // 3697
                                                                                                                       // 3698
$.widget( "ui.buttonset", {                                                                                            // 3699
	version: "1.11.2",                                                                                                    // 3700
	options: {                                                                                                            // 3701
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
	},                                                                                                                    // 3703
                                                                                                                       // 3704
	_create: function() {                                                                                                 // 3705
		this.element.addClass( "ui-buttonset" );                                                                             // 3706
	},                                                                                                                    // 3707
                                                                                                                       // 3708
	_init: function() {                                                                                                   // 3709
		this.refresh();                                                                                                      // 3710
	},                                                                                                                    // 3711
                                                                                                                       // 3712
	_setOption: function( key, value ) {                                                                                  // 3713
		if ( key === "disabled" ) {                                                                                          // 3714
			this.buttons.button( "option", key, value );                                                                        // 3715
		}                                                                                                                    // 3716
                                                                                                                       // 3717
		this._super( key, value );                                                                                           // 3718
	},                                                                                                                    // 3719
                                                                                                                       // 3720
	refresh: function() {                                                                                                 // 3721
		var rtl = this.element.css( "direction" ) === "rtl",                                                                 // 3722
			allButtons = this.element.find( this.options.items ),                                                               // 3723
			existingButtons = allButtons.filter( ":ui-button" );                                                                // 3724
                                                                                                                       // 3725
		// Initialize new buttons                                                                                            // 3726
		allButtons.not( ":ui-button" ).button();                                                                             // 3727
                                                                                                                       // 3728
		// Refresh existing buttons                                                                                          // 3729
		existingButtons.button( "refresh" );                                                                                 // 3730
                                                                                                                       // 3731
		this.buttons = allButtons                                                                                            // 3732
			.map(function() {                                                                                                   // 3733
				return $( this ).button( "widget" )[ 0 ];                                                                          // 3734
			})                                                                                                                  // 3735
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )                                                     // 3736
				.filter( ":first" )                                                                                                // 3737
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )                                                           // 3738
				.end()                                                                                                             // 3739
				.filter( ":last" )                                                                                                 // 3740
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )                                                           // 3741
				.end()                                                                                                             // 3742
			.end();                                                                                                             // 3743
	},                                                                                                                    // 3744
                                                                                                                       // 3745
	_destroy: function() {                                                                                                // 3746
		this.element.removeClass( "ui-buttonset" );                                                                          // 3747
		this.buttons                                                                                                         // 3748
			.map(function() {                                                                                                   // 3749
				return $( this ).button( "widget" )[ 0 ];                                                                          // 3750
			})                                                                                                                  // 3751
				.removeClass( "ui-corner-left ui-corner-right" )                                                                   // 3752
			.end()                                                                                                              // 3753
			.button( "destroy" );                                                                                               // 3754
	}                                                                                                                     // 3755
});                                                                                                                    // 3756
                                                                                                                       // 3757
var button = $.ui.button;                                                                                              // 3758
                                                                                                                       // 3759
                                                                                                                       // 3760
/*!                                                                                                                    // 3761
 * jQuery UI Datepicker 1.11.2                                                                                         // 3762
 * http://jqueryui.com                                                                                                 // 3763
 *                                                                                                                     // 3764
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 3765
 * Released under the MIT license.                                                                                     // 3766
 * http://jquery.org/license                                                                                           // 3767
 *                                                                                                                     // 3768
 * http://api.jqueryui.com/datepicker/                                                                                 // 3769
 */                                                                                                                    // 3770
                                                                                                                       // 3771
                                                                                                                       // 3772
$.extend($.ui, { datepicker: { version: "1.11.2" } });                                                                 // 3773
                                                                                                                       // 3774
var datepicker_instActive;                                                                                             // 3775
                                                                                                                       // 3776
function datepicker_getZindex( elem ) {                                                                                // 3777
	var position, value;                                                                                                  // 3778
	while ( elem.length && elem[ 0 ] !== document ) {                                                                     // 3779
		// Ignore z-index if position is set to a value where z-index is ignored by the browser                              // 3780
		// This makes behavior of this function consistent across browsers                                                   // 3781
		// WebKit always returns auto if the element is positioned                                                           // 3782
		position = elem.css( "position" );                                                                                   // 3783
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {                                  // 3784
			// IE returns 0 when zIndex is not specified                                                                        // 3785
			// other browsers return a string                                                                                   // 3786
			// we ignore the case of nested elements with an explicit value of 0                                                // 3787
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>                                                 // 3788
			value = parseInt( elem.css( "zIndex" ), 10 );                                                                       // 3789
			if ( !isNaN( value ) && value !== 0 ) {                                                                             // 3790
				return value;                                                                                                      // 3791
			}                                                                                                                   // 3792
		}                                                                                                                    // 3793
		elem = elem.parent();                                                                                                // 3794
	}                                                                                                                     // 3795
                                                                                                                       // 3796
	return 0;                                                                                                             // 3797
}                                                                                                                      // 3798
/* Date picker manager.                                                                                                // 3799
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.                           // 3800
   Settings for (groups of) date pickers are maintained in an instance object,                                         // 3801
   allowing multiple different settings on the same page. */                                                           // 3802
                                                                                                                       // 3803
function Datepicker() {                                                                                                // 3804
	this._curInst = null; // The current instance in use                                                                  // 3805
	this._keyEvent = false; // If the last event was a key event                                                          // 3806
	this._disabledInputs = []; // List of date picker inputs that have been disabled                                      // 3807
	this._datepickerShowing = false; // True if the popup picker is showing , false if not                                // 3808
	this._inDialog = false; // True if showing within a "dialog", false if not                                            // 3809
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division                                      // 3810
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class                                    // 3811
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class                                    // 3812
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class                                 // 3813
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class                                    // 3814
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class                      // 3815
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class             // 3816
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class                         // 3817
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class                        // 3818
	this.regional = []; // Available regional settings, indexed by language code                                          // 3819
	this.regional[""] = { // Default regional settings                                                                    // 3820
		closeText: "Done", // Display text for close link                                                                    // 3821
		prevText: "Prev", // Display text for previous month link                                                            // 3822
		nextText: "Next", // Display text for next month link                                                                // 3823
		currentText: "Today", // Display text for current month link                                                         // 3824
		monthNames: ["January","February","March","April","May","June",                                                      // 3825
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting       // 3826
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting          // 3828
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting                                  // 3829
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday                    // 3830
		weekHeader: "Wk", // Column header for week of the year                                                              // 3831
		dateFormat: "mm/dd/yy", // See format options on parseDate                                                           // 3832
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...                                                     // 3833
		isRTL: false, // True if right-to-left language, false if left-to-right                                              // 3834
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year                      // 3835
		yearSuffix: "" // Additional text to append to the year in the month headers                                         // 3836
	};                                                                                                                    // 3837
	this._defaults = { // Global defaults for all the date picker instances                                               // 3838
		showOn: "focus", // "focus" for popup on focus,                                                                      // 3839
			// "button" for trigger button, or "both" for either                                                                // 3840
		showAnim: "fadeIn", // Name of jQuery animation for popup                                                            // 3841
		showOptions: {}, // Options for enhanced animations                                                                  // 3842
		defaultDate: null, // Used when field is blank: actual date,                                                         // 3843
			// +/-number for offset from today, null for today                                                                  // 3844
		appendText: "", // Display text following the input box, e.g. showing the format                                     // 3845
		buttonText: "...", // Text for trigger button                                                                        // 3846
		buttonImage: "", // URL for trigger button image                                                                     // 3847
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button                          // 3848
		hideIfNoPrevNext: false, // True to hide next/previous month links                                                   // 3849
			// if not applicable, false to just disable them                                                                    // 3850
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links                           // 3851
		gotoCurrent: false, // True if today link goes back to current selection instead                                     // 3852
		changeMonth: false, // True if month can be selected directly, false if only prev/next                               // 3853
		changeYear: false, // True if year can be selected directly, false if only prev/next                                 // 3854
		yearRange: "c-10:c+10", // Range of years to display in drop-down,                                                   // 3855
			// either relative to today's year (-nn:+nn), relative to currently displayed year                                  // 3856
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)                                       // 3857
		showOtherMonths: false, // True to show dates in other months, false to leave blank                                  // 3858
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable                // 3859
		showWeek: false, // True to show week of the year, false to not show it                                              // 3860
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,                                           // 3861
			// takes a Date and returns the number of the week for it                                                           // 3862
		shortYearCutoff: "+10", // Short year values < this are in the current century,                                      // 3863
			// > this are in the previous century,                                                                              // 3864
			// string value starting with "+" for current year + value                                                          // 3865
		minDate: null, // The earliest selectable date, or null for no limit                                                 // 3866
		maxDate: null, // The latest selectable date, or null for no limit                                                   // 3867
		duration: "fast", // Duration of display/closure                                                                     // 3868
		beforeShowDay: null, // Function that takes a date and returns an array with                                         // 3869
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",                                    // 3870
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends                                                        // 3871
		beforeShow: null, // Function that takes an input field and                                                          // 3872
			// returns a set of custom settings for the date picker                                                             // 3873
		onSelect: null, // Define a callback function when a date is selected                                                // 3874
		onChangeMonthYear: null, // Define a callback function when the month or year is changed                             // 3875
		onClose: null, // Define a callback function when the datepicker is closed                                           // 3876
		numberOfMonths: 1, // Number of months to show at a time                                                             // 3877
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)            // 3878
		stepMonths: 1, // Number of months to step back/forward                                                              // 3879
		stepBigMonths: 12, // Number of months to step back/forward for the big links                                        // 3880
		altField: "", // Selector for an alternate field to store selected dates into                                        // 3881
		altFormat: "", // The date format to use for the alternate field                                                     // 3882
		constrainInput: true, // The input is constrained by the current date format                                         // 3883
		showButtonPanel: false, // True to show button panel, false to not show it                                           // 3884
		autoSize: false, // True to size the input for the date format, false to leave as is                                 // 3885
		disabled: false // The initial disabled state                                                                        // 3886
	};                                                                                                                    // 3887
	$.extend(this._defaults, this.regional[""]);                                                                          // 3888
	this.regional.en = $.extend( true, {}, this.regional[ "" ]);                                                          // 3889
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );                                                    // 3890
	this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}                                                                                                                      // 3892
                                                                                                                       // 3893
$.extend(Datepicker.prototype, {                                                                                       // 3894
	/* Class name added to elements to indicate already configured with a date picker. */                                 // 3895
	markerClassName: "hasDatepicker",                                                                                     // 3896
                                                                                                                       // 3897
	//Keep track of the maximum number of rows displayed (see #7043)                                                      // 3898
	maxRows: 4,                                                                                                           // 3899
                                                                                                                       // 3900
	// TODO rename to "widget" when switching to widget factory                                                           // 3901
	_widgetDatepicker: function() {                                                                                       // 3902
		return this.dpDiv;                                                                                                   // 3903
	},                                                                                                                    // 3904
                                                                                                                       // 3905
	/* Override the default settings for all instances of the date picker.                                                // 3906
	 * @param  settings  object - the new settings to use as defaults (anonymous object)                                  // 3907
	 * @return the manager object                                                                                         // 3908
	 */                                                                                                                   // 3909
	setDefaults: function(settings) {                                                                                     // 3910
		datepicker_extendRemove(this._defaults, settings || {});                                                             // 3911
		return this;                                                                                                         // 3912
	},                                                                                                                    // 3913
                                                                                                                       // 3914
	/* Attach the date picker to a jQuery selection.                                                                      // 3915
	 * @param  target	element - the target input field or division or span                                                // 3916
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)                       // 3917
	 */                                                                                                                   // 3918
	_attachDatepicker: function(target, settings) {                                                                       // 3919
		var nodeName, inline, inst;                                                                                          // 3920
		nodeName = target.nodeName.toLowerCase();                                                                            // 3921
		inline = (nodeName === "div" || nodeName === "span");                                                                // 3922
		if (!target.id) {                                                                                                    // 3923
			this.uuid += 1;                                                                                                     // 3924
			target.id = "dp" + this.uuid;                                                                                       // 3925
		}                                                                                                                    // 3926
		inst = this._newInst($(target), inline);                                                                             // 3927
		inst.settings = $.extend({}, settings || {});                                                                        // 3928
		if (nodeName === "input") {                                                                                          // 3929
			this._connectDatepicker(target, inst);                                                                              // 3930
		} else if (inline) {                                                                                                 // 3931
			this._inlineDatepicker(target, inst);                                                                               // 3932
		}                                                                                                                    // 3933
	},                                                                                                                    // 3934
                                                                                                                       // 3935
	/* Create a new instance object. */                                                                                   // 3936
	_newInst: function(target, inline) {                                                                                  // 3937
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars                           // 3938
		return {id: id, input: target, // associated target                                                                  // 3939
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection                                             // 3940
			drawMonth: 0, drawYear: 0, // month being drawn                                                                     // 3941
			inline: inline, // is datepicker inline or not                                                                      // 3942
			dpDiv: (!inline ? this.dpDiv : // presentation div                                                                  // 3943
			datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},                                                                                                                    // 3945
                                                                                                                       // 3946
	/* Attach the date picker to an input field. */                                                                       // 3947
	_connectDatepicker: function(target, inst) {                                                                          // 3948
		var input = $(target);                                                                                               // 3949
		inst.append = $([]);                                                                                                 // 3950
		inst.trigger = $([]);                                                                                                // 3951
		if (input.hasClass(this.markerClassName)) {                                                                          // 3952
			return;                                                                                                             // 3953
		}                                                                                                                    // 3954
		this._attachments(input, inst);                                                                                      // 3955
		input.addClass(this.markerClassName).keydown(this._doKeyDown).                                                       // 3956
			keypress(this._doKeyPress).keyup(this._doKeyUp);                                                                    // 3957
		this._autoSize(inst);                                                                                                // 3958
		$.data(target, "datepicker", inst);                                                                                  // 3959
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)       // 3960
		if( inst.settings.disabled ) {                                                                                       // 3961
			this._disableDatepicker( target );                                                                                  // 3962
		}                                                                                                                    // 3963
	},                                                                                                                    // 3964
                                                                                                                       // 3965
	/* Make attachments based on settings. */                                                                             // 3966
	_attachments: function(input, inst) {                                                                                 // 3967
		var showOn, buttonText, buttonImage,                                                                                 // 3968
			appendText = this._get(inst, "appendText"),                                                                         // 3969
			isRTL = this._get(inst, "isRTL");                                                                                   // 3970
                                                                                                                       // 3971
		if (inst.append) {                                                                                                   // 3972
			inst.append.remove();                                                                                               // 3973
		}                                                                                                                    // 3974
		if (appendText) {                                                                                                    // 3975
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");                               // 3976
			input[isRTL ? "before" : "after"](inst.append);                                                                     // 3977
		}                                                                                                                    // 3978
                                                                                                                       // 3979
		input.unbind("focus", this._showDatepicker);                                                                         // 3980
                                                                                                                       // 3981
		if (inst.trigger) {                                                                                                  // 3982
			inst.trigger.remove();                                                                                              // 3983
		}                                                                                                                    // 3984
                                                                                                                       // 3985
		showOn = this._get(inst, "showOn");                                                                                  // 3986
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field                        // 3987
			input.focus(this._showDatepicker);                                                                                  // 3988
		}                                                                                                                    // 3989
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked                            // 3990
			buttonText = this._get(inst, "buttonText");                                                                         // 3991
			buttonImage = this._get(inst, "buttonImage");                                                                       // 3992
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?                                                               // 3993
				$("<img/>").addClass(this._triggerClass).                                                                          // 3994
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :                                                  // 3995
				$("<button type='button'></button>").addClass(this._triggerClass).                                                 // 3996
					html(!buttonImage ? buttonText : $("<img/>").attr(                                                                // 3997
					{ src:buttonImage, alt:buttonText, title:buttonText })));                                                         // 3998
			input[isRTL ? "before" : "after"](inst.trigger);                                                                    // 3999
			inst.trigger.click(function() {                                                                                     // 4000
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {                                     // 4001
					$.datepicker._hideDatepicker();                                                                                   // 4002
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {                              // 4003
					$.datepicker._hideDatepicker();                                                                                   // 4004
					$.datepicker._showDatepicker(input[0]);                                                                           // 4005
				} else {                                                                                                           // 4006
					$.datepicker._showDatepicker(input[0]);                                                                           // 4007
				}                                                                                                                  // 4008
				return false;                                                                                                      // 4009
			});                                                                                                                 // 4010
		}                                                                                                                    // 4011
	},                                                                                                                    // 4012
                                                                                                                       // 4013
	/* Apply the maximum length for the date format. */                                                                   // 4014
	_autoSize: function(inst) {                                                                                           // 4015
		if (this._get(inst, "autoSize") && !inst.inline) {                                                                   // 4016
			var findMax, max, maxI, i,                                                                                          // 4017
				date = new Date(2009, 12 - 1, 20), // Ensure double digits                                                         // 4018
				dateFormat = this._get(inst, "dateFormat");                                                                        // 4019
                                                                                                                       // 4020
			if (dateFormat.match(/[DM]/)) {                                                                                     // 4021
				findMax = function(names) {                                                                                        // 4022
					max = 0;                                                                                                          // 4023
					maxI = 0;                                                                                                         // 4024
					for (i = 0; i < names.length; i++) {                                                                              // 4025
						if (names[i].length > max) {                                                                                     // 4026
							max = names[i].length;                                                                                          // 4027
							maxI = i;                                                                                                       // 4028
						}                                                                                                                // 4029
					}                                                                                                                 // 4030
					return maxI;                                                                                                      // 4031
				};                                                                                                                 // 4032
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?                                                    // 4033
					"monthNames" : "monthNamesShort"))));                                                                             // 4034
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?                                                     // 4035
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());                                                            // 4036
			}                                                                                                                   // 4037
			inst.input.attr("size", this._formatDate(inst, date).length);                                                       // 4038
		}                                                                                                                    // 4039
	},                                                                                                                    // 4040
                                                                                                                       // 4041
	/* Attach an inline date picker to a div. */                                                                          // 4042
	_inlineDatepicker: function(target, inst) {                                                                           // 4043
		var divSpan = $(target);                                                                                             // 4044
		if (divSpan.hasClass(this.markerClassName)) {                                                                        // 4045
			return;                                                                                                             // 4046
		}                                                                                                                    // 4047
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);                                                           // 4048
		$.data(target, "datepicker", inst);                                                                                  // 4049
		this._setDate(inst, this._getDefaultDate(inst), true);                                                               // 4050
		this._updateDatepicker(inst);                                                                                        // 4051
		this._updateAlternate(inst);                                                                                         // 4052
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)                            // 4053
		if( inst.settings.disabled ) {                                                                                       // 4054
			this._disableDatepicker( target );                                                                                  // 4055
		}                                                                                                                    // 4056
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements                         // 4057
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height                     // 4058
		inst.dpDiv.css( "display", "block" );                                                                                // 4059
	},                                                                                                                    // 4060
                                                                                                                       // 4061
	/* Pop-up the date picker in a "dialog" box.                                                                          // 4062
	 * @param  input element - ignored                                                                                    // 4063
	 * @param  date	string or Date - the initial date to display                                                          // 4064
	 * @param  onSelect  function - the function to call when a date is selected                                          // 4065
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)                    // 4066
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or                                    // 4067
	 *					event - with x/y coordinates or                                                                                // 4068
	 *					leave empty for default (screen centre)                                                                        // 4069
	 * @return the manager object                                                                                         // 4070
	 */                                                                                                                   // 4071
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {                                                   // 4072
		var id, browserWidth, browserHeight, scrollX, scrollY,                                                               // 4073
			inst = this._dialogInst; // internal instance                                                                       // 4074
                                                                                                                       // 4075
		if (!inst) {                                                                                                         // 4076
			this.uuid += 1;                                                                                                     // 4077
			id = "dp" + this.uuid;                                                                                              // 4078
			this._dialogInput = $("<input type='text' id='" + id +                                                              // 4079
				"' style='position: absolute; top: -100px; width: 0px;'/>");                                                       // 4080
			this._dialogInput.keydown(this._doKeyDown);                                                                         // 4081
			$("body").append(this._dialogInput);                                                                                // 4082
			inst = this._dialogInst = this._newInst(this._dialogInput, false);                                                  // 4083
			inst.settings = {};                                                                                                 // 4084
			$.data(this._dialogInput[0], "datepicker", inst);                                                                   // 4085
		}                                                                                                                    // 4086
		datepicker_extendRemove(inst.settings, settings || {});                                                              // 4087
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);                                    // 4088
		this._dialogInput.val(date);                                                                                         // 4089
                                                                                                                       // 4090
		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);                                              // 4091
		if (!this._pos) {                                                                                                    // 4092
			browserWidth = document.documentElement.clientWidth;                                                                // 4093
			browserHeight = document.documentElement.clientHeight;                                                              // 4094
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;                                          // 4095
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;                                            // 4096
			this._pos = // should use actual width/height below                                                                 // 4097
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];                                         // 4098
		}                                                                                                                    // 4099
                                                                                                                       // 4100
		// move input on screen for focus, but hidden behind dialog                                                          // 4101
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");                           // 4102
		inst.settings.onSelect = onSelect;                                                                                   // 4103
		this._inDialog = true;                                                                                               // 4104
		this.dpDiv.addClass(this._dialogClass);                                                                              // 4105
		this._showDatepicker(this._dialogInput[0]);                                                                          // 4106
		if ($.blockUI) {                                                                                                     // 4107
			$.blockUI(this.dpDiv);                                                                                              // 4108
		}                                                                                                                    // 4109
		$.data(this._dialogInput[0], "datepicker", inst);                                                                    // 4110
		return this;                                                                                                         // 4111
	},                                                                                                                    // 4112
                                                                                                                       // 4113
	/* Detach a datepicker from its control.                                                                              // 4114
	 * @param  target	element - the target input field or division or span                                                // 4115
	 */                                                                                                                   // 4116
	_destroyDatepicker: function(target) {                                                                                // 4117
		var nodeName,                                                                                                        // 4118
			$target = $(target),                                                                                                // 4119
			inst = $.data(target, "datepicker");                                                                                // 4120
                                                                                                                       // 4121
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 4122
			return;                                                                                                             // 4123
		}                                                                                                                    // 4124
                                                                                                                       // 4125
		nodeName = target.nodeName.toLowerCase();                                                                            // 4126
		$.removeData(target, "datepicker");                                                                                  // 4127
		if (nodeName === "input") {                                                                                          // 4128
			inst.append.remove();                                                                                               // 4129
			inst.trigger.remove();                                                                                              // 4130
			$target.removeClass(this.markerClassName).                                                                          // 4131
				unbind("focus", this._showDatepicker).                                                                             // 4132
				unbind("keydown", this._doKeyDown).                                                                                // 4133
				unbind("keypress", this._doKeyPress).                                                                              // 4134
				unbind("keyup", this._doKeyUp);                                                                                    // 4135
		} else if (nodeName === "div" || nodeName === "span") {                                                              // 4136
			$target.removeClass(this.markerClassName).empty();                                                                  // 4137
		}                                                                                                                    // 4138
	},                                                                                                                    // 4139
                                                                                                                       // 4140
	/* Enable the date picker to a jQuery selection.                                                                      // 4141
	 * @param  target	element - the target input field or division or span                                                // 4142
	 */                                                                                                                   // 4143
	_enableDatepicker: function(target) {                                                                                 // 4144
		var nodeName, inline,                                                                                                // 4145
			$target = $(target),                                                                                                // 4146
			inst = $.data(target, "datepicker");                                                                                // 4147
                                                                                                                       // 4148
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 4149
			return;                                                                                                             // 4150
		}                                                                                                                    // 4151
                                                                                                                       // 4152
		nodeName = target.nodeName.toLowerCase();                                                                            // 4153
		if (nodeName === "input") {                                                                                          // 4154
			target.disabled = false;                                                                                            // 4155
			inst.trigger.filter("button").                                                                                      // 4156
				each(function() { this.disabled = false; }).end().                                                                 // 4157
				filter("img").css({opacity: "1.0", cursor: ""});                                                                   // 4158
		} else if (nodeName === "div" || nodeName === "span") {                                                              // 4159
			inline = $target.children("." + this._inlineClass);                                                                 // 4160
			inline.children().removeClass("ui-state-disabled");                                                                 // 4161
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").                                               // 4162
				prop("disabled", false);                                                                                           // 4163
		}                                                                                                                    // 4164
		this._disabledInputs = $.map(this._disabledInputs,                                                                   // 4165
			function(value) { return (value === target ? null : value); }); // delete entry                                     // 4166
	},                                                                                                                    // 4167
                                                                                                                       // 4168
	/* Disable the date picker to a jQuery selection.                                                                     // 4169
	 * @param  target	element - the target input field or division or span                                                // 4170
	 */                                                                                                                   // 4171
	_disableDatepicker: function(target) {                                                                                // 4172
		var nodeName, inline,                                                                                                // 4173
			$target = $(target),                                                                                                // 4174
			inst = $.data(target, "datepicker");                                                                                // 4175
                                                                                                                       // 4176
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 4177
			return;                                                                                                             // 4178
		}                                                                                                                    // 4179
                                                                                                                       // 4180
		nodeName = target.nodeName.toLowerCase();                                                                            // 4181
		if (nodeName === "input") {                                                                                          // 4182
			target.disabled = true;                                                                                             // 4183
			inst.trigger.filter("button").                                                                                      // 4184
				each(function() { this.disabled = true; }).end().                                                                  // 4185
				filter("img").css({opacity: "0.5", cursor: "default"});                                                            // 4186
		} else if (nodeName === "div" || nodeName === "span") {                                                              // 4187
			inline = $target.children("." + this._inlineClass);                                                                 // 4188
			inline.children().addClass("ui-state-disabled");                                                                    // 4189
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").                                               // 4190
				prop("disabled", true);                                                                                            // 4191
		}                                                                                                                    // 4192
		this._disabledInputs = $.map(this._disabledInputs,                                                                   // 4193
			function(value) { return (value === target ? null : value); }); // delete entry                                     // 4194
		this._disabledInputs[this._disabledInputs.length] = target;                                                          // 4195
	},                                                                                                                    // 4196
                                                                                                                       // 4197
	/* Is the first field in a jQuery collection disabled as a datepicker?                                                // 4198
	 * @param  target	element - the target input field or division or span                                                // 4199
	 * @return boolean - true if disabled, false if enabled                                                               // 4200
	 */                                                                                                                   // 4201
	_isDisabledDatepicker: function(target) {                                                                             // 4202
		if (!target) {                                                                                                       // 4203
			return false;                                                                                                       // 4204
		}                                                                                                                    // 4205
		for (var i = 0; i < this._disabledInputs.length; i++) {                                                              // 4206
			if (this._disabledInputs[i] === target) {                                                                           // 4207
				return true;                                                                                                       // 4208
			}                                                                                                                   // 4209
		}                                                                                                                    // 4210
		return false;                                                                                                        // 4211
	},                                                                                                                    // 4212
                                                                                                                       // 4213
	/* Retrieve the instance data for the target control.                                                                 // 4214
	 * @param  target  element - the target input field or division or span                                               // 4215
	 * @return  object - the associated instance data                                                                     // 4216
	 * @throws  error if a jQuery problem getting data                                                                    // 4217
	 */                                                                                                                   // 4218
	_getInst: function(target) {                                                                                          // 4219
		try {                                                                                                                // 4220
			return $.data(target, "datepicker");                                                                                // 4221
		}                                                                                                                    // 4222
		catch (err) {                                                                                                        // 4223
			throw "Missing instance data for this datepicker";                                                                  // 4224
		}                                                                                                                    // 4225
	},                                                                                                                    // 4226
                                                                                                                       // 4227
	/* Update or retrieve the settings for a date picker attached to an input field or division.                          // 4228
	 * @param  target  element - the target input field or division or span                                               // 4229
	 * @param  name	object - the new settings to update or                                                                // 4230
	 *				string - the name of the setting to change or retrieve,                                                         // 4231
	 *				when retrieving also "all" for all instance settings or                                                         // 4232
	 *				"defaults" for all global defaults                                                                              // 4233
	 * @param  value   any - the new value for the setting                                                                // 4234
	 *				(omit if above is an object or to retrieve a value)                                                             // 4235
	 */                                                                                                                   // 4236
	_optionDatepicker: function(target, name, value) {                                                                    // 4237
		var settings, date, minDate, maxDate,                                                                                // 4238
			inst = this._getInst(target);                                                                                       // 4239
                                                                                                                       // 4240
		if (arguments.length === 2 && typeof name === "string") {                                                            // 4241
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :                                                // 4242
				(inst ? (name === "all" ? $.extend({}, inst.settings) :                                                            // 4243
				this._get(inst, name)) : null));                                                                                   // 4244
		}                                                                                                                    // 4245
                                                                                                                       // 4246
		settings = name || {};                                                                                               // 4247
		if (typeof name === "string") {                                                                                      // 4248
			settings = {};                                                                                                      // 4249
			settings[name] = value;                                                                                             // 4250
		}                                                                                                                    // 4251
                                                                                                                       // 4252
		if (inst) {                                                                                                          // 4253
			if (this._curInst === inst) {                                                                                       // 4254
				this._hideDatepicker();                                                                                            // 4255
			}                                                                                                                   // 4256
                                                                                                                       // 4257
			date = this._getDateDatepicker(target, true);                                                                       // 4258
			minDate = this._getMinMaxDate(inst, "min");                                                                         // 4259
			maxDate = this._getMinMaxDate(inst, "max");                                                                         // 4260
			datepicker_extendRemove(inst.settings, settings);                                                                   // 4261
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided           // 4262
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {                      // 4263
				inst.settings.minDate = this._formatDate(inst, minDate);                                                           // 4264
			}                                                                                                                   // 4265
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {                      // 4266
				inst.settings.maxDate = this._formatDate(inst, maxDate);                                                           // 4267
			}                                                                                                                   // 4268
			if ( "disabled" in settings ) {                                                                                     // 4269
				if ( settings.disabled ) {                                                                                         // 4270
					this._disableDatepicker(target);                                                                                  // 4271
				} else {                                                                                                           // 4272
					this._enableDatepicker(target);                                                                                   // 4273
				}                                                                                                                  // 4274
			}                                                                                                                   // 4275
			this._attachments($(target), inst);                                                                                 // 4276
			this._autoSize(inst);                                                                                               // 4277
			this._setDate(inst, date);                                                                                          // 4278
			this._updateAlternate(inst);                                                                                        // 4279
			this._updateDatepicker(inst);                                                                                       // 4280
		}                                                                                                                    // 4281
	},                                                                                                                    // 4282
                                                                                                                       // 4283
	// change method deprecated                                                                                           // 4284
	_changeDatepicker: function(target, name, value) {                                                                    // 4285
		this._optionDatepicker(target, name, value);                                                                         // 4286
	},                                                                                                                    // 4287
                                                                                                                       // 4288
	/* Redraw the date picker attached to an input field or division.                                                     // 4289
	 * @param  target  element - the target input field or division or span                                               // 4290
	 */                                                                                                                   // 4291
	_refreshDatepicker: function(target) {                                                                                // 4292
		var inst = this._getInst(target);                                                                                    // 4293
		if (inst) {                                                                                                          // 4294
			this._updateDatepicker(inst);                                                                                       // 4295
		}                                                                                                                    // 4296
	},                                                                                                                    // 4297
                                                                                                                       // 4298
	/* Set the dates for a jQuery selection.                                                                              // 4299
	 * @param  target element - the target input field or division or span                                                // 4300
	 * @param  date	Date - the new date                                                                                   // 4301
	 */                                                                                                                   // 4302
	_setDateDatepicker: function(target, date) {                                                                          // 4303
		var inst = this._getInst(target);                                                                                    // 4304
		if (inst) {                                                                                                          // 4305
			this._setDate(inst, date);                                                                                          // 4306
			this._updateDatepicker(inst);                                                                                       // 4307
			this._updateAlternate(inst);                                                                                        // 4308
		}                                                                                                                    // 4309
	},                                                                                                                    // 4310
                                                                                                                       // 4311
	/* Get the date(s) for the first entry in a jQuery selection.                                                         // 4312
	 * @param  target element - the target input field or division or span                                                // 4313
	 * @param  noDefault boolean - true if no default date is to be used                                                  // 4314
	 * @return Date - the current date                                                                                    // 4315
	 */                                                                                                                   // 4316
	_getDateDatepicker: function(target, noDefault) {                                                                     // 4317
		var inst = this._getInst(target);                                                                                    // 4318
		if (inst && !inst.inline) {                                                                                          // 4319
			this._setDateFromField(inst, noDefault);                                                                            // 4320
		}                                                                                                                    // 4321
		return (inst ? this._getDate(inst) : null);                                                                          // 4322
	},                                                                                                                    // 4323
                                                                                                                       // 4324
	/* Handle keystrokes. */                                                                                              // 4325
	_doKeyDown: function(event) {                                                                                         // 4326
		var onSelect, dateStr, sel,                                                                                          // 4327
			inst = $.datepicker._getInst(event.target),                                                                         // 4328
			handled = true,                                                                                                     // 4329
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");                                                                        // 4330
                                                                                                                       // 4331
		inst._keyEvent = true;                                                                                               // 4332
		if ($.datepicker._datepickerShowing) {                                                                               // 4333
			switch (event.keyCode) {                                                                                            // 4334
				case 9: $.datepicker._hideDatepicker();                                                                            // 4335
						handled = false;                                                                                                 // 4336
						break; // hide on tab out                                                                                        // 4337
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +                                                   // 4338
									$.datepicker._currentClass + ")", inst.dpDiv);                                                                // 4339
						if (sel[0]) {                                                                                                    // 4340
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);                           // 4341
						}                                                                                                                // 4342
                                                                                                                       // 4343
						onSelect = $.datepicker._get(inst, "onSelect");                                                                  // 4344
						if (onSelect) {                                                                                                  // 4345
							dateStr = $.datepicker._formatDate(inst);                                                                       // 4346
                                                                                                                       // 4347
							// trigger custom callback                                                                                      // 4348
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);                                           // 4349
						} else {                                                                                                         // 4350
							$.datepicker._hideDatepicker();                                                                                 // 4351
						}                                                                                                                // 4352
                                                                                                                       // 4353
						return false; // don't submit the form                                                                           // 4354
				case 27: $.datepicker._hideDatepicker();                                                                           // 4355
						break; // hide on escape                                                                                         // 4356
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                   // 4357
							-$.datepicker._get(inst, "stepBigMonths") :                                                                     // 4358
							-$.datepicker._get(inst, "stepMonths")), "M");                                                                  // 4359
						break; // previous month/year on page up/+ ctrl                                                                  // 4360
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                   // 4361
							+$.datepicker._get(inst, "stepBigMonths") :                                                                     // 4362
							+$.datepicker._get(inst, "stepMonths")), "M");                                                                  // 4363
						break; // next month/year on page down/+ ctrl                                                                    // 4364
				case 35: if (event.ctrlKey || event.metaKey) {                                                                     // 4365
							$.datepicker._clearDate(event.target);                                                                          // 4366
						}                                                                                                                // 4367
						handled = event.ctrlKey || event.metaKey;                                                                        // 4368
						break; // clear on ctrl or command +end                                                                          // 4369
				case 36: if (event.ctrlKey || event.metaKey) {                                                                     // 4370
							$.datepicker._gotoToday(event.target);                                                                          // 4371
						}                                                                                                                // 4372
						handled = event.ctrlKey || event.metaKey;                                                                        // 4373
						break; // current on ctrl or command +home                                                                       // 4374
				case 37: if (event.ctrlKey || event.metaKey) {                                                                     // 4375
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");                                                 // 4376
						}                                                                                                                // 4377
						handled = event.ctrlKey || event.metaKey;                                                                        // 4378
						// -1 day on ctrl or command +left                                                                               // 4379
						if (event.originalEvent.altKey) {                                                                                // 4380
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                         // 4381
								-$.datepicker._get(inst, "stepBigMonths") :                                                                    // 4382
								-$.datepicker._get(inst, "stepMonths")), "M");                                                                 // 4383
						}                                                                                                                // 4384
						// next month/year on alt +left on Mac                                                                           // 4385
						break;                                                                                                           // 4386
				case 38: if (event.ctrlKey || event.metaKey) {                                                                     // 4387
							$.datepicker._adjustDate(event.target, -7, "D");                                                                // 4388
						}                                                                                                                // 4389
						handled = event.ctrlKey || event.metaKey;                                                                        // 4390
						break; // -1 week on ctrl or command +up                                                                         // 4391
				case 39: if (event.ctrlKey || event.metaKey) {                                                                     // 4392
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");                                                 // 4393
						}                                                                                                                // 4394
						handled = event.ctrlKey || event.metaKey;                                                                        // 4395
						// +1 day on ctrl or command +right                                                                              // 4396
						if (event.originalEvent.altKey) {                                                                                // 4397
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                         // 4398
								+$.datepicker._get(inst, "stepBigMonths") :                                                                    // 4399
								+$.datepicker._get(inst, "stepMonths")), "M");                                                                 // 4400
						}                                                                                                                // 4401
						// next month/year on alt +right                                                                                 // 4402
						break;                                                                                                           // 4403
				case 40: if (event.ctrlKey || event.metaKey) {                                                                     // 4404
							$.datepicker._adjustDate(event.target, +7, "D");                                                                // 4405
						}                                                                                                                // 4406
						handled = event.ctrlKey || event.metaKey;                                                                        // 4407
						break; // +1 week on ctrl or command +down                                                                       // 4408
				default: handled = false;                                                                                          // 4409
			}                                                                                                                   // 4410
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home                          // 4411
			$.datepicker._showDatepicker(this);                                                                                 // 4412
		} else {                                                                                                             // 4413
			handled = false;                                                                                                    // 4414
		}                                                                                                                    // 4415
                                                                                                                       // 4416
		if (handled) {                                                                                                       // 4417
			event.preventDefault();                                                                                             // 4418
			event.stopPropagation();                                                                                            // 4419
		}                                                                                                                    // 4420
	},                                                                                                                    // 4421
                                                                                                                       // 4422
	/* Filter entered characters - based on date format. */                                                               // 4423
	_doKeyPress: function(event) {                                                                                        // 4424
		var chars, chr,                                                                                                      // 4425
			inst = $.datepicker._getInst(event.target);                                                                         // 4426
                                                                                                                       // 4427
		if ($.datepicker._get(inst, "constrainInput")) {                                                                     // 4428
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));                                         // 4429
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);                                 // 4430
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);                          // 4431
		}                                                                                                                    // 4432
	},                                                                                                                    // 4433
                                                                                                                       // 4434
	/* Synchronise manual entry and field/alternate field. */                                                             // 4435
	_doKeyUp: function(event) {                                                                                           // 4436
		var date,                                                                                                            // 4437
			inst = $.datepicker._getInst(event.target);                                                                         // 4438
                                                                                                                       // 4439
		if (inst.input.val() !== inst.lastVal) {                                                                             // 4440
			try {                                                                                                               // 4441
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),                                               // 4442
					(inst.input ? inst.input.val() : null),                                                                           // 4443
					$.datepicker._getFormatConfig(inst));                                                                             // 4444
                                                                                                                       // 4445
				if (date) { // only if valid                                                                                       // 4446
					$.datepicker._setDateFromField(inst);                                                                             // 4447
					$.datepicker._updateAlternate(inst);                                                                              // 4448
					$.datepicker._updateDatepicker(inst);                                                                             // 4449
				}                                                                                                                  // 4450
			}                                                                                                                   // 4451
			catch (err) {                                                                                                       // 4452
			}                                                                                                                   // 4453
		}                                                                                                                    // 4454
		return true;                                                                                                         // 4455
	},                                                                                                                    // 4456
                                                                                                                       // 4457
	/* Pop-up the date picker for a given input field.                                                                    // 4458
	 * If false returned from beforeShow event handler do not show.                                                       // 4459
	 * @param  input  element - the input field attached to the date picker or                                            // 4460
	 *					event - if triggered by focus                                                                                  // 4461
	 */                                                                                                                   // 4462
	_showDatepicker: function(input) {                                                                                    // 4463
		input = input.target || input;                                                                                       // 4464
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger                                    // 4465
			input = $("input", input.parentNode)[0];                                                                            // 4466
		}                                                                                                                    // 4467
                                                                                                                       // 4468
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here                // 4469
			return;                                                                                                             // 4470
		}                                                                                                                    // 4471
                                                                                                                       // 4472
		var inst, beforeShow, beforeShowSettings, isFixed,                                                                   // 4473
			offset, showAnim, duration;                                                                                         // 4474
                                                                                                                       // 4475
		inst = $.datepicker._getInst(input);                                                                                 // 4476
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {                                                       // 4477
			$.datepicker._curInst.dpDiv.stop(true, true);                                                                       // 4478
			if ( inst && $.datepicker._datepickerShowing ) {                                                                    // 4479
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );                                                    // 4480
			}                                                                                                                   // 4481
		}                                                                                                                    // 4482
                                                                                                                       // 4483
		beforeShow = $.datepicker._get(inst, "beforeShow");                                                                  // 4484
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};                                       // 4485
		if(beforeShowSettings === false){                                                                                    // 4486
			return;                                                                                                             // 4487
		}                                                                                                                    // 4488
		datepicker_extendRemove(inst.settings, beforeShowSettings);                                                          // 4489
                                                                                                                       // 4490
		inst.lastVal = null;                                                                                                 // 4491
		$.datepicker._lastInput = input;                                                                                     // 4492
		$.datepicker._setDateFromField(inst);                                                                                // 4493
                                                                                                                       // 4494
		if ($.datepicker._inDialog) { // hide cursor                                                                         // 4495
			input.value = "";                                                                                                   // 4496
		}                                                                                                                    // 4497
		if (!$.datepicker._pos) { // position below input                                                                    // 4498
			$.datepicker._pos = $.datepicker._findPos(input);                                                                   // 4499
			$.datepicker._pos[1] += input.offsetHeight; // add the height                                                       // 4500
		}                                                                                                                    // 4501
                                                                                                                       // 4502
		isFixed = false;                                                                                                     // 4503
		$(input).parents().each(function() {                                                                                 // 4504
			isFixed |= $(this).css("position") === "fixed";                                                                     // 4505
			return !isFixed;                                                                                                    // 4506
		});                                                                                                                  // 4507
                                                                                                                       // 4508
		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};                                                    // 4509
		$.datepicker._pos = null;                                                                                            // 4510
		//to avoid flashes on Firefox                                                                                        // 4511
		inst.dpDiv.empty();                                                                                                  // 4512
		// determine sizing offscreen                                                                                        // 4513
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});                                            // 4514
		$.datepicker._updateDatepicker(inst);                                                                                // 4515
		// fix width for dynamic number of date pickers                                                                      // 4516
		// and adjust position before showing                                                                                // 4517
		offset = $.datepicker._checkOffset(inst, offset, isFixed);                                                           // 4518
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?                                                     // 4519
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",                                                      // 4520
			left: offset.left + "px", top: offset.top + "px"});                                                                 // 4521
                                                                                                                       // 4522
		if (!inst.inline) {                                                                                                  // 4523
			showAnim = $.datepicker._get(inst, "showAnim");                                                                     // 4524
			duration = $.datepicker._get(inst, "duration");                                                                     // 4525
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );                                                // 4526
			$.datepicker._datepickerShowing = true;                                                                             // 4527
                                                                                                                       // 4528
			if ( $.effects && $.effects.effect[ showAnim ] ) {                                                                  // 4529
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);                                       // 4530
			} else {                                                                                                            // 4531
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);                                                        // 4532
			}                                                                                                                   // 4533
                                                                                                                       // 4534
			if ( $.datepicker._shouldFocusInput( inst ) ) {                                                                     // 4535
				inst.input.focus();                                                                                                // 4536
			}                                                                                                                   // 4537
                                                                                                                       // 4538
			$.datepicker._curInst = inst;                                                                                       // 4539
		}                                                                                                                    // 4540
	},                                                                                                                    // 4541
                                                                                                                       // 4542
	/* Generate the date picker content. */                                                                               // 4543
	_updateDatepicker: function(inst) {                                                                                   // 4544
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)                                         // 4545
		datepicker_instActive = inst; // for delegate hover events                                                           // 4546
		inst.dpDiv.empty().append(this._generateHTML(inst));                                                                 // 4547
		this._attachHandlers(inst);                                                                                          // 4548
                                                                                                                       // 4549
		var origyearshtml,                                                                                                   // 4550
			numMonths = this._getNumberOfMonths(inst),                                                                          // 4551
			cols = numMonths[1],                                                                                                // 4552
			width = 17,                                                                                                         // 4553
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );                                                    // 4554
                                                                                                                       // 4555
		if ( activeCell.length > 0 ) {                                                                                       // 4556
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );                                                            // 4557
		}                                                                                                                    // 4558
                                                                                                                       // 4559
		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");               // 4560
		if (cols > 1) {                                                                                                      // 4561
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");                             // 4562
		}                                                                                                                    // 4563
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +                                           // 4564
			"Class"]("ui-datepicker-multi");                                                                                    // 4565
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +                                                           // 4566
			"Class"]("ui-datepicker-rtl");                                                                                      // 4567
                                                                                                                       // 4568
		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {  // 4569
			inst.input.focus();                                                                                                 // 4570
		}                                                                                                                    // 4571
                                                                                                                       // 4572
		// deffered render of the years select (to avoid flashes on Firefox)                                                 // 4573
		if( inst.yearshtml ){                                                                                                // 4574
			origyearshtml = inst.yearshtml;                                                                                     // 4575
			setTimeout(function(){                                                                                              // 4576
				//assure that inst.yearshtml didn't change.                                                                        // 4577
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){                                                          // 4578
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);                                   // 4579
				}                                                                                                                  // 4580
				origyearshtml = inst.yearshtml = null;                                                                             // 4581
			}, 0);                                                                                                              // 4582
		}                                                                                                                    // 4583
	},                                                                                                                    // 4584
                                                                                                                       // 4585
	// #6694 - don't focus the input if it's already focused                                                              // 4586
	// this breaks the change event in IE                                                                                 // 4587
	// Support: IE and jQuery <1.9                                                                                        // 4588
	_shouldFocusInput: function( inst ) {                                                                                 // 4589
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );     // 4590
	},                                                                                                                    // 4591
                                                                                                                       // 4592
	/* Check positioning to remain on screen. */                                                                          // 4593
	_checkOffset: function(inst, offset, isFixed) {                                                                       // 4594
		var dpWidth = inst.dpDiv.outerWidth(),                                                                               // 4595
			dpHeight = inst.dpDiv.outerHeight(),                                                                                // 4596
			inputWidth = inst.input ? inst.input.outerWidth() : 0,                                                              // 4597
			inputHeight = inst.input ? inst.input.outerHeight() : 0,                                                            // 4598
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),                        // 4599
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());                       // 4600
                                                                                                                       // 4601
		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);                                              // 4602
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;                 // 4603
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;     // 4604
                                                                                                                       // 4605
		// now check if datepicker is showing outside window viewport - move to a better place if so.                        // 4606
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?                    // 4607
			Math.abs(offset.left + dpWidth - viewWidth) : 0);                                                                   // 4608
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?                   // 4609
			Math.abs(dpHeight + inputHeight) : 0);                                                                              // 4610
                                                                                                                       // 4611
		return offset;                                                                                                       // 4612
	},                                                                                                                    // 4613
                                                                                                                       // 4614
	/* Find an object's position on the screen. */                                                                        // 4615
	_findPos: function(obj) {                                                                                             // 4616
		var position,                                                                                                        // 4617
			inst = this._getInst(obj),                                                                                          // 4618
			isRTL = this._get(inst, "isRTL");                                                                                   // 4619
                                                                                                                       // 4620
		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {                         // 4621
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];                                                               // 4622
		}                                                                                                                    // 4623
                                                                                                                       // 4624
		position = $(obj).offset();                                                                                          // 4625
		return [position.left, position.top];                                                                                // 4626
	},                                                                                                                    // 4627
                                                                                                                       // 4628
	/* Hide the date picker from view.                                                                                    // 4629
	 * @param  input  element - the input field attached to the date picker                                               // 4630
	 */                                                                                                                   // 4631
	_hideDatepicker: function(input) {                                                                                    // 4632
		var showAnim, duration, postProcess, onClose,                                                                        // 4633
			inst = this._curInst;                                                                                               // 4634
                                                                                                                       // 4635
		if (!inst || (input && inst !== $.data(input, "datepicker"))) {                                                      // 4636
			return;                                                                                                             // 4637
		}                                                                                                                    // 4638
                                                                                                                       // 4639
		if (this._datepickerShowing) {                                                                                       // 4640
			showAnim = this._get(inst, "showAnim");                                                                             // 4641
			duration = this._get(inst, "duration");                                                                             // 4642
			postProcess = function() {                                                                                          // 4643
				$.datepicker._tidyDialog(inst);                                                                                    // 4644
			};                                                                                                                  // 4645
                                                                                                                       // 4646
			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed                                               // 4647
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {                                     // 4648
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);                          // 4649
			} else {                                                                                                            // 4650
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :                                                                 // 4651
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);                        // 4652
			}                                                                                                                   // 4653
                                                                                                                       // 4654
			if (!showAnim) {                                                                                                    // 4655
				postProcess();                                                                                                     // 4656
			}                                                                                                                   // 4657
			this._datepickerShowing = false;                                                                                    // 4658
                                                                                                                       // 4659
			onClose = this._get(inst, "onClose");                                                                               // 4660
			if (onClose) {                                                                                                      // 4661
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);                  // 4662
			}                                                                                                                   // 4663
                                                                                                                       // 4664
			this._lastInput = null;                                                                                             // 4665
			if (this._inDialog) {                                                                                               // 4666
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });                                         // 4667
				if ($.blockUI) {                                                                                                   // 4668
					$.unblockUI();                                                                                                    // 4669
					$("body").append(this.dpDiv);                                                                                     // 4670
				}                                                                                                                  // 4671
			}                                                                                                                   // 4672
			this._inDialog = false;                                                                                             // 4673
		}                                                                                                                    // 4674
	},                                                                                                                    // 4675
                                                                                                                       // 4676
	/* Tidy up after a dialog display. */                                                                                 // 4677
	_tidyDialog: function(inst) {                                                                                         // 4678
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");                                         // 4679
	},                                                                                                                    // 4680
                                                                                                                       // 4681
	/* Close date picker if clicked elsewhere. */                                                                         // 4682
	_checkExternalClick: function(event) {                                                                                // 4683
		if (!$.datepicker._curInst) {                                                                                        // 4684
			return;                                                                                                             // 4685
		}                                                                                                                    // 4686
                                                                                                                       // 4687
		var $target = $(event.target),                                                                                       // 4688
			inst = $.datepicker._getInst($target[0]);                                                                           // 4689
                                                                                                                       // 4690
		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&                                                                // 4691
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&                                                     // 4692
				!$target.hasClass($.datepicker.markerClassName) &&                                                                 // 4693
				!$target.closest("." + $.datepicker._triggerClass).length &&                                                       // 4694
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||                                   // 4695
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {                            // 4696
				$.datepicker._hideDatepicker();                                                                                    // 4697
		}                                                                                                                    // 4698
	},                                                                                                                    // 4699
                                                                                                                       // 4700
	/* Adjust one of the date sub-fields. */                                                                              // 4701
	_adjustDate: function(id, offset, period) {                                                                           // 4702
		var target = $(id),                                                                                                  // 4703
			inst = this._getInst(target[0]);                                                                                    // 4704
                                                                                                                       // 4705
		if (this._isDisabledDatepicker(target[0])) {                                                                         // 4706
			return;                                                                                                             // 4707
		}                                                                                                                    // 4708
		this._adjustInstDate(inst, offset +                                                                                  // 4709
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning                                     // 4710
			period);                                                                                                            // 4711
		this._updateDatepicker(inst);                                                                                        // 4712
	},                                                                                                                    // 4713
                                                                                                                       // 4714
	/* Action for current link. */                                                                                        // 4715
	_gotoToday: function(id) {                                                                                            // 4716
		var date,                                                                                                            // 4717
			target = $(id),                                                                                                     // 4718
			inst = this._getInst(target[0]);                                                                                    // 4719
                                                                                                                       // 4720
		if (this._get(inst, "gotoCurrent") && inst.currentDay) {                                                             // 4721
			inst.selectedDay = inst.currentDay;                                                                                 // 4722
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;                                                            // 4723
			inst.drawYear = inst.selectedYear = inst.currentYear;                                                               // 4724
		} else {                                                                                                             // 4725
			date = new Date();                                                                                                  // 4726
			inst.selectedDay = date.getDate();                                                                                  // 4727
			inst.drawMonth = inst.selectedMonth = date.getMonth();                                                              // 4728
			inst.drawYear = inst.selectedYear = date.getFullYear();                                                             // 4729
		}                                                                                                                    // 4730
		this._notifyChange(inst);                                                                                            // 4731
		this._adjustDate(target);                                                                                            // 4732
	},                                                                                                                    // 4733
                                                                                                                       // 4734
	/* Action for selecting a new month/year. */                                                                          // 4735
	_selectMonthYear: function(id, select, period) {                                                                      // 4736
		var target = $(id),                                                                                                  // 4737
			inst = this._getInst(target[0]);                                                                                    // 4738
                                                                                                                       // 4739
		inst["selected" + (period === "M" ? "Month" : "Year")] =                                                             // 4740
		inst["draw" + (period === "M" ? "Month" : "Year")] =                                                                 // 4741
			parseInt(select.options[select.selectedIndex].value,10);                                                            // 4742
                                                                                                                       // 4743
		this._notifyChange(inst);                                                                                            // 4744
		this._adjustDate(target);                                                                                            // 4745
	},                                                                                                                    // 4746
                                                                                                                       // 4747
	/* Action for selecting a day. */                                                                                     // 4748
	_selectDay: function(id, month, year, td) {                                                                           // 4749
		var inst,                                                                                                            // 4750
			target = $(id);                                                                                                     // 4751
                                                                                                                       // 4752
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {                              // 4753
			return;                                                                                                             // 4754
		}                                                                                                                    // 4755
                                                                                                                       // 4756
		inst = this._getInst(target[0]);                                                                                     // 4757
		inst.selectedDay = inst.currentDay = $("a", td).html();                                                              // 4758
		inst.selectedMonth = inst.currentMonth = month;                                                                      // 4759
		inst.selectedYear = inst.currentYear = year;                                                                         // 4760
		this._selectDate(id, this._formatDate(inst,                                                                          // 4761
			inst.currentDay, inst.currentMonth, inst.currentYear));                                                             // 4762
	},                                                                                                                    // 4763
                                                                                                                       // 4764
	/* Erase the input field and hide the date picker. */                                                                 // 4765
	_clearDate: function(id) {                                                                                            // 4766
		var target = $(id);                                                                                                  // 4767
		this._selectDate(target, "");                                                                                        // 4768
	},                                                                                                                    // 4769
                                                                                                                       // 4770
	/* Update the input field with the selected date. */                                                                  // 4771
	_selectDate: function(id, dateStr) {                                                                                  // 4772
		var onSelect,                                                                                                        // 4773
			target = $(id),                                                                                                     // 4774
			inst = this._getInst(target[0]);                                                                                    // 4775
                                                                                                                       // 4776
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));                                                      // 4777
		if (inst.input) {                                                                                                    // 4778
			inst.input.val(dateStr);                                                                                            // 4779
		}                                                                                                                    // 4780
		this._updateAlternate(inst);                                                                                         // 4781
                                                                                                                       // 4782
		onSelect = this._get(inst, "onSelect");                                                                              // 4783
		if (onSelect) {                                                                                                      // 4784
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback                   // 4785
		} else if (inst.input) {                                                                                             // 4786
			inst.input.trigger("change"); // fire the change event                                                              // 4787
		}                                                                                                                    // 4788
                                                                                                                       // 4789
		if (inst.inline){                                                                                                    // 4790
			this._updateDatepicker(inst);                                                                                       // 4791
		} else {                                                                                                             // 4792
			this._hideDatepicker();                                                                                             // 4793
			this._lastInput = inst.input[0];                                                                                    // 4794
			if (typeof(inst.input[0]) !== "object") {                                                                           // 4795
				inst.input.focus(); // restore focus                                                                               // 4796
			}                                                                                                                   // 4797
			this._lastInput = null;                                                                                             // 4798
		}                                                                                                                    // 4799
	},                                                                                                                    // 4800
                                                                                                                       // 4801
	/* Update any alternate field to synchronise with the main field. */                                                  // 4802
	_updateAlternate: function(inst) {                                                                                    // 4803
		var altFormat, date, dateStr,                                                                                        // 4804
			altField = this._get(inst, "altField");                                                                             // 4805
                                                                                                                       // 4806
		if (altField) { // update alternate field too                                                                        // 4807
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");                                          // 4808
			date = this._getDate(inst);                                                                                         // 4809
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));                                            // 4810
			$(altField).each(function() { $(this).val(dateStr); });                                                             // 4811
		}                                                                                                                    // 4812
	},                                                                                                                    // 4813
                                                                                                                       // 4814
	/* Set as beforeShowDay function to prevent selection of weekends.                                                    // 4815
	 * @param  date  Date - the date to customise                                                                         // 4816
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?                                       // 4817
	 */                                                                                                                   // 4818
	noWeekends: function(date) {                                                                                          // 4819
		var day = date.getDay();                                                                                             // 4820
		return [(day > 0 && day < 6), ""];                                                                                   // 4821
	},                                                                                                                    // 4822
                                                                                                                       // 4823
	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.                           // 4824
	 * @param  date  Date - the date to get the week for                                                                  // 4825
	 * @return  number - the number of the week within the year that contains this date                                   // 4826
	 */                                                                                                                   // 4827
	iso8601Week: function(date) {                                                                                         // 4828
		var time,                                                                                                            // 4829
			checkDate = new Date(date.getTime());                                                                               // 4830
                                                                                                                       // 4831
		// Find Thursday of this week starting on Monday                                                                     // 4832
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));                                              // 4833
                                                                                                                       // 4834
		time = checkDate.getTime();                                                                                          // 4835
		checkDate.setMonth(0); // Compare with Jan 1                                                                         // 4836
		checkDate.setDate(1);                                                                                                // 4837
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;                                                // 4838
	},                                                                                                                    // 4839
                                                                                                                       // 4840
	/* Parse a string value into a date object.                                                                           // 4841
	 * See formatDate below for the possible formats.                                                                     // 4842
	 *                                                                                                                    // 4843
	 * @param  format string - the expected format of the date                                                            // 4844
	 * @param  value string - the date in the above format                                                                // 4845
	 * @param  settings Object - attributes include:                                                                      // 4846
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)                               // 4847
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)                                 // 4848
	 *					dayNames		string[7] - names of the days from Sunday (optional)                                                 // 4849
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)                                        // 4850
	 *					monthNames		string[12] - names of the months (optional)                                                        // 4851
	 * @return  Date - the extracted date value or null if value is blank                                                 // 4852
	 */                                                                                                                   // 4853
	parseDate: function (format, value, settings) {                                                                       // 4854
		if (format == null || value == null) {                                                                               // 4855
			throw "Invalid arguments";                                                                                          // 4856
		}                                                                                                                    // 4857
                                                                                                                       // 4858
		value = (typeof value === "object" ? value.toString() : value + "");                                                 // 4859
		if (value === "") {                                                                                                  // 4860
			return null;                                                                                                        // 4861
		}                                                                                                                    // 4862
                                                                                                                       // 4863
		var iFormat, dim, extra,                                                                                             // 4864
			iValue = 0,                                                                                                         // 4865
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,               // 4866
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :                                  // 4867
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),                                               // 4868
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,                         // 4869
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,                                        // 4870
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,                   // 4871
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,                                  // 4872
			year = -1,                                                                                                          // 4873
			month = -1,                                                                                                         // 4874
			day = -1,                                                                                                           // 4875
			doy = -1,                                                                                                           // 4876
			literal = false,                                                                                                    // 4877
			date,                                                                                                               // 4878
			// Check whether a format character is doubled                                                                      // 4879
			lookAhead = function(match) {                                                                                       // 4880
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);                               // 4881
				if (matches) {                                                                                                     // 4882
					iFormat++;                                                                                                        // 4883
				}                                                                                                                  // 4884
				return matches;                                                                                                    // 4885
			},                                                                                                                  // 4886
			// Extract a number from the string value                                                                           // 4887
			getNumber = function(match) {                                                                                       // 4888
				var isDoubled = lookAhead(match),                                                                                  // 4889
					size = (match === "@" ? 14 : (match === "!" ? 20 :                                                                // 4890
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),                                                     // 4891
					minSize = (match === "y" ? size : 1),                                                                             // 4892
					digits = new RegExp("^\\d{" + minSize + "," + size + "}"),                                                        // 4893
					num = value.substring(iValue).match(digits);                                                                      // 4894
				if (!num) {                                                                                                        // 4895
					throw "Missing number at position " + iValue;                                                                     // 4896
				}                                                                                                                  // 4897
				iValue += num[0].length;                                                                                           // 4898
				return parseInt(num[0], 10);                                                                                       // 4899
			},                                                                                                                  // 4900
			// Extract a name from the string value and convert to an index                                                     // 4901
			getName = function(match, shortNames, longNames) {                                                                  // 4902
				var index = -1,                                                                                                    // 4903
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {                                        // 4904
						return [ [k, v] ];                                                                                               // 4905
					}).sort(function (a, b) {                                                                                         // 4906
						return -(a[1].length - b[1].length);                                                                             // 4907
					});                                                                                                               // 4908
                                                                                                                       // 4909
				$.each(names, function (i, pair) {                                                                                 // 4910
					var name = pair[1];                                                                                               // 4911
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {                                     // 4912
						index = pair[0];                                                                                                 // 4913
						iValue += name.length;                                                                                           // 4914
						return false;                                                                                                    // 4915
					}                                                                                                                 // 4916
				});                                                                                                                // 4917
				if (index !== -1) {                                                                                                // 4918
					return index + 1;                                                                                                 // 4919
				} else {                                                                                                           // 4920
					throw "Unknown name at position " + iValue;                                                                       // 4921
				}                                                                                                                  // 4922
			},                                                                                                                  // 4923
			// Confirm that a literal character matches the string value                                                        // 4924
			checkLiteral = function() {                                                                                         // 4925
				if (value.charAt(iValue) !== format.charAt(iFormat)) {                                                             // 4926
					throw "Unexpected literal at position " + iValue;                                                                 // 4927
				}                                                                                                                  // 4928
				iValue++;                                                                                                          // 4929
			};                                                                                                                  // 4930
                                                                                                                       // 4931
		for (iFormat = 0; iFormat < format.length; iFormat++) {                                                              // 4932
			if (literal) {                                                                                                      // 4933
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {                                                           // 4934
					literal = false;                                                                                                  // 4935
				} else {                                                                                                           // 4936
					checkLiteral();                                                                                                   // 4937
				}                                                                                                                  // 4938
			} else {                                                                                                            // 4939
				switch (format.charAt(iFormat)) {                                                                                  // 4940
					case "d":                                                                                                         // 4941
						day = getNumber("d");                                                                                            // 4942
						break;                                                                                                           // 4943
					case "D":                                                                                                         // 4944
						getName("D", dayNamesShort, dayNames);                                                                           // 4945
						break;                                                                                                           // 4946
					case "o":                                                                                                         // 4947
						doy = getNumber("o");                                                                                            // 4948
						break;                                                                                                           // 4949
					case "m":                                                                                                         // 4950
						month = getNumber("m");                                                                                          // 4951
						break;                                                                                                           // 4952
					case "M":                                                                                                         // 4953
						month = getName("M", monthNamesShort, monthNames);                                                               // 4954
						break;                                                                                                           // 4955
					case "y":                                                                                                         // 4956
						year = getNumber("y");                                                                                           // 4957
						break;                                                                                                           // 4958
					case "@":                                                                                                         // 4959
						date = new Date(getNumber("@"));                                                                                 // 4960
						year = date.getFullYear();                                                                                       // 4961
						month = date.getMonth() + 1;                                                                                     // 4962
						day = date.getDate();                                                                                            // 4963
						break;                                                                                                           // 4964
					case "!":                                                                                                         // 4965
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);                                                   // 4966
						year = date.getFullYear();                                                                                       // 4967
						month = date.getMonth() + 1;                                                                                     // 4968
						day = date.getDate();                                                                                            // 4969
						break;                                                                                                           // 4970
					case "'":                                                                                                         // 4971
						if (lookAhead("'")){                                                                                             // 4972
							checkLiteral();                                                                                                 // 4973
						} else {                                                                                                         // 4974
							literal = true;                                                                                                 // 4975
						}                                                                                                                // 4976
						break;                                                                                                           // 4977
					default:                                                                                                          // 4978
						checkLiteral();                                                                                                  // 4979
				}                                                                                                                  // 4980
			}                                                                                                                   // 4981
		}                                                                                                                    // 4982
                                                                                                                       // 4983
		if (iValue < value.length){                                                                                          // 4984
			extra = value.substr(iValue);                                                                                       // 4985
			if (!/^\s+/.test(extra)) {                                                                                          // 4986
				throw "Extra/unparsed characters found in date: " + extra;                                                         // 4987
			}                                                                                                                   // 4988
		}                                                                                                                    // 4989
                                                                                                                       // 4990
		if (year === -1) {                                                                                                   // 4991
			year = new Date().getFullYear();                                                                                    // 4992
		} else if (year < 100) {                                                                                             // 4993
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +                                                 // 4994
				(year <= shortYearCutoff ? 0 : -100);                                                                              // 4995
		}                                                                                                                    // 4996
                                                                                                                       // 4997
		if (doy > -1) {                                                                                                      // 4998
			month = 1;                                                                                                          // 4999
			day = doy;                                                                                                          // 5000
			do {                                                                                                                // 5001
				dim = this._getDaysInMonth(year, month - 1);                                                                       // 5002
				if (day <= dim) {                                                                                                  // 5003
					break;                                                                                                            // 5004
				}                                                                                                                  // 5005
				month++;                                                                                                           // 5006
				day -= dim;                                                                                                        // 5007
			} while (true);                                                                                                     // 5008
		}                                                                                                                    // 5009
                                                                                                                       // 5010
		date = this._daylightSavingAdjust(new Date(year, month - 1, day));                                                   // 5011
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {                        // 5012
			throw "Invalid date"; // E.g. 31/02/00                                                                              // 5013
		}                                                                                                                    // 5014
		return date;                                                                                                         // 5015
	},                                                                                                                    // 5016
                                                                                                                       // 5017
	/* Standard date formats. */                                                                                          // 5018
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)                                                                              // 5019
	COOKIE: "D, dd M yy",                                                                                                 // 5020
	ISO_8601: "yy-mm-dd",                                                                                                 // 5021
	RFC_822: "D, d M y",                                                                                                  // 5022
	RFC_850: "DD, dd-M-y",                                                                                                // 5023
	RFC_1036: "D, d M y",                                                                                                 // 5024
	RFC_1123: "D, d M yy",                                                                                                // 5025
	RFC_2822: "D, d M yy",                                                                                                // 5026
	RSS: "D, d M y", // RFC 822                                                                                           // 5027
	TICKS: "!",                                                                                                           // 5028
	TIMESTAMP: "@",                                                                                                       // 5029
	W3C: "yy-mm-dd", // ISO 8601                                                                                          // 5030
                                                                                                                       // 5031
	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +                                    // 5032
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),                                                                  // 5033
                                                                                                                       // 5034
	/* Format a date object into a string value.                                                                          // 5035
	 * The format can be combinations of the following:                                                                   // 5036
	 * d  - day of month (no leading zero)                                                                                // 5037
	 * dd - day of month (two digit)                                                                                      // 5038
	 * o  - day of year (no leading zeros)                                                                                // 5039
	 * oo - day of year (three digit)                                                                                     // 5040
	 * D  - day name short                                                                                                // 5041
	 * DD - day name long                                                                                                 // 5042
	 * m  - month of year (no leading zero)                                                                               // 5043
	 * mm - month of year (two digit)                                                                                     // 5044
	 * M  - month name short                                                                                              // 5045
	 * MM - month name long                                                                                               // 5046
	 * y  - year (two digit)                                                                                              // 5047
	 * yy - year (four digit)                                                                                             // 5048
	 * @ - Unix timestamp (ms since 01/01/1970)                                                                           // 5049
	 * ! - Windows ticks (100ns since 01/01/0001)                                                                         // 5050
	 * "..." - literal text                                                                                               // 5051
	 * '' - single quote                                                                                                  // 5052
	 *                                                                                                                    // 5053
	 * @param  format string - the desired format of the date                                                             // 5054
	 * @param  date Date - the date value to format                                                                       // 5055
	 * @param  settings Object - attributes include:                                                                      // 5056
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)                                 // 5057
	 *					dayNames		string[7] - names of the days from Sunday (optional)                                                 // 5058
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)                                        // 5059
	 *					monthNames		string[12] - names of the months (optional)                                                        // 5060
	 * @return  string - the date in the above format                                                                     // 5061
	 */                                                                                                                   // 5062
	formatDate: function (format, date, settings) {                                                                       // 5063
		if (!date) {                                                                                                         // 5064
			return "";                                                                                                          // 5065
		}                                                                                                                    // 5066
                                                                                                                       // 5067
		var iFormat,                                                                                                         // 5068
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,                         // 5069
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,                                        // 5070
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,                   // 5071
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,                                  // 5072
			// Check whether a format character is doubled                                                                      // 5073
			lookAhead = function(match) {                                                                                       // 5074
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);                               // 5075
				if (matches) {                                                                                                     // 5076
					iFormat++;                                                                                                        // 5077
				}                                                                                                                  // 5078
				return matches;                                                                                                    // 5079
			},                                                                                                                  // 5080
			// Format a number, with leading zero if necessary                                                                  // 5081
			formatNumber = function(match, value, len) {                                                                        // 5082
				var num = "" + value;                                                                                              // 5083
				if (lookAhead(match)) {                                                                                            // 5084
					while (num.length < len) {                                                                                        // 5085
						num = "0" + num;                                                                                                 // 5086
					}                                                                                                                 // 5087
				}                                                                                                                  // 5088
				return num;                                                                                                        // 5089
			},                                                                                                                  // 5090
			// Format a name, short or long as requested                                                                        // 5091
			formatName = function(match, value, shortNames, longNames) {                                                        // 5092
				return (lookAhead(match) ? longNames[value] : shortNames[value]);                                                  // 5093
			},                                                                                                                  // 5094
			output = "",                                                                                                        // 5095
			literal = false;                                                                                                    // 5096
                                                                                                                       // 5097
		if (date) {                                                                                                          // 5098
			for (iFormat = 0; iFormat < format.length; iFormat++) {                                                             // 5099
				if (literal) {                                                                                                     // 5100
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {                                                          // 5101
						literal = false;                                                                                                 // 5102
					} else {                                                                                                          // 5103
						output += format.charAt(iFormat);                                                                                // 5104
					}                                                                                                                 // 5105
				} else {                                                                                                           // 5106
					switch (format.charAt(iFormat)) {                                                                                 // 5107
						case "d":                                                                                                        // 5108
							output += formatNumber("d", date.getDate(), 2);                                                                 // 5109
							break;                                                                                                          // 5110
						case "D":                                                                                                        // 5111
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);                                              // 5112
							break;                                                                                                          // 5113
						case "o":                                                                                                        // 5114
							output += formatNumber("o",                                                                                     // 5115
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;                                                                                                          // 5117
						case "m":                                                                                                        // 5118
							output += formatNumber("m", date.getMonth() + 1, 2);                                                            // 5119
							break;                                                                                                          // 5120
						case "M":                                                                                                        // 5121
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);                                        // 5122
							break;                                                                                                          // 5123
						case "y":                                                                                                        // 5124
							output += (lookAhead("y") ? date.getFullYear() :                                                                // 5125
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);                                                // 5126
							break;                                                                                                          // 5127
						case "@":                                                                                                        // 5128
							output += date.getTime();                                                                                       // 5129
							break;                                                                                                          // 5130
						case "!":                                                                                                        // 5131
							output += date.getTime() * 10000 + this._ticksTo1970;                                                           // 5132
							break;                                                                                                          // 5133
						case "'":                                                                                                        // 5134
							if (lookAhead("'")) {                                                                                           // 5135
								output += "'";                                                                                                 // 5136
							} else {                                                                                                        // 5137
								literal = true;                                                                                                // 5138
							}                                                                                                               // 5139
							break;                                                                                                          // 5140
						default:                                                                                                         // 5141
							output += format.charAt(iFormat);                                                                               // 5142
					}                                                                                                                 // 5143
				}                                                                                                                  // 5144
			}                                                                                                                   // 5145
		}                                                                                                                    // 5146
		return output;                                                                                                       // 5147
	},                                                                                                                    // 5148
                                                                                                                       // 5149
	/* Extract all possible characters from the date format. */                                                           // 5150
	_possibleChars: function (format) {                                                                                   // 5151
		var iFormat,                                                                                                         // 5152
			chars = "",                                                                                                         // 5153
			literal = false,                                                                                                    // 5154
			// Check whether a format character is doubled                                                                      // 5155
			lookAhead = function(match) {                                                                                       // 5156
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);                               // 5157
				if (matches) {                                                                                                     // 5158
					iFormat++;                                                                                                        // 5159
				}                                                                                                                  // 5160
				return matches;                                                                                                    // 5161
			};                                                                                                                  // 5162
                                                                                                                       // 5163
		for (iFormat = 0; iFormat < format.length; iFormat++) {                                                              // 5164
			if (literal) {                                                                                                      // 5165
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {                                                           // 5166
					literal = false;                                                                                                  // 5167
				} else {                                                                                                           // 5168
					chars += format.charAt(iFormat);                                                                                  // 5169
				}                                                                                                                  // 5170
			} else {                                                                                                            // 5171
				switch (format.charAt(iFormat)) {                                                                                  // 5172
					case "d": case "m": case "y": case "@":                                                                           // 5173
						chars += "0123456789";                                                                                           // 5174
						break;                                                                                                           // 5175
					case "D": case "M":                                                                                               // 5176
						return null; // Accept anything                                                                                  // 5177
					case "'":                                                                                                         // 5178
						if (lookAhead("'")) {                                                                                            // 5179
							chars += "'";                                                                                                   // 5180
						} else {                                                                                                         // 5181
							literal = true;                                                                                                 // 5182
						}                                                                                                                // 5183
						break;                                                                                                           // 5184
					default:                                                                                                          // 5185
						chars += format.charAt(iFormat);                                                                                 // 5186
				}                                                                                                                  // 5187
			}                                                                                                                   // 5188
		}                                                                                                                    // 5189
		return chars;                                                                                                        // 5190
	},                                                                                                                    // 5191
                                                                                                                       // 5192
	/* Get a setting value, defaulting if necessary. */                                                                   // 5193
	_get: function(inst, name) {                                                                                          // 5194
		return inst.settings[name] !== undefined ?                                                                           // 5195
			inst.settings[name] : this._defaults[name];                                                                         // 5196
	},                                                                                                                    // 5197
                                                                                                                       // 5198
	/* Parse existing date and initialise date picker. */                                                                 // 5199
	_setDateFromField: function(inst, noDefault) {                                                                        // 5200
		if (inst.input.val() === inst.lastVal) {                                                                             // 5201
			return;                                                                                                             // 5202
		}                                                                                                                    // 5203
                                                                                                                       // 5204
		var dateFormat = this._get(inst, "dateFormat"),                                                                      // 5205
			dates = inst.lastVal = inst.input ? inst.input.val() : null,                                                        // 5206
			defaultDate = this._getDefaultDate(inst),                                                                           // 5207
			date = defaultDate,                                                                                                 // 5208
			settings = this._getFormatConfig(inst);                                                                             // 5209
                                                                                                                       // 5210
		try {                                                                                                                // 5211
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;                                                  // 5212
		} catch (event) {                                                                                                    // 5213
			dates = (noDefault ? "" : dates);                                                                                   // 5214
		}                                                                                                                    // 5215
		inst.selectedDay = date.getDate();                                                                                   // 5216
		inst.drawMonth = inst.selectedMonth = date.getMonth();                                                               // 5217
		inst.drawYear = inst.selectedYear = date.getFullYear();                                                              // 5218
		inst.currentDay = (dates ? date.getDate() : 0);                                                                      // 5219
		inst.currentMonth = (dates ? date.getMonth() : 0);                                                                   // 5220
		inst.currentYear = (dates ? date.getFullYear() : 0);                                                                 // 5221
		this._adjustInstDate(inst);                                                                                          // 5222
	},                                                                                                                    // 5223
                                                                                                                       // 5224
	/* Retrieve the default date shown on opening. */                                                                     // 5225
	_getDefaultDate: function(inst) {                                                                                     // 5226
		return this._restrictMinMax(inst,                                                                                    // 5227
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));                                             // 5228
	},                                                                                                                    // 5229
                                                                                                                       // 5230
	/* A date may be specified as an exact value or a relative one. */                                                    // 5231
	_determineDate: function(inst, date, defaultDate) {                                                                   // 5232
		var offsetNumeric = function(offset) {                                                                               // 5233
				var date = new Date();                                                                                             // 5234
				date.setDate(date.getDate() + offset);                                                                             // 5235
				return date;                                                                                                       // 5236
			},                                                                                                                  // 5237
			offsetString = function(offset) {                                                                                   // 5238
				try {                                                                                                              // 5239
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),                                              // 5240
						offset, $.datepicker._getFormatConfig(inst));                                                                    // 5241
				}                                                                                                                  // 5242
				catch (e) {                                                                                                        // 5243
					// Ignore                                                                                                         // 5244
				}                                                                                                                  // 5245
                                                                                                                       // 5246
				var date = (offset.toLowerCase().match(/^c/) ?                                                                     // 5247
					$.datepicker._getDate(inst) : null) || new Date(),                                                                // 5248
					year = date.getFullYear(),                                                                                        // 5249
					month = date.getMonth(),                                                                                          // 5250
					day = date.getDate(),                                                                                             // 5251
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,                                                                 // 5252
					matches = pattern.exec(offset);                                                                                   // 5253
                                                                                                                       // 5254
				while (matches) {                                                                                                  // 5255
					switch (matches[2] || "d") {                                                                                      // 5256
						case "d" : case "D" :                                                                                            // 5257
							day += parseInt(matches[1],10); break;                                                                          // 5258
						case "w" : case "W" :                                                                                            // 5259
							day += parseInt(matches[1],10) * 7; break;                                                                      // 5260
						case "m" : case "M" :                                                                                            // 5261
							month += parseInt(matches[1],10);                                                                               // 5262
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));                                                 // 5263
							break;                                                                                                          // 5264
						case "y": case "Y" :                                                                                             // 5265
							year += parseInt(matches[1],10);                                                                                // 5266
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));                                                 // 5267
							break;                                                                                                          // 5268
					}                                                                                                                 // 5269
					matches = pattern.exec(offset);                                                                                   // 5270
				}                                                                                                                  // 5271
				return new Date(year, month, day);                                                                                 // 5272
			},                                                                                                                  // 5273
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :             // 5274
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));       // 5275
                                                                                                                       // 5276
		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);                                // 5277
		if (newDate) {                                                                                                       // 5278
			newDate.setHours(0);                                                                                                // 5279
			newDate.setMinutes(0);                                                                                              // 5280
			newDate.setSeconds(0);                                                                                              // 5281
			newDate.setMilliseconds(0);                                                                                         // 5282
		}                                                                                                                    // 5283
		return this._daylightSavingAdjust(newDate);                                                                          // 5284
	},                                                                                                                    // 5285
                                                                                                                       // 5286
	/* Handle switch to/from daylight saving.                                                                             // 5287
	 * Hours may be non-zero on daylight saving cut-over:                                                                 // 5288
	 * > 12 when midnight changeover, but then cannot generate                                                            // 5289
	 * midnight datetime, so jump to 1AM, otherwise reset.                                                                // 5290
	 * @param  date  (Date) the date to check                                                                             // 5291
	 * @return  (Date) the corrected date                                                                                 // 5292
	 */                                                                                                                   // 5293
	_daylightSavingAdjust: function(date) {                                                                               // 5294
		if (!date) {                                                                                                         // 5295
			return null;                                                                                                        // 5296
		}                                                                                                                    // 5297
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);                                                       // 5298
		return date;                                                                                                         // 5299
	},                                                                                                                    // 5300
                                                                                                                       // 5301
	/* Set the date(s) directly. */                                                                                       // 5302
	_setDate: function(inst, date, noChange) {                                                                            // 5303
		var clear = !date,                                                                                                   // 5304
			origMonth = inst.selectedMonth,                                                                                     // 5305
			origYear = inst.selectedYear,                                                                                       // 5306
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));                                  // 5307
                                                                                                                       // 5308
		inst.selectedDay = inst.currentDay = newDate.getDate();                                                              // 5309
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();                                        // 5310
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();                                        // 5311
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {                             // 5312
			this._notifyChange(inst);                                                                                           // 5313
		}                                                                                                                    // 5314
		this._adjustInstDate(inst);                                                                                          // 5315
		if (inst.input) {                                                                                                    // 5316
			inst.input.val(clear ? "" : this._formatDate(inst));                                                                // 5317
		}                                                                                                                    // 5318
	},                                                                                                                    // 5319
                                                                                                                       // 5320
	/* Retrieve the date(s) directly. */                                                                                  // 5321
	_getDate: function(inst) {                                                                                            // 5322
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :                               // 5323
			this._daylightSavingAdjust(new Date(                                                                                // 5324
			inst.currentYear, inst.currentMonth, inst.currentDay)));                                                            // 5325
			return startDate;                                                                                                   // 5326
	},                                                                                                                    // 5327
                                                                                                                       // 5328
	/* Attach the onxxx handlers.  These are declared statically so                                                       // 5329
	 * they work with static code transformers like Caja.                                                                 // 5330
	 */                                                                                                                   // 5331
	_attachHandlers: function(inst) {                                                                                     // 5332
		var stepMonths = this._get(inst, "stepMonths"),                                                                      // 5333
			id = "#" + inst.id.replace( /\\\\/g, "\\" );                                                                        // 5334
		inst.dpDiv.find("[data-handler]").map(function () {                                                                  // 5335
			var handler = {                                                                                                     // 5336
				prev: function () {                                                                                                // 5337
					$.datepicker._adjustDate(id, -stepMonths, "M");                                                                   // 5338
				},                                                                                                                 // 5339
				next: function () {                                                                                                // 5340
					$.datepicker._adjustDate(id, +stepMonths, "M");                                                                   // 5341
				},                                                                                                                 // 5342
				hide: function () {                                                                                                // 5343
					$.datepicker._hideDatepicker();                                                                                   // 5344
				},                                                                                                                 // 5345
				today: function () {                                                                                               // 5346
					$.datepicker._gotoToday(id);                                                                                      // 5347
				},                                                                                                                 // 5348
				selectDay: function () {                                                                                           // 5349
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);             // 5350
					return false;                                                                                                     // 5351
				},                                                                                                                 // 5352
				selectMonth: function () {                                                                                         // 5353
					$.datepicker._selectMonthYear(id, this, "M");                                                                     // 5354
					return false;                                                                                                     // 5355
				},                                                                                                                 // 5356
				selectYear: function () {                                                                                          // 5357
					$.datepicker._selectMonthYear(id, this, "Y");                                                                     // 5358
					return false;                                                                                                     // 5359
				}                                                                                                                  // 5360
			};                                                                                                                  // 5361
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);                          // 5362
		});                                                                                                                  // 5363
	},                                                                                                                    // 5364
                                                                                                                       // 5365
	/* Generate the HTML for the current state of the date picker. */                                                     // 5366
	_generateHTML: function(inst) {                                                                                       // 5367
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,                                                  // 5368
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,                                                   // 5369
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,                                                        // 5370
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,                                           // 5371
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,                                         // 5372
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,                                                      // 5373
			tempDate = new Date(),                                                                                              // 5374
			today = this._daylightSavingAdjust(                                                                                 // 5375
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time                          // 5376
			isRTL = this._get(inst, "isRTL"),                                                                                   // 5377
			showButtonPanel = this._get(inst, "showButtonPanel"),                                                               // 5378
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),                                                             // 5379
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),                                                 // 5380
			numMonths = this._getNumberOfMonths(inst),                                                                          // 5381
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),                                                             // 5382
			stepMonths = this._get(inst, "stepMonths"),                                                                         // 5383
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),                                                          // 5384
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :                                 // 5385
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),                                                  // 5386
			minDate = this._getMinMaxDate(inst, "min"),                                                                         // 5387
			maxDate = this._getMinMaxDate(inst, "max"),                                                                         // 5388
			drawMonth = inst.drawMonth - showCurrentAtPos,                                                                      // 5389
			drawYear = inst.drawYear;                                                                                           // 5390
                                                                                                                       // 5391
		if (drawMonth < 0) {                                                                                                 // 5392
			drawMonth += 12;                                                                                                    // 5393
			drawYear--;                                                                                                         // 5394
		}                                                                                                                    // 5395
		if (maxDate) {                                                                                                       // 5396
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),                                                // 5397
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));                                       // 5398
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);                                                       // 5399
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {                                    // 5400
				drawMonth--;                                                                                                       // 5401
				if (drawMonth < 0) {                                                                                               // 5402
					drawMonth = 11;                                                                                                   // 5403
					drawYear--;                                                                                                       // 5404
				}                                                                                                                  // 5405
			}                                                                                                                   // 5406
		}                                                                                                                    // 5407
		inst.drawMonth = drawMonth;                                                                                          // 5408
		inst.drawYear = drawYear;                                                                                            // 5409
                                                                                                                       // 5410
		prevText = this._get(inst, "prevText");                                                                              // 5411
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,                                           // 5412
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),                                          // 5413
			this._getFormatConfig(inst)));                                                                                      // 5414
                                                                                                                       // 5415
		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?                                                        // 5416
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +                              // 5417
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));
                                                                                                                       // 5420
		nextText = this._get(inst, "nextText");                                                                              // 5421
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,                                           // 5422
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),                                          // 5423
			this._getFormatConfig(inst)));                                                                                      // 5424
                                                                                                                       // 5425
		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?                                                        // 5426
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +                              // 5427
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));
                                                                                                                       // 5430
		currentText = this._get(inst, "currentText");                                                                        // 5431
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);                                // 5432
		currentText = (!navigationAsDateFormat ? currentText :                                                               // 5433
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));                                               // 5434
                                                                                                                       // 5435
		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");                                                                   // 5437
                                                                                                                       // 5438
		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";                                    // 5441
                                                                                                                       // 5442
		firstDay = parseInt(this._get(inst, "firstDay"),10);                                                                 // 5443
		firstDay = (isNaN(firstDay) ? 0 : firstDay);                                                                         // 5444
                                                                                                                       // 5445
		showWeek = this._get(inst, "showWeek");                                                                              // 5446
		dayNames = this._get(inst, "dayNames");                                                                              // 5447
		dayNamesMin = this._get(inst, "dayNamesMin");                                                                        // 5448
		monthNames = this._get(inst, "monthNames");                                                                          // 5449
		monthNamesShort = this._get(inst, "monthNamesShort");                                                                // 5450
		beforeShowDay = this._get(inst, "beforeShowDay");                                                                    // 5451
		showOtherMonths = this._get(inst, "showOtherMonths");                                                                // 5452
		selectOtherMonths = this._get(inst, "selectOtherMonths");                                                            // 5453
		defaultDate = this._getDefaultDate(inst);                                                                            // 5454
		html = "";                                                                                                           // 5455
		dow;                                                                                                                 // 5456
		for (row = 0; row < numMonths[0]; row++) {                                                                           // 5457
			group = "";                                                                                                         // 5458
			this.maxRows = 4;                                                                                                   // 5459
			for (col = 0; col < numMonths[1]; col++) {                                                                          // 5460
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));                        // 5461
				cornerClass = " ui-corner-all";                                                                                    // 5462
				calender = "";                                                                                                     // 5463
				if (isMultiMonth) {                                                                                                // 5464
					calender += "<div class='ui-datepicker-group";                                                                    // 5465
					if (numMonths[1] > 1) {                                                                                           // 5466
						switch (col) {                                                                                                   // 5467
							case 0: calender += " ui-datepicker-group-first";                                                               // 5468
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;                                               // 5469
							case numMonths[1]-1: calender += " ui-datepicker-group-last";                                                   // 5470
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;                                               // 5471
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;                                    // 5472
						}                                                                                                                // 5473
					}                                                                                                                 // 5474
					calender += "'>";                                                                                                 // 5475
				}                                                                                                                  // 5476
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +          // 5477
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +                                        // 5478
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +                                       // 5479
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,                                        // 5480
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers                                          // 5481
					"</div><table class='ui-datepicker-calendar'><thead>" +                                                           // 5482
					"<tr>";                                                                                                           // 5483
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");         // 5484
				for (dow = 0; dow < 7; dow++) { // days of the week                                                                // 5485
					day = (dow + firstDay) % 7;                                                                                       // 5486
					thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +     // 5487
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";                                      // 5488
				}                                                                                                                  // 5489
				calender += thead + "</tr></thead><tbody>";                                                                        // 5490
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);                                                           // 5491
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {                                          // 5492
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);                                                       // 5493
				}                                                                                                                  // 5494
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;                                     // 5495
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate                     // 5496
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;                                                                                            // 5498
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));                               // 5499
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows                                                // 5500
					calender += "<tr>";                                                                                               // 5501
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +                                                 // 5502
						this._get(inst, "calculateWeek")(printDate) + "</td>");                                                          // 5503
					for (dow = 0; dow < 7; dow++) { // create date picker days                                                        // 5504
						daySettings = (beforeShowDay ?                                                                                   // 5505
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);                            // 5506
						otherMonth = (printDate.getMonth() !== drawMonth);                                                               // 5507
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||                                          // 5508
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);                                           // 5509
						tbody += "<td class='" +                                                                                         // 5510
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends                        // 5511
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months                          // 5512
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?           // 5514
							// or defaultDate is current printedDate and defaultDate is selectedDate                                        // 5515
							" " + this._dayOverClass : "") + // highlight selected day                                                      // 5516
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days     // 5517
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates                         // 5518
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day     // 5519
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months                                        // 5523
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +                                        // 5525
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day           // 5526
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months                           // 5527
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date                            // 5528
						printDate.setDate(printDate.getDate() + 1);                                                                      // 5529
						printDate = this._daylightSavingAdjust(printDate);                                                               // 5530
					}                                                                                                                 // 5531
					calender += tbody + "</tr>";                                                                                      // 5532
				}                                                                                                                  // 5533
				drawMonth++;                                                                                                       // 5534
				if (drawMonth > 11) {                                                                                              // 5535
					drawMonth = 0;                                                                                                    // 5536
					drawYear++;                                                                                                       // 5537
				}                                                                                                                  // 5538
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +                                                        // 5539
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");      // 5540
				group += calender;                                                                                                 // 5541
			}                                                                                                                   // 5542
			html += group;                                                                                                      // 5543
		}                                                                                                                    // 5544
		html += buttonPanel;                                                                                                 // 5545
		inst._keyEvent = false;                                                                                              // 5546
		return html;                                                                                                         // 5547
	},                                                                                                                    // 5548
                                                                                                                       // 5549
	/* Generate the month and year header. */                                                                             // 5550
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,                                       // 5551
			secondary, monthNames, monthNamesShort) {                                                                           // 5552
                                                                                                                       // 5553
		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,                                      // 5554
			changeMonth = this._get(inst, "changeMonth"),                                                                       // 5555
			changeYear = this._get(inst, "changeYear"),                                                                         // 5556
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),                                                         // 5557
			html = "<div class='ui-datepicker-title'>",                                                                         // 5558
			monthHtml = "";                                                                                                     // 5559
                                                                                                                       // 5560
		// month selection                                                                                                   // 5561
		if (secondary || !changeMonth) {                                                                                     // 5562
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";                              // 5563
		} else {                                                                                                             // 5564
			inMinYear = (minDate && minDate.getFullYear() === drawYear);                                                        // 5565
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);                                                        // 5566
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";                 // 5567
			for ( month = 0; month < 12; month++) {                                                                             // 5568
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {                  // 5569
					monthHtml += "<option value='" + month + "'" +                                                                    // 5570
						(month === drawMonth ? " selected='selected'" : "") +                                                            // 5571
						">" + monthNamesShort[month] + "</option>";                                                                      // 5572
				}                                                                                                                  // 5573
			}                                                                                                                   // 5574
			monthHtml += "</select>";                                                                                           // 5575
		}                                                                                                                    // 5576
                                                                                                                       // 5577
		if (!showMonthAfterYear) {                                                                                           // 5578
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");                                    // 5579
		}                                                                                                                    // 5580
                                                                                                                       // 5581
		// year selection                                                                                                    // 5582
		if ( !inst.yearshtml ) {                                                                                             // 5583
			inst.yearshtml = "";                                                                                                // 5584
			if (secondary || !changeYear) {                                                                                     // 5585
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";                                                // 5586
			} else {                                                                                                            // 5587
				// determine range of years to display                                                                             // 5588
				years = this._get(inst, "yearRange").split(":");                                                                   // 5589
				thisYear = new Date().getFullYear();                                                                               // 5590
				determineYear = function(value) {                                                                                  // 5591
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :                               // 5592
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :                                                       // 5593
						parseInt(value, 10)));                                                                                           // 5594
					return (isNaN(year) ? thisYear : year);                                                                           // 5595
				};                                                                                                                 // 5596
				year = determineYear(years[0]);                                                                                    // 5597
				endYear = Math.max(year, determineYear(years[1] || ""));                                                           // 5598
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);                                                   // 5599
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);                                          // 5600
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";             // 5601
				for (; year <= endYear; year++) {                                                                                  // 5602
					inst.yearshtml += "<option value='" + year + "'" +                                                                // 5603
						(year === drawYear ? " selected='selected'" : "") +                                                              // 5604
						">" + year + "</option>";                                                                                        // 5605
				}                                                                                                                  // 5606
				inst.yearshtml += "</select>";                                                                                     // 5607
                                                                                                                       // 5608
				html += inst.yearshtml;                                                                                            // 5609
				inst.yearshtml = null;                                                                                             // 5610
			}                                                                                                                   // 5611
		}                                                                                                                    // 5612
                                                                                                                       // 5613
		html += this._get(inst, "yearSuffix");                                                                               // 5614
		if (showMonthAfterYear) {                                                                                            // 5615
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;                                    // 5616
		}                                                                                                                    // 5617
		html += "</div>"; // Close datepicker_header                                                                         // 5618
		return html;                                                                                                         // 5619
	},                                                                                                                    // 5620
                                                                                                                       // 5621
	/* Adjust one of the date sub-fields. */                                                                              // 5622
	_adjustInstDate: function(inst, offset, period) {                                                                     // 5623
		var year = inst.drawYear + (period === "Y" ? offset : 0),                                                            // 5624
			month = inst.drawMonth + (period === "M" ? offset : 0),                                                             // 5625
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),                // 5626
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));                          // 5627
                                                                                                                       // 5628
		inst.selectedDay = date.getDate();                                                                                   // 5629
		inst.drawMonth = inst.selectedMonth = date.getMonth();                                                               // 5630
		inst.drawYear = inst.selectedYear = date.getFullYear();                                                              // 5631
		if (period === "M" || period === "Y") {                                                                              // 5632
			this._notifyChange(inst);                                                                                           // 5633
		}                                                                                                                    // 5634
	},                                                                                                                    // 5635
                                                                                                                       // 5636
	/* Ensure a date is within any min/max bounds. */                                                                     // 5637
	_restrictMinMax: function(inst, date) {                                                                               // 5638
		var minDate = this._getMinMaxDate(inst, "min"),                                                                      // 5639
			maxDate = this._getMinMaxDate(inst, "max"),                                                                         // 5640
			newDate = (minDate && date < minDate ? minDate : date);                                                             // 5641
		return (maxDate && newDate > maxDate ? maxDate : newDate);                                                           // 5642
	},                                                                                                                    // 5643
                                                                                                                       // 5644
	/* Notify change of month/year. */                                                                                    // 5645
	_notifyChange: function(inst) {                                                                                       // 5646
		var onChange = this._get(inst, "onChangeMonthYear");                                                                 // 5647
		if (onChange) {                                                                                                      // 5648
			onChange.apply((inst.input ? inst.input[0] : null),                                                                 // 5649
				[inst.selectedYear, inst.selectedMonth + 1, inst]);                                                                // 5650
		}                                                                                                                    // 5651
	},                                                                                                                    // 5652
                                                                                                                       // 5653
	/* Determine the number of months to show. */                                                                         // 5654
	_getNumberOfMonths: function(inst) {                                                                                  // 5655
		var numMonths = this._get(inst, "numberOfMonths");                                                                   // 5656
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));                  // 5657
	},                                                                                                                    // 5658
                                                                                                                       // 5659
	/* Determine the current maximum date - ensure no time components are set. */                                         // 5660
	_getMinMaxDate: function(inst, minMax) {                                                                              // 5661
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);                                            // 5662
	},                                                                                                                    // 5663
                                                                                                                       // 5664
	/* Find the number of days in a given month. */                                                                       // 5665
	_getDaysInMonth: function(year, month) {                                                                              // 5666
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();                                         // 5667
	},                                                                                                                    // 5668
                                                                                                                       // 5669
	/* Find the day of the week of the first of a month. */                                                               // 5670
	_getFirstDayOfMonth: function(year, month) {                                                                          // 5671
		return new Date(year, month, 1).getDay();                                                                            // 5672
	},                                                                                                                    // 5673
                                                                                                                       // 5674
	/* Determines if we should allow a "next/prev" month display change. */                                               // 5675
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {                                                          // 5676
		var numMonths = this._getNumberOfMonths(inst),                                                                       // 5677
			date = this._daylightSavingAdjust(new Date(curYear,                                                                 // 5678
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));                                                // 5679
                                                                                                                       // 5680
		if (offset < 0) {                                                                                                    // 5681
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));                                            // 5682
		}                                                                                                                    // 5683
		return this._isInRange(inst, date);                                                                                  // 5684
	},                                                                                                                    // 5685
                                                                                                                       // 5686
	/* Is the given date in the accepted range? */                                                                        // 5687
	_isInRange: function(inst, date) {                                                                                    // 5688
		var yearSplit, currentYear,                                                                                          // 5689
			minDate = this._getMinMaxDate(inst, "min"),                                                                         // 5690
			maxDate = this._getMinMaxDate(inst, "max"),                                                                         // 5691
			minYear = null,                                                                                                     // 5692
			maxYear = null,                                                                                                     // 5693
			years = this._get(inst, "yearRange");                                                                               // 5694
			if (years){                                                                                                         // 5695
				yearSplit = years.split(":");                                                                                      // 5696
				currentYear = new Date().getFullYear();                                                                            // 5697
				minYear = parseInt(yearSplit[0], 10);                                                                              // 5698
				maxYear = parseInt(yearSplit[1], 10);                                                                              // 5699
				if ( yearSplit[0].match(/[+\-].*/) ) {                                                                             // 5700
					minYear += currentYear;                                                                                           // 5701
				}                                                                                                                  // 5702
				if ( yearSplit[1].match(/[+\-].*/) ) {                                                                             // 5703
					maxYear += currentYear;                                                                                           // 5704
				}                                                                                                                  // 5705
			}                                                                                                                   // 5706
                                                                                                                       // 5707
		return ((!minDate || date.getTime() >= minDate.getTime()) &&                                                         // 5708
			(!maxDate || date.getTime() <= maxDate.getTime()) &&                                                                // 5709
			(!minYear || date.getFullYear() >= minYear) &&                                                                      // 5710
			(!maxYear || date.getFullYear() <= maxYear));                                                                       // 5711
	},                                                                                                                    // 5712
                                                                                                                       // 5713
	/* Provide the configuration settings for formatting/parsing. */                                                      // 5714
	_getFormatConfig: function(inst) {                                                                                    // 5715
		var shortYearCutoff = this._get(inst, "shortYearCutoff");                                                            // 5716
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :                                           // 5717
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));                                                    // 5718
		return {shortYearCutoff: shortYearCutoff,                                                                            // 5719
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),                             // 5720
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};                    // 5721
	},                                                                                                                    // 5722
                                                                                                                       // 5723
	/* Format the given date for display. */                                                                              // 5724
	_formatDate: function(inst, day, month, year) {                                                                       // 5725
		if (!day) {                                                                                                          // 5726
			inst.currentDay = inst.selectedDay;                                                                                 // 5727
			inst.currentMonth = inst.selectedMonth;                                                                             // 5728
			inst.currentYear = inst.selectedYear;                                                                               // 5729
		}                                                                                                                    // 5730
		var date = (day ? (typeof day === "object" ? day :                                                                   // 5731
			this._daylightSavingAdjust(new Date(year, month, day))) :                                                           // 5732
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));                        // 5733
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));                            // 5734
	}                                                                                                                     // 5735
});                                                                                                                    // 5736
                                                                                                                       // 5737
/*                                                                                                                     // 5738
 * Bind hover events for datepicker elements.                                                                          // 5739
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.                                // 5740
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */                                                                                                                    // 5742
function datepicker_bindHover(dpDiv) {                                                                                 // 5743
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";                      // 5744
	return dpDiv.delegate(selector, "mouseout", function() {                                                              // 5745
			$(this).removeClass("ui-state-hover");                                                                              // 5746
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {                                                          // 5747
				$(this).removeClass("ui-datepicker-prev-hover");                                                                   // 5748
			}                                                                                                                   // 5749
			if (this.className.indexOf("ui-datepicker-next") !== -1) {                                                          // 5750
				$(this).removeClass("ui-datepicker-next-hover");                                                                   // 5751
			}                                                                                                                   // 5752
		})                                                                                                                   // 5753
		.delegate( selector, "mouseover", datepicker_handleMouseover );                                                      // 5754
}                                                                                                                      // 5755
                                                                                                                       // 5756
function datepicker_handleMouseover() {                                                                                // 5757
	if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
		$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");                                  // 5759
		$(this).addClass("ui-state-hover");                                                                                  // 5760
		if (this.className.indexOf("ui-datepicker-prev") !== -1) {                                                           // 5761
			$(this).addClass("ui-datepicker-prev-hover");                                                                       // 5762
		}                                                                                                                    // 5763
		if (this.className.indexOf("ui-datepicker-next") !== -1) {                                                           // 5764
			$(this).addClass("ui-datepicker-next-hover");                                                                       // 5765
		}                                                                                                                    // 5766
	}                                                                                                                     // 5767
}                                                                                                                      // 5768
                                                                                                                       // 5769
/* jQuery extend now ignores nulls! */                                                                                 // 5770
function datepicker_extendRemove(target, props) {                                                                      // 5771
	$.extend(target, props);                                                                                              // 5772
	for (var name in props) {                                                                                             // 5773
		if (props[name] == null) {                                                                                           // 5774
			target[name] = props[name];                                                                                         // 5775
		}                                                                                                                    // 5776
	}                                                                                                                     // 5777
	return target;                                                                                                        // 5778
}                                                                                                                      // 5779
                                                                                                                       // 5780
/* Invoke the datepicker functionality.                                                                                // 5781
   @param  options  string - a command, optionally followed by additional parameters or                                // 5782
					Object - settings for attaching new datepicker functionality                                                      // 5783
   @return  jQuery object */                                                                                           // 5784
$.fn.datepicker = function(options){                                                                                   // 5785
                                                                                                                       // 5786
	/* Verify an empty collection wasn't passed - Fixes #6976 */                                                          // 5787
	if ( !this.length ) {                                                                                                 // 5788
		return this;                                                                                                         // 5789
	}                                                                                                                     // 5790
                                                                                                                       // 5791
	/* Initialise the date picker. */                                                                                     // 5792
	if (!$.datepicker.initialized) {                                                                                      // 5793
		$(document).mousedown($.datepicker._checkExternalClick);                                                             // 5794
		$.datepicker.initialized = true;                                                                                     // 5795
	}                                                                                                                     // 5796
                                                                                                                       // 5797
	/* Append datepicker main container to body if not exist. */                                                          // 5798
	if ($("#"+$.datepicker._mainDivId).length === 0) {                                                                    // 5799
		$("body").append($.datepicker.dpDiv);                                                                                // 5800
	}                                                                                                                     // 5801
                                                                                                                       // 5802
	var otherArgs = Array.prototype.slice.call(arguments, 1);                                                             // 5803
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {     // 5804
		return $.datepicker["_" + options + "Datepicker"].                                                                   // 5805
			apply($.datepicker, [this[0]].concat(otherArgs));                                                                   // 5806
	}                                                                                                                     // 5807
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {                             // 5808
		return $.datepicker["_" + options + "Datepicker"].                                                                   // 5809
			apply($.datepicker, [this[0]].concat(otherArgs));                                                                   // 5810
	}                                                                                                                     // 5811
	return this.each(function() {                                                                                         // 5812
		typeof options === "string" ?                                                                                        // 5813
			$.datepicker["_" + options + "Datepicker"].                                                                         // 5814
				apply($.datepicker, [this].concat(otherArgs)) :                                                                    // 5815
			$.datepicker._attachDatepicker(this, options);                                                                      // 5816
	});                                                                                                                   // 5817
};                                                                                                                     // 5818
                                                                                                                       // 5819
$.datepicker = new Datepicker(); // singleton instance                                                                 // 5820
$.datepicker.initialized = false;                                                                                      // 5821
$.datepicker.uuid = new Date().getTime();                                                                              // 5822
$.datepicker.version = "1.11.2";                                                                                       // 5823
                                                                                                                       // 5824
var datepicker = $.datepicker;                                                                                         // 5825
                                                                                                                       // 5826
                                                                                                                       // 5827
/*!                                                                                                                    // 5828
 * jQuery UI Draggable 1.11.2                                                                                          // 5829
 * http://jqueryui.com                                                                                                 // 5830
 *                                                                                                                     // 5831
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 5832
 * Released under the MIT license.                                                                                     // 5833
 * http://jquery.org/license                                                                                           // 5834
 *                                                                                                                     // 5835
 * http://api.jqueryui.com/draggable/                                                                                  // 5836
 */                                                                                                                    // 5837
                                                                                                                       // 5838
                                                                                                                       // 5839
$.widget("ui.draggable", $.ui.mouse, {                                                                                 // 5840
	version: "1.11.2",                                                                                                    // 5841
	widgetEventPrefix: "drag",                                                                                            // 5842
	options: {                                                                                                            // 5843
		addClasses: true,                                                                                                    // 5844
		appendTo: "parent",                                                                                                  // 5845
		axis: false,                                                                                                         // 5846
		connectToSortable: false,                                                                                            // 5847
		containment: false,                                                                                                  // 5848
		cursor: "auto",                                                                                                      // 5849
		cursorAt: false,                                                                                                     // 5850
		grid: false,                                                                                                         // 5851
		handle: false,                                                                                                       // 5852
		helper: "original",                                                                                                  // 5853
		iframeFix: false,                                                                                                    // 5854
		opacity: false,                                                                                                      // 5855
		refreshPositions: false,                                                                                             // 5856
		revert: false,                                                                                                       // 5857
		revertDuration: 500,                                                                                                 // 5858
		scope: "default",                                                                                                    // 5859
		scroll: true,                                                                                                        // 5860
		scrollSensitivity: 20,                                                                                               // 5861
		scrollSpeed: 20,                                                                                                     // 5862
		snap: false,                                                                                                         // 5863
		snapMode: "both",                                                                                                    // 5864
		snapTolerance: 20,                                                                                                   // 5865
		stack: false,                                                                                                        // 5866
		zIndex: false,                                                                                                       // 5867
                                                                                                                       // 5868
		// callbacks                                                                                                         // 5869
		drag: null,                                                                                                          // 5870
		start: null,                                                                                                         // 5871
		stop: null                                                                                                           // 5872
	},                                                                                                                    // 5873
	_create: function() {                                                                                                 // 5874
                                                                                                                       // 5875
		if ( this.options.helper === "original" ) {                                                                          // 5876
			this._setPositionRelative();                                                                                        // 5877
		}                                                                                                                    // 5878
		if (this.options.addClasses){                                                                                        // 5879
			this.element.addClass("ui-draggable");                                                                              // 5880
		}                                                                                                                    // 5881
		if (this.options.disabled){                                                                                          // 5882
			this.element.addClass("ui-draggable-disabled");                                                                     // 5883
		}                                                                                                                    // 5884
		this._setHandleClassName();                                                                                          // 5885
                                                                                                                       // 5886
		this._mouseInit();                                                                                                   // 5887
	},                                                                                                                    // 5888
                                                                                                                       // 5889
	_setOption: function( key, value ) {                                                                                  // 5890
		this._super( key, value );                                                                                           // 5891
		if ( key === "handle" ) {                                                                                            // 5892
			this._removeHandleClassName();                                                                                      // 5893
			this._setHandleClassName();                                                                                         // 5894
		}                                                                                                                    // 5895
	},                                                                                                                    // 5896
                                                                                                                       // 5897
	_destroy: function() {                                                                                                // 5898
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {                                              // 5899
			this.destroyOnClear = true;                                                                                         // 5900
			return;                                                                                                             // 5901
		}                                                                                                                    // 5902
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );                              // 5903
		this._removeHandleClassName();                                                                                       // 5904
		this._mouseDestroy();                                                                                                // 5905
	},                                                                                                                    // 5906
                                                                                                                       // 5907
	_mouseCapture: function(event) {                                                                                      // 5908
		var o = this.options;                                                                                                // 5909
                                                                                                                       // 5910
		this._blurActiveElement( event );                                                                                    // 5911
                                                                                                                       // 5912
		// among others, prevent a drag on a resizable-handle                                                                // 5913
		if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {                       // 5914
			return false;                                                                                                       // 5915
		}                                                                                                                    // 5916
                                                                                                                       // 5917
		//Quit if we're not on a valid handle                                                                                // 5918
		this.handle = this._getHandle(event);                                                                                // 5919
		if (!this.handle) {                                                                                                  // 5920
			return false;                                                                                                       // 5921
		}                                                                                                                    // 5922
                                                                                                                       // 5923
		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );                                                  // 5924
                                                                                                                       // 5925
		return true;                                                                                                         // 5926
                                                                                                                       // 5927
	},                                                                                                                    // 5928
                                                                                                                       // 5929
	_blockFrames: function( selector ) {                                                                                  // 5930
		this.iframeBlocks = this.document.find( selector ).map(function() {                                                  // 5931
			var iframe = $( this );                                                                                             // 5932
                                                                                                                       // 5933
			return $( "<div>" )                                                                                                 // 5934
				.css( "position", "absolute" )                                                                                     // 5935
				.appendTo( iframe.parent() )                                                                                       // 5936
				.outerWidth( iframe.outerWidth() )                                                                                 // 5937
				.outerHeight( iframe.outerHeight() )                                                                               // 5938
				.offset( iframe.offset() )[ 0 ];                                                                                   // 5939
		});                                                                                                                  // 5940
	},                                                                                                                    // 5941
                                                                                                                       // 5942
	_unblockFrames: function() {                                                                                          // 5943
		if ( this.iframeBlocks ) {                                                                                           // 5944
			this.iframeBlocks.remove();                                                                                         // 5945
			delete this.iframeBlocks;                                                                                           // 5946
		}                                                                                                                    // 5947
	},                                                                                                                    // 5948
                                                                                                                       // 5949
	_blurActiveElement: function( event ) {                                                                               // 5950
		var document = this.document[ 0 ];                                                                                   // 5951
                                                                                                                       // 5952
		// Only need to blur if the event occurred on the draggable itself, see #10527                                       // 5953
		if ( !this.handleElement.is( event.target ) ) {                                                                      // 5954
			return;                                                                                                             // 5955
		}                                                                                                                    // 5956
                                                                                                                       // 5957
		// support: IE9                                                                                                      // 5958
		// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>                               // 5959
		try {                                                                                                                // 5960
                                                                                                                       // 5961
			// Support: IE9, IE10                                                                                               // 5962
			// If the <body> is blurred, IE will switch windows, see #9520                                                      // 5963
			if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {                         // 5964
                                                                                                                       // 5965
				// Blur any element that currently has focus, see #4261                                                            // 5966
				$( document.activeElement ).blur();                                                                                // 5967
			}                                                                                                                   // 5968
		} catch ( error ) {}                                                                                                 // 5969
	},                                                                                                                    // 5970
                                                                                                                       // 5971
	_mouseStart: function(event) {                                                                                        // 5972
                                                                                                                       // 5973
		var o = this.options;                                                                                                // 5974
                                                                                                                       // 5975
		//Create and append the visible helper                                                                               // 5976
		this.helper = this._createHelper(event);                                                                             // 5977
                                                                                                                       // 5978
		this.helper.addClass("ui-draggable-dragging");                                                                       // 5979
                                                                                                                       // 5980
		//Cache the helper size                                                                                              // 5981
		this._cacheHelperProportions();                                                                                      // 5982
                                                                                                                       // 5983
		//If ddmanager is used for droppables, set the global draggable                                                      // 5984
		if ($.ui.ddmanager) {                                                                                                // 5985
			$.ui.ddmanager.current = this;                                                                                      // 5986
		}                                                                                                                    // 5987
                                                                                                                       // 5988
		/*                                                                                                                   // 5989
		 * - Position generation -                                                                                           // 5990
		 * This block generates everything position related - it's the core of draggables.                                   // 5991
		 */                                                                                                                  // 5992
                                                                                                                       // 5993
		//Cache the margins of the original element                                                                          // 5994
		this._cacheMargins();                                                                                                // 5995
                                                                                                                       // 5996
		//Store the helper's css position                                                                                    // 5997
		this.cssPosition = this.helper.css( "position" );                                                                    // 5998
		this.scrollParent = this.helper.scrollParent( true );                                                                // 5999
		this.offsetParent = this.helper.offsetParent();                                                                      // 6000
		this.hasFixedAncestor = this.helper.parents().filter(function() {                                                    // 6001
				return $( this ).css( "position" ) === "fixed";                                                                    // 6002
			}).length > 0;                                                                                                      // 6003
                                                                                                                       // 6004
		//The element's absolute position on the page minus margins                                                          // 6005
		this.positionAbs = this.element.offset();                                                                            // 6006
		this._refreshOffsets( event );                                                                                       // 6007
                                                                                                                       // 6008
		//Generate the original position                                                                                     // 6009
		this.originalPosition = this.position = this._generatePosition( event, false );                                      // 6010
		this.originalPageX = event.pageX;                                                                                    // 6011
		this.originalPageY = event.pageY;                                                                                    // 6012
                                                                                                                       // 6013
		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied                                           // 6014
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));                                                            // 6015
                                                                                                                       // 6016
		//Set a containment if given in the options                                                                          // 6017
		this._setContainment();                                                                                              // 6018
                                                                                                                       // 6019
		//Trigger event + callbacks                                                                                          // 6020
		if (this._trigger("start", event) === false) {                                                                       // 6021
			this._clear();                                                                                                      // 6022
			return false;                                                                                                       // 6023
		}                                                                                                                    // 6024
                                                                                                                       // 6025
		//Recache the helper size                                                                                            // 6026
		this._cacheHelperProportions();                                                                                      // 6027
                                                                                                                       // 6028
		//Prepare the droppable offsets                                                                                      // 6029
		if ($.ui.ddmanager && !o.dropBehaviour) {                                                                            // 6030
			$.ui.ddmanager.prepareOffsets(this, event);                                                                         // 6031
		}                                                                                                                    // 6032
                                                                                                                       // 6033
		// Reset helper's right/bottom css if they're set and set explicit width/height instead                              // 6034
		// as this prevents resizing of elements with right/bottom set (see #7772)                                           // 6035
		this._normalizeRightBottom();                                                                                        // 6036
                                                                                                                       // 6037
		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position
                                                                                                                       // 6039
		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)                  // 6040
		if ( $.ui.ddmanager ) {                                                                                              // 6041
			$.ui.ddmanager.dragStart(this, event);                                                                              // 6042
		}                                                                                                                    // 6043
                                                                                                                       // 6044
		return true;                                                                                                         // 6045
	},                                                                                                                    // 6046
                                                                                                                       // 6047
	_refreshOffsets: function( event ) {                                                                                  // 6048
		this.offset = {                                                                                                      // 6049
			top: this.positionAbs.top - this.margins.top,                                                                       // 6050
			left: this.positionAbs.left - this.margins.left,                                                                    // 6051
			scroll: false,                                                                                                      // 6052
			parent: this._getParentOffset(),                                                                                    // 6053
			relative: this._getRelativeOffset()                                                                                 // 6054
		};                                                                                                                   // 6055
                                                                                                                       // 6056
		this.offset.click = {                                                                                                // 6057
			left: event.pageX - this.offset.left,                                                                               // 6058
			top: event.pageY - this.offset.top                                                                                  // 6059
		};                                                                                                                   // 6060
	},                                                                                                                    // 6061
                                                                                                                       // 6062
	_mouseDrag: function(event, noPropagation) {                                                                          // 6063
		// reset any necessary cached properties (see #5009)                                                                 // 6064
		if ( this.hasFixedAncestor ) {                                                                                       // 6065
			this.offset.parent = this._getParentOffset();                                                                       // 6066
		}                                                                                                                    // 6067
                                                                                                                       // 6068
		//Compute the helpers position                                                                                       // 6069
		this.position = this._generatePosition( event, true );                                                               // 6070
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 6071
                                                                                                                       // 6072
		//Call plugins and callbacks and use the resulting position if something is returned                                 // 6073
		if (!noPropagation) {                                                                                                // 6074
			var ui = this._uiHash();                                                                                            // 6075
			if (this._trigger("drag", event, ui) === false) {                                                                   // 6076
				this._mouseUp({});                                                                                                 // 6077
				return false;                                                                                                      // 6078
			}                                                                                                                   // 6079
			this.position = ui.position;                                                                                        // 6080
		}                                                                                                                    // 6081
                                                                                                                       // 6082
		this.helper[ 0 ].style.left = this.position.left + "px";                                                             // 6083
		this.helper[ 0 ].style.top = this.position.top + "px";                                                               // 6084
                                                                                                                       // 6085
		if ($.ui.ddmanager) {                                                                                                // 6086
			$.ui.ddmanager.drag(this, event);                                                                                   // 6087
		}                                                                                                                    // 6088
                                                                                                                       // 6089
		return false;                                                                                                        // 6090
	},                                                                                                                    // 6091
                                                                                                                       // 6092
	_mouseStop: function(event) {                                                                                         // 6093
                                                                                                                       // 6094
		//If we are using droppables, inform the manager about the drop                                                      // 6095
		var that = this,                                                                                                     // 6096
			dropped = false;                                                                                                    // 6097
		if ($.ui.ddmanager && !this.options.dropBehaviour) {                                                                 // 6098
			dropped = $.ui.ddmanager.drop(this, event);                                                                         // 6099
		}                                                                                                                    // 6100
                                                                                                                       // 6101
		//if a drop comes from outside (a sortable)                                                                          // 6102
		if (this.dropped) {                                                                                                  // 6103
			dropped = this.dropped;                                                                                             // 6104
			this.dropped = false;                                                                                               // 6105
		}                                                                                                                    // 6106
                                                                                                                       // 6107
		if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {               // 6109
				if (that._trigger("stop", event) !== false) {                                                                      // 6110
					that._clear();                                                                                                    // 6111
				}                                                                                                                  // 6112
			});                                                                                                                 // 6113
		} else {                                                                                                             // 6114
			if (this._trigger("stop", event) !== false) {                                                                       // 6115
				this._clear();                                                                                                     // 6116
			}                                                                                                                   // 6117
		}                                                                                                                    // 6118
                                                                                                                       // 6119
		return false;                                                                                                        // 6120
	},                                                                                                                    // 6121
                                                                                                                       // 6122
	_mouseUp: function( event ) {                                                                                         // 6123
		this._unblockFrames();                                                                                               // 6124
                                                                                                                       // 6125
		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)                  // 6126
		if ( $.ui.ddmanager ) {                                                                                              // 6127
			$.ui.ddmanager.dragStop(this, event);                                                                               // 6128
		}                                                                                                                    // 6129
                                                                                                                       // 6130
		// Only need to focus if the event occurred on the draggable itself, see #10527                                      // 6131
		if ( this.handleElement.is( event.target ) ) {                                                                       // 6132
			// The interaction is over; whether or not the click resulted in a drag, focus the element                          // 6133
			this.element.focus();                                                                                               // 6134
		}                                                                                                                    // 6135
                                                                                                                       // 6136
		return $.ui.mouse.prototype._mouseUp.call(this, event);                                                              // 6137
	},                                                                                                                    // 6138
                                                                                                                       // 6139
	cancel: function() {                                                                                                  // 6140
                                                                                                                       // 6141
		if (this.helper.is(".ui-draggable-dragging")) {                                                                      // 6142
			this._mouseUp({});                                                                                                  // 6143
		} else {                                                                                                             // 6144
			this._clear();                                                                                                      // 6145
		}                                                                                                                    // 6146
                                                                                                                       // 6147
		return this;                                                                                                         // 6148
                                                                                                                       // 6149
	},                                                                                                                    // 6150
                                                                                                                       // 6151
	_getHandle: function(event) {                                                                                         // 6152
		return this.options.handle ?                                                                                         // 6153
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :                                    // 6154
			true;                                                                                                               // 6155
	},                                                                                                                    // 6156
                                                                                                                       // 6157
	_setHandleClassName: function() {                                                                                     // 6158
		this.handleElement = this.options.handle ?                                                                           // 6159
			this.element.find( this.options.handle ) : this.element;                                                            // 6160
		this.handleElement.addClass( "ui-draggable-handle" );                                                                // 6161
	},                                                                                                                    // 6162
                                                                                                                       // 6163
	_removeHandleClassName: function() {                                                                                  // 6164
		this.handleElement.removeClass( "ui-draggable-handle" );                                                             // 6165
	},                                                                                                                    // 6166
                                                                                                                       // 6167
	_createHelper: function(event) {                                                                                      // 6168
                                                                                                                       // 6169
		var o = this.options,                                                                                                // 6170
			helperIsFunction = $.isFunction( o.helper ),                                                                        // 6171
			helper = helperIsFunction ?                                                                                         // 6172
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :                                                              // 6173
				( o.helper === "clone" ?                                                                                           // 6174
					this.element.clone().removeAttr( "id" ) :                                                                         // 6175
					this.element );                                                                                                   // 6176
                                                                                                                       // 6177
		if (!helper.parents("body").length) {                                                                                // 6178
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));                               // 6179
		}                                                                                                                    // 6180
                                                                                                                       // 6181
		// http://bugs.jqueryui.com/ticket/9446                                                                              // 6182
		// a helper function can return the original element                                                                 // 6183
		// which wouldn't have been set to relative in _create                                                               // 6184
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {                                                       // 6185
			this._setPositionRelative();                                                                                        // 6186
		}                                                                                                                    // 6187
                                                                                                                       // 6188
		if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {                           // 6189
			helper.css("position", "absolute");                                                                                 // 6190
		}                                                                                                                    // 6191
                                                                                                                       // 6192
		return helper;                                                                                                       // 6193
                                                                                                                       // 6194
	},                                                                                                                    // 6195
                                                                                                                       // 6196
	_setPositionRelative: function() {                                                                                    // 6197
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {                                                    // 6198
			this.element[ 0 ].style.position = "relative";                                                                      // 6199
		}                                                                                                                    // 6200
	},                                                                                                                    // 6201
                                                                                                                       // 6202
	_adjustOffsetFromHelper: function(obj) {                                                                              // 6203
		if (typeof obj === "string") {                                                                                       // 6204
			obj = obj.split(" ");                                                                                               // 6205
		}                                                                                                                    // 6206
		if ($.isArray(obj)) {                                                                                                // 6207
			obj = { left: +obj[0], top: +obj[1] || 0 };                                                                         // 6208
		}                                                                                                                    // 6209
		if ("left" in obj) {                                                                                                 // 6210
			this.offset.click.left = obj.left + this.margins.left;                                                              // 6211
		}                                                                                                                    // 6212
		if ("right" in obj) {                                                                                                // 6213
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;                              // 6214
		}                                                                                                                    // 6215
		if ("top" in obj) {                                                                                                  // 6216
			this.offset.click.top = obj.top + this.margins.top;                                                                 // 6217
		}                                                                                                                    // 6218
		if ("bottom" in obj) {                                                                                               // 6219
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;                              // 6220
		}                                                                                                                    // 6221
	},                                                                                                                    // 6222
                                                                                                                       // 6223
	_isRootNode: function( element ) {                                                                                    // 6224
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];                                 // 6225
	},                                                                                                                    // 6226
                                                                                                                       // 6227
	_getParentOffset: function() {                                                                                        // 6228
                                                                                                                       // 6229
		//Get the offsetParent and cache its position                                                                        // 6230
		var po = this.offsetParent.offset(),                                                                                 // 6231
			document = this.document[ 0 ];                                                                                      // 6232
                                                                                                                       // 6233
		// This is a special case where we need to modify a offset calculated on start, since the following happened:        // 6234
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent     // 6235
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();                                                                          // 6239
			po.top += this.scrollParent.scrollTop();                                                                            // 6240
		}                                                                                                                    // 6241
                                                                                                                       // 6242
		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {                                                                  // 6243
			po = { top: 0, left: 0 };                                                                                           // 6244
		}                                                                                                                    // 6245
                                                                                                                       // 6246
		return {                                                                                                             // 6247
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),                                         // 6248
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)                                       // 6249
		};                                                                                                                   // 6250
                                                                                                                       // 6251
	},                                                                                                                    // 6252
                                                                                                                       // 6253
	_getRelativeOffset: function() {                                                                                      // 6254
		if ( this.cssPosition !== "relative" ) {                                                                             // 6255
			return { top: 0, left: 0 };                                                                                         // 6256
		}                                                                                                                    // 6257
                                                                                                                       // 6258
		var p = this.element.position(),                                                                                     // 6259
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );                                                      // 6260
                                                                                                                       // 6261
		return {                                                                                                             // 6262
			top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};                                                                                                                   // 6265
                                                                                                                       // 6266
	},                                                                                                                    // 6267
                                                                                                                       // 6268
	_cacheMargins: function() {                                                                                           // 6269
		this.margins = {                                                                                                     // 6270
			left: (parseInt(this.element.css("marginLeft"), 10) || 0),                                                          // 6271
			top: (parseInt(this.element.css("marginTop"), 10) || 0),                                                            // 6272
			right: (parseInt(this.element.css("marginRight"), 10) || 0),                                                        // 6273
			bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)                                                       // 6274
		};                                                                                                                   // 6275
	},                                                                                                                    // 6276
                                                                                                                       // 6277
	_cacheHelperProportions: function() {                                                                                 // 6278
		this.helperProportions = {                                                                                           // 6279
			width: this.helper.outerWidth(),                                                                                    // 6280
			height: this.helper.outerHeight()                                                                                   // 6281
		};                                                                                                                   // 6282
	},                                                                                                                    // 6283
                                                                                                                       // 6284
	_setContainment: function() {                                                                                         // 6285
                                                                                                                       // 6286
		var isUserScrollable, c, ce,                                                                                         // 6287
			o = this.options,                                                                                                   // 6288
			document = this.document[ 0 ];                                                                                      // 6289
                                                                                                                       // 6290
		this.relativeContainer = null;                                                                                       // 6291
                                                                                                                       // 6292
		if ( !o.containment ) {                                                                                              // 6293
			this.containment = null;                                                                                            // 6294
			return;                                                                                                             // 6295
		}                                                                                                                    // 6296
                                                                                                                       // 6297
		if ( o.containment === "window" ) {                                                                                  // 6298
			this.containment = [                                                                                                // 6299
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,                                    // 6300
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,                                       // 6301
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,                 // 6302
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];                                                                                                                  // 6304
			return;                                                                                                             // 6305
		}                                                                                                                    // 6306
                                                                                                                       // 6307
		if ( o.containment === "document") {                                                                                 // 6308
			this.containment = [                                                                                                // 6309
				0,                                                                                                                 // 6310
				0,                                                                                                                 // 6311
				$( document ).width() - this.helperProportions.width - this.margins.left,                                          // 6312
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];                                                                                                                  // 6314
			return;                                                                                                             // 6315
		}                                                                                                                    // 6316
                                                                                                                       // 6317
		if ( o.containment.constructor === Array ) {                                                                         // 6318
			this.containment = o.containment;                                                                                   // 6319
			return;                                                                                                             // 6320
		}                                                                                                                    // 6321
                                                                                                                       // 6322
		if ( o.containment === "parent" ) {                                                                                  // 6323
			o.containment = this.helper[ 0 ].parentNode;                                                                        // 6324
		}                                                                                                                    // 6325
                                                                                                                       // 6326
		c = $( o.containment );                                                                                              // 6327
		ce = c[ 0 ];                                                                                                         // 6328
                                                                                                                       // 6329
		if ( !ce ) {                                                                                                         // 6330
			return;                                                                                                             // 6331
		}                                                                                                                    // 6332
                                                                                                                       // 6333
		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );                                                      // 6334
                                                                                                                       // 6335
		this.containment = [                                                                                                 // 6336
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),              // 6337
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),                // 6338
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -                                // 6339
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -                                                             // 6340
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -                                                                 // 6341
				this.helperProportions.width -                                                                                     // 6342
				this.margins.left -                                                                                                // 6343
				this.margins.right,                                                                                                // 6344
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -                             // 6345
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -                                                            // 6346
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -                                                                // 6347
				this.helperProportions.height -                                                                                    // 6348
				this.margins.top -                                                                                                 // 6349
				this.margins.bottom                                                                                                // 6350
		];                                                                                                                   // 6351
		this.relativeContainer = c;                                                                                          // 6352
	},                                                                                                                    // 6353
                                                                                                                       // 6354
	_convertPositionTo: function(d, pos) {                                                                                // 6355
                                                                                                                       // 6356
		if (!pos) {                                                                                                          // 6357
			pos = this.position;                                                                                                // 6358
		}                                                                                                                    // 6359
                                                                                                                       // 6360
		var mod = d === "absolute" ? 1 : -1,                                                                                 // 6361
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );                                                      // 6362
                                                                                                                       // 6363
		return {                                                                                                             // 6364
			top: (                                                                                                              // 6365
				pos.top	+																// The absolute mouse position                                                            // 6366
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)             // 6368
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
			),                                                                                                                  // 6370
			left: (                                                                                                             // 6371
				pos.left +																// The absolute mouse position                                                           // 6372
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)            // 6374
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
			)                                                                                                                   // 6376
		};                                                                                                                   // 6377
                                                                                                                       // 6378
	},                                                                                                                    // 6379
                                                                                                                       // 6380
	_generatePosition: function( event, constrainPosition ) {                                                             // 6381
                                                                                                                       // 6382
		var containment, co, top, left,                                                                                      // 6383
			o = this.options,                                                                                                   // 6384
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),                                                      // 6385
			pageX = event.pageX,                                                                                                // 6386
			pageY = event.pageY;                                                                                                // 6387
                                                                                                                       // 6388
		// Cache the scroll                                                                                                  // 6389
		if ( !scrollIsRootNode || !this.offset.scroll ) {                                                                    // 6390
			this.offset.scroll = {                                                                                              // 6391
				top: this.scrollParent.scrollTop(),                                                                                // 6392
				left: this.scrollParent.scrollLeft()                                                                               // 6393
			};                                                                                                                  // 6394
		}                                                                                                                    // 6395
                                                                                                                       // 6396
		/*                                                                                                                   // 6397
		 * - Position constraining -                                                                                         // 6398
		 * Constrain the position to a mix of grid, containment.                                                             // 6399
		 */                                                                                                                  // 6400
                                                                                                                       // 6401
		// If we are not dragging yet, we won't check for options                                                            // 6402
		if ( constrainPosition ) {                                                                                           // 6403
			if ( this.containment ) {                                                                                           // 6404
				if ( this.relativeContainer ){                                                                                     // 6405
					co = this.relativeContainer.offset();                                                                             // 6406
					containment = [                                                                                                   // 6407
						this.containment[ 0 ] + co.left,                                                                                 // 6408
						this.containment[ 1 ] + co.top,                                                                                  // 6409
						this.containment[ 2 ] + co.left,                                                                                 // 6410
						this.containment[ 3 ] + co.top                                                                                   // 6411
					];                                                                                                                // 6412
				} else {                                                                                                           // 6413
					containment = this.containment;                                                                                   // 6414
				}                                                                                                                  // 6415
                                                                                                                       // 6416
				if (event.pageX - this.offset.click.left < containment[0]) {                                                       // 6417
					pageX = containment[0] + this.offset.click.left;                                                                  // 6418
				}                                                                                                                  // 6419
				if (event.pageY - this.offset.click.top < containment[1]) {                                                        // 6420
					pageY = containment[1] + this.offset.click.top;                                                                   // 6421
				}                                                                                                                  // 6422
				if (event.pageX - this.offset.click.left > containment[2]) {                                                       // 6423
					pageX = containment[2] + this.offset.click.left;                                                                  // 6424
				}                                                                                                                  // 6425
				if (event.pageY - this.offset.click.top > containment[3]) {                                                        // 6426
					pageY = containment[3] + this.offset.click.top;                                                                   // 6427
				}                                                                                                                  // 6428
			}                                                                                                                   // 6429
                                                                                                                       // 6430
			if (o.grid) {                                                                                                       // 6431
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                                                                                                                       // 6435
				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}                                                                                                                   // 6438
                                                                                                                       // 6439
			if ( o.axis === "y" ) {                                                                                             // 6440
				pageX = this.originalPageX;                                                                                        // 6441
			}                                                                                                                   // 6442
                                                                                                                       // 6443
			if ( o.axis === "x" ) {                                                                                             // 6444
				pageY = this.originalPageY;                                                                                        // 6445
			}                                                                                                                   // 6446
		}                                                                                                                    // 6447
                                                                                                                       // 6448
		return {                                                                                                             // 6449
			top: (                                                                                                              // 6450
				pageY -																	// The absolute mouse position                                                             // 6451
				this.offset.click.top	-												// Click offset (relative to the element)                                       // 6452
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)                 // 6454
				( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )     // 6455
			),                                                                                                                  // 6456
			left: (                                                                                                             // 6457
				pageX -																	// The absolute mouse position                                                             // 6458
				this.offset.click.left -												// Click offset (relative to the element)                                      // 6459
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)                // 6461
				( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )   // 6462
			)                                                                                                                   // 6463
		};                                                                                                                   // 6464
                                                                                                                       // 6465
	},                                                                                                                    // 6466
                                                                                                                       // 6467
	_clear: function() {                                                                                                  // 6468
		this.helper.removeClass("ui-draggable-dragging");                                                                    // 6469
		if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {                                               // 6470
			this.helper.remove();                                                                                               // 6471
		}                                                                                                                    // 6472
		this.helper = null;                                                                                                  // 6473
		this.cancelHelperRemoval = false;                                                                                    // 6474
		if ( this.destroyOnClear ) {                                                                                         // 6475
			this.destroy();                                                                                                     // 6476
		}                                                                                                                    // 6477
	},                                                                                                                    // 6478
                                                                                                                       // 6479
	_normalizeRightBottom: function() {                                                                                   // 6480
		if ( this.options.axis !== "y" && this.helper.css( "right" ) !== "auto" ) {                                          // 6481
			this.helper.width( this.helper.width() );                                                                           // 6482
			this.helper.css( "right", "auto" );                                                                                 // 6483
		}                                                                                                                    // 6484
		if ( this.options.axis !== "x" && this.helper.css( "bottom" ) !== "auto" ) {                                         // 6485
			this.helper.height( this.helper.height() );                                                                         // 6486
			this.helper.css( "bottom", "auto" );                                                                                // 6487
		}                                                                                                                    // 6488
	},                                                                                                                    // 6489
                                                                                                                       // 6490
	// From now on bulk stuff - mainly helpers                                                                            // 6491
                                                                                                                       // 6492
	_trigger: function( type, event, ui ) {                                                                               // 6493
		ui = ui || this._uiHash();                                                                                           // 6494
		$.ui.plugin.call( this, type, [ event, ui, this ], true );                                                           // 6495
                                                                                                                       // 6496
		// Absolute position and offset (see #6884 ) have to be recalculated after plugins                                   // 6497
		if ( /^(drag|start|stop)/.test( type ) ) {                                                                           // 6498
			this.positionAbs = this._convertPositionTo( "absolute" );                                                           // 6499
			ui.offset = this.positionAbs;                                                                                       // 6500
		}                                                                                                                    // 6501
		return $.Widget.prototype._trigger.call( this, type, event, ui );                                                    // 6502
	},                                                                                                                    // 6503
                                                                                                                       // 6504
	plugins: {},                                                                                                          // 6505
                                                                                                                       // 6506
	_uiHash: function() {                                                                                                 // 6507
		return {                                                                                                             // 6508
			helper: this.helper,                                                                                                // 6509
			position: this.position,                                                                                            // 6510
			originalPosition: this.originalPosition,                                                                            // 6511
			offset: this.positionAbs                                                                                            // 6512
		};                                                                                                                   // 6513
	}                                                                                                                     // 6514
                                                                                                                       // 6515
});                                                                                                                    // 6516
                                                                                                                       // 6517
$.ui.plugin.add( "draggable", "connectToSortable", {                                                                   // 6518
	start: function( event, ui, draggable ) {                                                                             // 6519
		var uiSortable = $.extend( {}, ui, {                                                                                 // 6520
			item: draggable.element                                                                                             // 6521
		});                                                                                                                  // 6522
                                                                                                                       // 6523
		draggable.sortables = [];                                                                                            // 6524
		$( draggable.options.connectToSortable ).each(function() {                                                           // 6525
			var sortable = $( this ).sortable( "instance" );                                                                    // 6526
                                                                                                                       // 6527
			if ( sortable && !sortable.options.disabled ) {                                                                     // 6528
				draggable.sortables.push( sortable );                                                                              // 6529
                                                                                                                       // 6530
				// refreshPositions is called at drag start to refresh the containerCache                                          // 6531
				// which is used in drag. This ensures it's initialized and synchronized                                           // 6532
				// with any changes that might have happened on the page since initialization.                                     // 6533
				sortable.refreshPositions();                                                                                       // 6534
				sortable._trigger("activate", event, uiSortable);                                                                  // 6535
			}                                                                                                                   // 6536
		});                                                                                                                  // 6537
	},                                                                                                                    // 6538
	stop: function( event, ui, draggable ) {                                                                              // 6539
		var uiSortable = $.extend( {}, ui, {                                                                                 // 6540
			item: draggable.element                                                                                             // 6541
		});                                                                                                                  // 6542
                                                                                                                       // 6543
		draggable.cancelHelperRemoval = false;                                                                               // 6544
                                                                                                                       // 6545
		$.each( draggable.sortables, function() {                                                                            // 6546
			var sortable = this;                                                                                                // 6547
                                                                                                                       // 6548
			if ( sortable.isOver ) {                                                                                            // 6549
				sortable.isOver = 0;                                                                                               // 6550
                                                                                                                       // 6551
				// Allow this sortable to handle removing the helper                                                               // 6552
				draggable.cancelHelperRemoval = true;                                                                              // 6553
				sortable.cancelHelperRemoval = false;                                                                              // 6554
                                                                                                                       // 6555
				// Use _storedCSS To restore properties in the sortable,                                                           // 6556
				// as this also handles revert (#9675) since the draggable                                                         // 6557
				// may have modified them in unexpected ways (#8809)                                                               // 6558
				sortable._storedCSS = {                                                                                            // 6559
					position: sortable.placeholder.css( "position" ),                                                                 // 6560
					top: sortable.placeholder.css( "top" ),                                                                           // 6561
					left: sortable.placeholder.css( "left" )                                                                          // 6562
				};                                                                                                                 // 6563
                                                                                                                       // 6564
				sortable._mouseStop(event);                                                                                        // 6565
                                                                                                                       // 6566
				// Once drag has ended, the sortable should return to using                                                        // 6567
				// its original helper, not the shared helper from draggable                                                       // 6568
				sortable.options.helper = sortable.options._helper;                                                                // 6569
			} else {                                                                                                            // 6570
				// Prevent this Sortable from removing the helper.                                                                 // 6571
				// However, don't set the draggable to remove the helper                                                           // 6572
				// either as another connected Sortable may yet handle the removal.                                                // 6573
				sortable.cancelHelperRemoval = true;                                                                               // 6574
                                                                                                                       // 6575
				sortable._trigger( "deactivate", event, uiSortable );                                                              // 6576
			}                                                                                                                   // 6577
		});                                                                                                                  // 6578
	},                                                                                                                    // 6579
	drag: function( event, ui, draggable ) {                                                                              // 6580
		$.each( draggable.sortables, function() {                                                                            // 6581
			var innermostIntersecting = false,                                                                                  // 6582
				sortable = this;                                                                                                   // 6583
                                                                                                                       // 6584
			// Copy over variables that sortable's _intersectsWith uses                                                         // 6585
			sortable.positionAbs = draggable.positionAbs;                                                                       // 6586
			sortable.helperProportions = draggable.helperProportions;                                                           // 6587
			sortable.offset.click = draggable.offset.click;                                                                     // 6588
                                                                                                                       // 6589
			if ( sortable._intersectsWith( sortable.containerCache ) ) {                                                        // 6590
				innermostIntersecting = true;                                                                                      // 6591
                                                                                                                       // 6592
				$.each( draggable.sortables, function() {                                                                          // 6593
					// Copy over variables that sortable's _intersectsWith uses                                                       // 6594
					this.positionAbs = draggable.positionAbs;                                                                         // 6595
					this.helperProportions = draggable.helperProportions;                                                             // 6596
					this.offset.click = draggable.offset.click;                                                                       // 6597
                                                                                                                       // 6598
					if ( this !== sortable &&                                                                                         // 6599
							this._intersectsWith( this.containerCache ) &&                                                                  // 6600
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {                                                      // 6601
						innermostIntersecting = false;                                                                                   // 6602
					}                                                                                                                 // 6603
                                                                                                                       // 6604
					return innermostIntersecting;                                                                                     // 6605
				});                                                                                                                // 6606
			}                                                                                                                   // 6607
                                                                                                                       // 6608
			if ( innermostIntersecting ) {                                                                                      // 6609
				// If it intersects, we use a little isOver variable and set it once,                                              // 6610
				// so that the move-in stuff gets fired only once.                                                                 // 6611
				if ( !sortable.isOver ) {                                                                                          // 6612
					sortable.isOver = 1;                                                                                              // 6613
                                                                                                                       // 6614
					sortable.currentItem = ui.helper                                                                                  // 6615
						.appendTo( sortable.element )                                                                                    // 6616
						.data( "ui-sortable-item", true );                                                                               // 6617
                                                                                                                       // 6618
					// Store helper option to later restore it                                                                        // 6619
					sortable.options._helper = sortable.options.helper;                                                               // 6620
                                                                                                                       // 6621
					sortable.options.helper = function() {                                                                            // 6622
						return ui.helper[ 0 ];                                                                                           // 6623
					};                                                                                                                // 6624
                                                                                                                       // 6625
					// Fire the start events of the sortable with our passed browser event,                                           // 6626
					// and our own helper (so it doesn't create a new one)                                                            // 6627
					event.target = sortable.currentItem[ 0 ];                                                                         // 6628
					sortable._mouseCapture( event, true );                                                                            // 6629
					sortable._mouseStart( event, true, true );                                                                        // 6630
                                                                                                                       // 6631
					// Because the browser event is way off the new appended portlet,                                                 // 6632
					// modify necessary variables to reflect the changes                                                              // 6633
					sortable.offset.click.top = draggable.offset.click.top;                                                           // 6634
					sortable.offset.click.left = draggable.offset.click.left;                                                         // 6635
					sortable.offset.parent.left -= draggable.offset.parent.left -                                                     // 6636
						sortable.offset.parent.left;                                                                                     // 6637
					sortable.offset.parent.top -= draggable.offset.parent.top -                                                       // 6638
						sortable.offset.parent.top;                                                                                      // 6639
                                                                                                                       // 6640
					draggable._trigger( "toSortable", event );                                                                        // 6641
                                                                                                                       // 6642
					// Inform draggable that the helper is in a valid drop zone,                                                      // 6643
					// used solely in the revert option to handle "valid/invalid".                                                    // 6644
					draggable.dropped = sortable.element;                                                                             // 6645
                                                                                                                       // 6646
					// Need to refreshPositions of all sortables in the case that                                                     // 6647
					// adding to one sortable changes the location of the other sortables (#9675)                                     // 6648
					$.each( draggable.sortables, function() {                                                                         // 6649
						this.refreshPositions();                                                                                         // 6650
					});                                                                                                               // 6651
                                                                                                                       // 6652
					// hack so receive/update callbacks work (mostly)                                                                 // 6653
					draggable.currentItem = draggable.element;                                                                        // 6654
					sortable.fromOutside = draggable;                                                                                 // 6655
				}                                                                                                                  // 6656
                                                                                                                       // 6657
				if ( sortable.currentItem ) {                                                                                      // 6658
					sortable._mouseDrag( event );                                                                                     // 6659
					// Copy the sortable's position because the draggable's can potentially reflect                                   // 6660
					// a relative position, while sortable is always absolute, which the dragged                                      // 6661
					// element has now become. (#8809)                                                                                // 6662
					ui.position = sortable.position;                                                                                  // 6663
				}                                                                                                                  // 6664
			} else {                                                                                                            // 6665
				// If it doesn't intersect with the sortable, and it intersected before,                                           // 6666
				// we fake the drag stop of the sortable, but make sure it doesn't remove                                          // 6667
				// the helper by using cancelHelperRemoval.                                                                        // 6668
				if ( sortable.isOver ) {                                                                                           // 6669
                                                                                                                       // 6670
					sortable.isOver = 0;                                                                                              // 6671
					sortable.cancelHelperRemoval = true;                                                                              // 6672
                                                                                                                       // 6673
					// Calling sortable's mouseStop would trigger a revert,                                                           // 6674
					// so revert must be temporarily false until after mouseStop is called.                                           // 6675
					sortable.options._revert = sortable.options.revert;                                                               // 6676
					sortable.options.revert = false;                                                                                  // 6677
                                                                                                                       // 6678
					sortable._trigger( "out", event, sortable._uiHash( sortable ) );                                                  // 6679
					sortable._mouseStop( event, true );                                                                               // 6680
                                                                                                                       // 6681
					// restore sortable behaviors that were modfied                                                                   // 6682
					// when the draggable entered the sortable area (#9481)                                                           // 6683
					sortable.options.revert = sortable.options._revert;                                                               // 6684
					sortable.options.helper = sortable.options._helper;                                                               // 6685
                                                                                                                       // 6686
					if ( sortable.placeholder ) {                                                                                     // 6687
						sortable.placeholder.remove();                                                                                   // 6688
					}                                                                                                                 // 6689
                                                                                                                       // 6690
					// Recalculate the draggable's offset considering the sortable                                                    // 6691
					// may have modified them in unexpected ways (#8809)                                                              // 6692
					draggable._refreshOffsets( event );                                                                               // 6693
					ui.position = draggable._generatePosition( event, true );                                                         // 6694
                                                                                                                       // 6695
					draggable._trigger( "fromSortable", event );                                                                      // 6696
                                                                                                                       // 6697
					// Inform draggable that the helper is no longer in a valid drop zone                                             // 6698
					draggable.dropped = false;                                                                                        // 6699
                                                                                                                       // 6700
					// Need to refreshPositions of all sortables just in case removing                                                // 6701
					// from one sortable changes the location of other sortables (#9675)                                              // 6702
					$.each( draggable.sortables, function() {                                                                         // 6703
						this.refreshPositions();                                                                                         // 6704
					});                                                                                                               // 6705
				}                                                                                                                  // 6706
			}                                                                                                                   // 6707
		});                                                                                                                  // 6708
	}                                                                                                                     // 6709
});                                                                                                                    // 6710
                                                                                                                       // 6711
$.ui.plugin.add("draggable", "cursor", {                                                                               // 6712
	start: function( event, ui, instance ) {                                                                              // 6713
		var t = $( "body" ),                                                                                                 // 6714
			o = instance.options;                                                                                               // 6715
                                                                                                                       // 6716
		if (t.css("cursor")) {                                                                                               // 6717
			o._cursor = t.css("cursor");                                                                                        // 6718
		}                                                                                                                    // 6719
		t.css("cursor", o.cursor);                                                                                           // 6720
	},                                                                                                                    // 6721
	stop: function( event, ui, instance ) {                                                                               // 6722
		var o = instance.options;                                                                                            // 6723
		if (o._cursor) {                                                                                                     // 6724
			$("body").css("cursor", o._cursor);                                                                                 // 6725
		}                                                                                                                    // 6726
	}                                                                                                                     // 6727
});                                                                                                                    // 6728
                                                                                                                       // 6729
$.ui.plugin.add("draggable", "opacity", {                                                                              // 6730
	start: function( event, ui, instance ) {                                                                              // 6731
		var t = $( ui.helper ),                                                                                              // 6732
			o = instance.options;                                                                                               // 6733
		if (t.css("opacity")) {                                                                                              // 6734
			o._opacity = t.css("opacity");                                                                                      // 6735
		}                                                                                                                    // 6736
		t.css("opacity", o.opacity);                                                                                         // 6737
	},                                                                                                                    // 6738
	stop: function( event, ui, instance ) {                                                                               // 6739
		var o = instance.options;                                                                                            // 6740
		if (o._opacity) {                                                                                                    // 6741
			$(ui.helper).css("opacity", o._opacity);                                                                            // 6742
		}                                                                                                                    // 6743
	}                                                                                                                     // 6744
});                                                                                                                    // 6745
                                                                                                                       // 6746
$.ui.plugin.add("draggable", "scroll", {                                                                               // 6747
	start: function( event, ui, i ) {                                                                                     // 6748
		if ( !i.scrollParentNotHidden ) {                                                                                    // 6749
			i.scrollParentNotHidden = i.helper.scrollParent( false );                                                           // 6750
		}                                                                                                                    // 6751
                                                                                                                       // 6752
		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {         // 6753
			i.overflowOffset = i.scrollParentNotHidden.offset();                                                                // 6754
		}                                                                                                                    // 6755
	},                                                                                                                    // 6756
	drag: function( event, ui, i  ) {                                                                                     // 6757
                                                                                                                       // 6758
		var o = i.options,                                                                                                   // 6759
			scrolled = false,                                                                                                   // 6760
			scrollParent = i.scrollParentNotHidden[ 0 ],                                                                        // 6761
			document = i.document[ 0 ];                                                                                         // 6762
                                                                                                                       // 6763
		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {                                                // 6764
			if ( !o.axis || o.axis !== "x" ) {                                                                                  // 6765
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {                  // 6766
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;                                       // 6767
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {                                           // 6768
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;                                       // 6769
				}                                                                                                                  // 6770
			}                                                                                                                   // 6771
                                                                                                                       // 6772
			if ( !o.axis || o.axis !== "y" ) {                                                                                  // 6773
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {                  // 6774
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;                                     // 6775
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {                                          // 6776
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;                                     // 6777
				}                                                                                                                  // 6778
			}                                                                                                                   // 6779
                                                                                                                       // 6780
		} else {                                                                                                             // 6781
                                                                                                                       // 6782
			if (!o.axis || o.axis !== "x") {                                                                                    // 6783
				if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {                                                 // 6784
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);                                        // 6785
				} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {                   // 6786
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);                                        // 6787
				}                                                                                                                  // 6788
			}                                                                                                                   // 6789
                                                                                                                       // 6790
			if (!o.axis || o.axis !== "y") {                                                                                    // 6791
				if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {                                                // 6792
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);                                      // 6793
				} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {                   // 6794
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);                                      // 6795
				}                                                                                                                  // 6796
			}                                                                                                                   // 6797
                                                                                                                       // 6798
		}                                                                                                                    // 6799
                                                                                                                       // 6800
		if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {                                                      // 6801
			$.ui.ddmanager.prepareOffsets(i, event);                                                                            // 6802
		}                                                                                                                    // 6803
                                                                                                                       // 6804
	}                                                                                                                     // 6805
});                                                                                                                    // 6806
                                                                                                                       // 6807
$.ui.plugin.add("draggable", "snap", {                                                                                 // 6808
	start: function( event, ui, i ) {                                                                                     // 6809
                                                                                                                       // 6810
		var o = i.options;                                                                                                   // 6811
                                                                                                                       // 6812
		i.snapElements = [];                                                                                                 // 6813
                                                                                                                       // 6814
		$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {              // 6815
			var $t = $(this),                                                                                                   // 6816
				$o = $t.offset();                                                                                                  // 6817
			if (this !== i.element[0]) {                                                                                        // 6818
				i.snapElements.push({                                                                                              // 6819
					item: this,                                                                                                       // 6820
					width: $t.outerWidth(), height: $t.outerHeight(),                                                                 // 6821
					top: $o.top, left: $o.left                                                                                        // 6822
				});                                                                                                                // 6823
			}                                                                                                                   // 6824
		});                                                                                                                  // 6825
                                                                                                                       // 6826
	},                                                                                                                    // 6827
	drag: function( event, ui, inst ) {                                                                                   // 6828
                                                                                                                       // 6829
		var ts, bs, ls, rs, l, r, t, b, i, first,                                                                            // 6830
			o = inst.options,                                                                                                   // 6831
			d = o.snapTolerance,                                                                                                // 6832
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,                                                        // 6833
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;                                                        // 6834
                                                                                                                       // 6835
		for (i = inst.snapElements.length - 1; i >= 0; i--){                                                                 // 6836
                                                                                                                       // 6837
			l = inst.snapElements[i].left - inst.margins.left;                                                                  // 6838
			r = l + inst.snapElements[i].width;                                                                                 // 6839
			t = inst.snapElements[i].top - inst.margins.top;                                                                    // 6840
			b = t + inst.snapElements[i].height;                                                                                // 6841
                                                                                                                       // 6842
			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if (inst.snapElements[i].snapping) {                                                                               // 6844
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}                                                                                                                  // 6846
				inst.snapElements[i].snapping = false;                                                                             // 6847
				continue;                                                                                                          // 6848
			}                                                                                                                   // 6849
                                                                                                                       // 6850
			if (o.snapMode !== "inner") {                                                                                       // 6851
				ts = Math.abs(t - y2) <= d;                                                                                        // 6852
				bs = Math.abs(b - y1) <= d;                                                                                        // 6853
				ls = Math.abs(l - x2) <= d;                                                                                        // 6854
				rs = Math.abs(r - x1) <= d;                                                                                        // 6855
				if (ts) {                                                                                                          // 6856
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top;   // 6857
				}                                                                                                                  // 6858
				if (bs) {                                                                                                          // 6859
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top;                                   // 6860
				}                                                                                                                  // 6861
				if (ls) {                                                                                                          // 6862
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left;  // 6863
				}                                                                                                                  // 6864
				if (rs) {                                                                                                          // 6865
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left;                                 // 6866
				}                                                                                                                  // 6867
			}                                                                                                                   // 6868
                                                                                                                       // 6869
			first = (ts || bs || ls || rs);                                                                                     // 6870
                                                                                                                       // 6871
			if (o.snapMode !== "outer") {                                                                                       // 6872
				ts = Math.abs(t - y1) <= d;                                                                                        // 6873
				bs = Math.abs(b - y2) <= d;                                                                                        // 6874
				ls = Math.abs(l - x1) <= d;                                                                                        // 6875
				rs = Math.abs(r - x2) <= d;                                                                                        // 6876
				if (ts) {                                                                                                          // 6877
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top;                                   // 6878
				}                                                                                                                  // 6879
				if (bs) {                                                                                                          // 6880
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top;   // 6881
				}                                                                                                                  // 6882
				if (ls) {                                                                                                          // 6883
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left;                                 // 6884
				}                                                                                                                  // 6885
				if (rs) {                                                                                                          // 6886
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left;  // 6887
				}                                                                                                                  // 6888
			}                                                                                                                   // 6889
                                                                                                                       // 6890
			if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {                                            // 6891
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}                                                                                                                   // 6893
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);                                                    // 6894
                                                                                                                       // 6895
		}                                                                                                                    // 6896
                                                                                                                       // 6897
	}                                                                                                                     // 6898
});                                                                                                                    // 6899
                                                                                                                       // 6900
$.ui.plugin.add("draggable", "stack", {                                                                                // 6901
	start: function( event, ui, instance ) {                                                                              // 6902
		var min,                                                                                                             // 6903
			o = instance.options,                                                                                               // 6904
			group = $.makeArray($(o.stack)).sort(function(a, b) {                                                               // 6905
				return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);                          // 6906
			});                                                                                                                 // 6907
                                                                                                                       // 6908
		if (!group.length) { return; }                                                                                       // 6909
                                                                                                                       // 6910
		min = parseInt($(group[0]).css("zIndex"), 10) || 0;                                                                  // 6911
		$(group).each(function(i) {                                                                                          // 6912
			$(this).css("zIndex", min + i);                                                                                     // 6913
		});                                                                                                                  // 6914
		this.css("zIndex", (min + group.length));                                                                            // 6915
	}                                                                                                                     // 6916
});                                                                                                                    // 6917
                                                                                                                       // 6918
$.ui.plugin.add("draggable", "zIndex", {                                                                               // 6919
	start: function( event, ui, instance ) {                                                                              // 6920
		var t = $( ui.helper ),                                                                                              // 6921
			o = instance.options;                                                                                               // 6922
                                                                                                                       // 6923
		if (t.css("zIndex")) {                                                                                               // 6924
			o._zIndex = t.css("zIndex");                                                                                        // 6925
		}                                                                                                                    // 6926
		t.css("zIndex", o.zIndex);                                                                                           // 6927
	},                                                                                                                    // 6928
	stop: function( event, ui, instance ) {                                                                               // 6929
		var o = instance.options;                                                                                            // 6930
                                                                                                                       // 6931
		if (o._zIndex) {                                                                                                     // 6932
			$(ui.helper).css("zIndex", o._zIndex);                                                                              // 6933
		}                                                                                                                    // 6934
	}                                                                                                                     // 6935
});                                                                                                                    // 6936
                                                                                                                       // 6937
var draggable = $.ui.draggable;                                                                                        // 6938
                                                                                                                       // 6939
                                                                                                                       // 6940
/*!                                                                                                                    // 6941
 * jQuery UI Resizable 1.11.2                                                                                          // 6942
 * http://jqueryui.com                                                                                                 // 6943
 *                                                                                                                     // 6944
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 6945
 * Released under the MIT license.                                                                                     // 6946
 * http://jquery.org/license                                                                                           // 6947
 *                                                                                                                     // 6948
 * http://api.jqueryui.com/resizable/                                                                                  // 6949
 */                                                                                                                    // 6950
                                                                                                                       // 6951
                                                                                                                       // 6952
$.widget("ui.resizable", $.ui.mouse, {                                                                                 // 6953
	version: "1.11.2",                                                                                                    // 6954
	widgetEventPrefix: "resize",                                                                                          // 6955
	options: {                                                                                                            // 6956
		alsoResize: false,                                                                                                   // 6957
		animate: false,                                                                                                      // 6958
		animateDuration: "slow",                                                                                             // 6959
		animateEasing: "swing",                                                                                              // 6960
		aspectRatio: false,                                                                                                  // 6961
		autoHide: false,                                                                                                     // 6962
		containment: false,                                                                                                  // 6963
		ghost: false,                                                                                                        // 6964
		grid: false,                                                                                                         // 6965
		handles: "e,s,se",                                                                                                   // 6966
		helper: false,                                                                                                       // 6967
		maxHeight: null,                                                                                                     // 6968
		maxWidth: null,                                                                                                      // 6969
		minHeight: 10,                                                                                                       // 6970
		minWidth: 10,                                                                                                        // 6971
		// See #7960                                                                                                         // 6972
		zIndex: 90,                                                                                                          // 6973
                                                                                                                       // 6974
		// callbacks                                                                                                         // 6975
		resize: null,                                                                                                        // 6976
		start: null,                                                                                                         // 6977
		stop: null                                                                                                           // 6978
	},                                                                                                                    // 6979
                                                                                                                       // 6980
	_num: function( value ) {                                                                                             // 6981
		return parseInt( value, 10 ) || 0;                                                                                   // 6982
	},                                                                                                                    // 6983
                                                                                                                       // 6984
	_isNumber: function( value ) {                                                                                        // 6985
		return !isNaN( parseInt( value, 10 ) );                                                                              // 6986
	},                                                                                                                    // 6987
                                                                                                                       // 6988
	_hasScroll: function( el, a ) {                                                                                       // 6989
                                                                                                                       // 6990
		if ( $( el ).css( "overflow" ) === "hidden") {                                                                       // 6991
			return false;                                                                                                       // 6992
		}                                                                                                                    // 6993
                                                                                                                       // 6994
		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",                                                     // 6995
			has = false;                                                                                                        // 6996
                                                                                                                       // 6997
		if ( el[ scroll ] > 0 ) {                                                                                            // 6998
			return true;                                                                                                        // 6999
		}                                                                                                                    // 7000
                                                                                                                       // 7001
		// TODO: determine which cases actually cause this to happen                                                         // 7002
		// if the element doesn't have the scroll set, see if it's possible to                                               // 7003
		// set the scroll                                                                                                    // 7004
		el[ scroll ] = 1;                                                                                                    // 7005
		has = ( el[ scroll ] > 0 );                                                                                          // 7006
		el[ scroll ] = 0;                                                                                                    // 7007
		return has;                                                                                                          // 7008
	},                                                                                                                    // 7009
                                                                                                                       // 7010
	_create: function() {                                                                                                 // 7011
                                                                                                                       // 7012
		var n, i, handle, axis, hname,                                                                                       // 7013
			that = this,                                                                                                        // 7014
			o = this.options;                                                                                                   // 7015
		this.element.addClass("ui-resizable");                                                                               // 7016
                                                                                                                       // 7017
		$.extend(this, {                                                                                                     // 7018
			_aspectRatio: !!(o.aspectRatio),                                                                                    // 7019
			aspectRatio: o.aspectRatio,                                                                                         // 7020
			originalElement: this.element,                                                                                      // 7021
			_proportionallyResizeElements: [],                                                                                  // 7022
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null                                // 7023
		});                                                                                                                  // 7024
                                                                                                                       // 7025
		// Wrap the element if it cannot hold child nodes                                                                    // 7026
		if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {                                    // 7027
                                                                                                                       // 7028
			this.element.wrap(                                                                                                  // 7029
				$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({                                                // 7030
					position: this.element.css("position"),                                                                           // 7031
					width: this.element.outerWidth(),                                                                                 // 7032
					height: this.element.outerHeight(),                                                                               // 7033
					top: this.element.css("top"),                                                                                     // 7034
					left: this.element.css("left")                                                                                    // 7035
				})                                                                                                                 // 7036
			);                                                                                                                  // 7037
                                                                                                                       // 7038
			this.element = this.element.parent().data(                                                                          // 7039
				"ui-resizable", this.element.resizable( "instance" )                                                               // 7040
			);                                                                                                                  // 7041
                                                                                                                       // 7042
			this.elementIsWrapper = true;                                                                                       // 7043
                                                                                                                       // 7044
			this.element.css({                                                                                                  // 7045
				marginLeft: this.originalElement.css("marginLeft"),                                                                // 7046
				marginTop: this.originalElement.css("marginTop"),                                                                  // 7047
				marginRight: this.originalElement.css("marginRight"),                                                              // 7048
				marginBottom: this.originalElement.css("marginBottom")                                                             // 7049
			});                                                                                                                 // 7050
			this.originalElement.css({                                                                                          // 7051
				marginLeft: 0,                                                                                                     // 7052
				marginTop: 0,                                                                                                      // 7053
				marginRight: 0,                                                                                                    // 7054
				marginBottom: 0                                                                                                    // 7055
			});                                                                                                                 // 7056
			// support: Safari                                                                                                  // 7057
			// Prevent Safari textarea resize                                                                                   // 7058
			this.originalResizeStyle = this.originalElement.css("resize");                                                      // 7059
			this.originalElement.css("resize", "none");                                                                         // 7060
                                                                                                                       // 7061
			this._proportionallyResizeElements.push( this.originalElement.css({                                                 // 7062
				position: "static",                                                                                                // 7063
				zoom: 1,                                                                                                           // 7064
				display: "block"                                                                                                   // 7065
			}) );                                                                                                               // 7066
                                                                                                                       // 7067
			// support: IE9                                                                                                     // 7068
			// avoid IE jump (hard set the margin)                                                                              // 7069
			this.originalElement.css({ margin: this.originalElement.css("margin") });                                           // 7070
                                                                                                                       // 7071
			this._proportionallyResize();                                                                                       // 7072
		}                                                                                                                    // 7073
                                                                                                                       // 7074
		this.handles = o.handles ||                                                                                          // 7075
			( !$(".ui-resizable-handle", this.element).length ?                                                                 // 7076
				"e,s,se" : {                                                                                                       // 7077
					n: ".ui-resizable-n",                                                                                             // 7078
					e: ".ui-resizable-e",                                                                                             // 7079
					s: ".ui-resizable-s",                                                                                             // 7080
					w: ".ui-resizable-w",                                                                                             // 7081
					se: ".ui-resizable-se",                                                                                           // 7082
					sw: ".ui-resizable-sw",                                                                                           // 7083
					ne: ".ui-resizable-ne",                                                                                           // 7084
					nw: ".ui-resizable-nw"                                                                                            // 7085
				} );                                                                                                               // 7086
                                                                                                                       // 7087
		if (this.handles.constructor === String) {                                                                           // 7088
                                                                                                                       // 7089
			if ( this.handles === "all") {                                                                                      // 7090
				this.handles = "n,e,s,w,se,sw,ne,nw";                                                                              // 7091
			}                                                                                                                   // 7092
                                                                                                                       // 7093
			n = this.handles.split(",");                                                                                        // 7094
			this.handles = {};                                                                                                  // 7095
                                                                                                                       // 7096
			for (i = 0; i < n.length; i++) {                                                                                    // 7097
                                                                                                                       // 7098
				handle = $.trim(n[i]);                                                                                             // 7099
				hname = "ui-resizable-" + handle;                                                                                  // 7100
				axis = $("<div class='ui-resizable-handle " + hname + "'></div>");                                                 // 7101
                                                                                                                       // 7102
				axis.css({ zIndex: o.zIndex });                                                                                    // 7103
                                                                                                                       // 7104
				// TODO : What's going on here?                                                                                    // 7105
				if ("se" === handle) {                                                                                             // 7106
					axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");                                                           // 7107
				}                                                                                                                  // 7108
                                                                                                                       // 7109
				this.handles[handle] = ".ui-resizable-" + handle;                                                                  // 7110
				this.element.append(axis);                                                                                         // 7111
			}                                                                                                                   // 7112
                                                                                                                       // 7113
		}                                                                                                                    // 7114
                                                                                                                       // 7115
		this._renderAxis = function(target) {                                                                                // 7116
                                                                                                                       // 7117
			var i, axis, padPos, padWrapper;                                                                                    // 7118
                                                                                                                       // 7119
			target = target || this.element;                                                                                    // 7120
                                                                                                                       // 7121
			for (i in this.handles) {                                                                                           // 7122
                                                                                                                       // 7123
				if (this.handles[i].constructor === String) {                                                                      // 7124
					this.handles[i] = this.element.children( this.handles[ i ] ).first().show();                                      // 7125
				}                                                                                                                  // 7126
                                                                                                                       // 7127
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {            // 7128
                                                                                                                       // 7129
					axis = $(this.handles[i], this.element);                                                                          // 7130
                                                                                                                       // 7131
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();                                  // 7132
                                                                                                                       // 7133
					padPos = [ "padding",                                                                                             // 7134
						/ne|nw|n/.test(i) ? "Top" :                                                                                      // 7135
						/se|sw|s/.test(i) ? "Bottom" :                                                                                   // 7136
						/^e$/.test(i) ? "Right" : "Left" ].join("");                                                                     // 7137
                                                                                                                       // 7138
					target.css(padPos, padWrapper);                                                                                   // 7139
                                                                                                                       // 7140
					this._proportionallyResize();                                                                                     // 7141
                                                                                                                       // 7142
				}                                                                                                                  // 7143
                                                                                                                       // 7144
				// TODO: What's that good for? There's not anything to be executed left                                            // 7145
				if (!$(this.handles[i]).length) {                                                                                  // 7146
					continue;                                                                                                         // 7147
				}                                                                                                                  // 7148
			}                                                                                                                   // 7149
		};                                                                                                                   // 7150
                                                                                                                       // 7151
		// TODO: make renderAxis a prototype function                                                                        // 7152
		this._renderAxis(this.element);                                                                                      // 7153
                                                                                                                       // 7154
		this._handles = $(".ui-resizable-handle", this.element)                                                              // 7155
			.disableSelection();                                                                                                // 7156
                                                                                                                       // 7157
		this._handles.mouseover(function() {                                                                                 // 7158
			if (!that.resizing) {                                                                                               // 7159
				if (this.className) {                                                                                              // 7160
					axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);                                               // 7161
				}                                                                                                                  // 7162
				that.axis = axis && axis[1] ? axis[1] : "se";                                                                      // 7163
			}                                                                                                                   // 7164
		});                                                                                                                  // 7165
                                                                                                                       // 7166
		if (o.autoHide) {                                                                                                    // 7167
			this._handles.hide();                                                                                               // 7168
			$(this.element)                                                                                                     // 7169
				.addClass("ui-resizable-autohide")                                                                                 // 7170
				.mouseenter(function() {                                                                                           // 7171
					if (o.disabled) {                                                                                                 // 7172
						return;                                                                                                          // 7173
					}                                                                                                                 // 7174
					$(this).removeClass("ui-resizable-autohide");                                                                     // 7175
					that._handles.show();                                                                                             // 7176
				})                                                                                                                 // 7177
				.mouseleave(function() {                                                                                           // 7178
					if (o.disabled) {                                                                                                 // 7179
						return;                                                                                                          // 7180
					}                                                                                                                 // 7181
					if (!that.resizing) {                                                                                             // 7182
						$(this).addClass("ui-resizable-autohide");                                                                       // 7183
						that._handles.hide();                                                                                            // 7184
					}                                                                                                                 // 7185
				});                                                                                                                // 7186
		}                                                                                                                    // 7187
                                                                                                                       // 7188
		this._mouseInit();                                                                                                   // 7189
                                                                                                                       // 7190
	},                                                                                                                    // 7191
                                                                                                                       // 7192
	_destroy: function() {                                                                                                // 7193
                                                                                                                       // 7194
		this._mouseDestroy();                                                                                                // 7195
                                                                                                                       // 7196
		var wrapper,                                                                                                         // 7197
			_destroy = function(exp) {                                                                                          // 7198
				$(exp)                                                                                                             // 7199
					.removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")                                          // 7200
					.removeData("resizable")                                                                                          // 7201
					.removeData("ui-resizable")                                                                                       // 7202
					.unbind(".resizable")                                                                                             // 7203
					.find(".ui-resizable-handle")                                                                                     // 7204
						.remove();                                                                                                       // 7205
			};                                                                                                                  // 7206
                                                                                                                       // 7207
		// TODO: Unwrap at same DOM position                                                                                 // 7208
		if (this.elementIsWrapper) {                                                                                         // 7209
			_destroy(this.element);                                                                                             // 7210
			wrapper = this.element;                                                                                             // 7211
			this.originalElement.css({                                                                                          // 7212
				position: wrapper.css("position"),                                                                                 // 7213
				width: wrapper.outerWidth(),                                                                                       // 7214
				height: wrapper.outerHeight(),                                                                                     // 7215
				top: wrapper.css("top"),                                                                                           // 7216
				left: wrapper.css("left")                                                                                          // 7217
			}).insertAfter( wrapper );                                                                                          // 7218
			wrapper.remove();                                                                                                   // 7219
		}                                                                                                                    // 7220
                                                                                                                       // 7221
		this.originalElement.css("resize", this.originalResizeStyle);                                                        // 7222
		_destroy(this.originalElement);                                                                                      // 7223
                                                                                                                       // 7224
		return this;                                                                                                         // 7225
	},                                                                                                                    // 7226
                                                                                                                       // 7227
	_mouseCapture: function(event) {                                                                                      // 7228
		var i, handle,                                                                                                       // 7229
			capture = false;                                                                                                    // 7230
                                                                                                                       // 7231
		for (i in this.handles) {                                                                                            // 7232
			handle = $(this.handles[i])[0];                                                                                     // 7233
			if (handle === event.target || $.contains(handle, event.target)) {                                                  // 7234
				capture = true;                                                                                                    // 7235
			}                                                                                                                   // 7236
		}                                                                                                                    // 7237
                                                                                                                       // 7238
		return !this.options.disabled && capture;                                                                            // 7239
	},                                                                                                                    // 7240
                                                                                                                       // 7241
	_mouseStart: function(event) {                                                                                        // 7242
                                                                                                                       // 7243
		var curleft, curtop, cursor,                                                                                         // 7244
			o = this.options,                                                                                                   // 7245
			el = this.element;                                                                                                  // 7246
                                                                                                                       // 7247
		this.resizing = true;                                                                                                // 7248
                                                                                                                       // 7249
		this._renderProxy();                                                                                                 // 7250
                                                                                                                       // 7251
		curleft = this._num(this.helper.css("left"));                                                                        // 7252
		curtop = this._num(this.helper.css("top"));                                                                          // 7253
                                                                                                                       // 7254
		if (o.containment) {                                                                                                 // 7255
			curleft += $(o.containment).scrollLeft() || 0;                                                                      // 7256
			curtop += $(o.containment).scrollTop() || 0;                                                                        // 7257
		}                                                                                                                    // 7258
                                                                                                                       // 7259
		this.offset = this.helper.offset();                                                                                  // 7260
		this.position = { left: curleft, top: curtop };                                                                      // 7261
                                                                                                                       // 7262
		this.size = this._helper ? {                                                                                         // 7263
				width: this.helper.width(),                                                                                        // 7264
				height: this.helper.height()                                                                                       // 7265
			} : {                                                                                                               // 7266
				width: el.width(),                                                                                                 // 7267
				height: el.height()                                                                                                // 7268
			};                                                                                                                  // 7269
                                                                                                                       // 7270
		this.originalSize = this._helper ? {                                                                                 // 7271
				width: el.outerWidth(),                                                                                            // 7272
				height: el.outerHeight()                                                                                           // 7273
			} : {                                                                                                               // 7274
				width: el.width(),                                                                                                 // 7275
				height: el.height()                                                                                                // 7276
			};                                                                                                                  // 7277
                                                                                                                       // 7278
		this.sizeDiff = {                                                                                                    // 7279
			width: el.outerWidth() - el.width(),                                                                                // 7280
			height: el.outerHeight() - el.height()                                                                              // 7281
		};                                                                                                                   // 7282
                                                                                                                       // 7283
		this.originalPosition = { left: curleft, top: curtop };                                                              // 7284
		this.originalMousePosition = { left: event.pageX, top: event.pageY };                                                // 7285
                                                                                                                       // 7286
		this.aspectRatio = (typeof o.aspectRatio === "number") ?                                                             // 7287
			o.aspectRatio :                                                                                                     // 7288
			((this.originalSize.width / this.originalSize.height) || 1);                                                        // 7289
                                                                                                                       // 7290
		cursor = $(".ui-resizable-" + this.axis).css("cursor");                                                              // 7291
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);                                         // 7292
                                                                                                                       // 7293
		el.addClass("ui-resizable-resizing");                                                                                // 7294
		this._propagate("start", event);                                                                                     // 7295
		return true;                                                                                                         // 7296
	},                                                                                                                    // 7297
                                                                                                                       // 7298
	_mouseDrag: function(event) {                                                                                         // 7299
                                                                                                                       // 7300
		var data, props,                                                                                                     // 7301
			smp = this.originalMousePosition,                                                                                   // 7302
			a = this.axis,                                                                                                      // 7303
			dx = (event.pageX - smp.left) || 0,                                                                                 // 7304
			dy = (event.pageY - smp.top) || 0,                                                                                  // 7305
			trigger = this._change[a];                                                                                          // 7306
                                                                                                                       // 7307
		this._updatePrevProperties();                                                                                        // 7308
                                                                                                                       // 7309
		if (!trigger) {                                                                                                      // 7310
			return false;                                                                                                       // 7311
		}                                                                                                                    // 7312
                                                                                                                       // 7313
		data = trigger.apply(this, [ event, dx, dy ]);                                                                       // 7314
                                                                                                                       // 7315
		this._updateVirtualBoundaries(event.shiftKey);                                                                       // 7316
		if (this._aspectRatio || event.shiftKey) {                                                                           // 7317
			data = this._updateRatio(data, event);                                                                              // 7318
		}                                                                                                                    // 7319
                                                                                                                       // 7320
		data = this._respectSize(data, event);                                                                               // 7321
                                                                                                                       // 7322
		this._updateCache(data);                                                                                             // 7323
                                                                                                                       // 7324
		this._propagate("resize", event);                                                                                    // 7325
                                                                                                                       // 7326
		props = this._applyChanges();                                                                                        // 7327
                                                                                                                       // 7328
		if ( !this._helper && this._proportionallyResizeElements.length ) {                                                  // 7329
			this._proportionallyResize();                                                                                       // 7330
		}                                                                                                                    // 7331
                                                                                                                       // 7332
		if ( !$.isEmptyObject( props ) ) {                                                                                   // 7333
			this._updatePrevProperties();                                                                                       // 7334
			this._trigger( "resize", event, this.ui() );                                                                        // 7335
			this._applyChanges();                                                                                               // 7336
		}                                                                                                                    // 7337
                                                                                                                       // 7338
		return false;                                                                                                        // 7339
	},                                                                                                                    // 7340
                                                                                                                       // 7341
	_mouseStop: function(event) {                                                                                         // 7342
                                                                                                                       // 7343
		this.resizing = false;                                                                                               // 7344
		var pr, ista, soffseth, soffsetw, s, left, top,                                                                      // 7345
			o = this.options, that = this;                                                                                      // 7346
                                                                                                                       // 7347
		if (this._helper) {                                                                                                  // 7348
                                                                                                                       // 7349
			pr = this._proportionallyResizeElements;                                                                            // 7350
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);                                                             // 7351
			soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;                                       // 7352
			soffsetw = ista ? 0 : that.sizeDiff.width;                                                                          // 7353
                                                                                                                       // 7354
			s = {                                                                                                               // 7355
				width: (that.helper.width()  - soffsetw),                                                                          // 7356
				height: (that.helper.height() - soffseth)                                                                          // 7357
			};                                                                                                                  // 7358
			left = (parseInt(that.element.css("left"), 10) +                                                                    // 7359
				(that.position.left - that.originalPosition.left)) || null;                                                        // 7360
			top = (parseInt(that.element.css("top"), 10) +                                                                      // 7361
				(that.position.top - that.originalPosition.top)) || null;                                                          // 7362
                                                                                                                       // 7363
			if (!o.animate) {                                                                                                   // 7364
				this.element.css($.extend(s, { top: top, left: left }));                                                           // 7365
			}                                                                                                                   // 7366
                                                                                                                       // 7367
			that.helper.height(that.size.height);                                                                               // 7368
			that.helper.width(that.size.width);                                                                                 // 7369
                                                                                                                       // 7370
			if (this._helper && !o.animate) {                                                                                   // 7371
				this._proportionallyResize();                                                                                      // 7372
			}                                                                                                                   // 7373
		}                                                                                                                    // 7374
                                                                                                                       // 7375
		$("body").css("cursor", "auto");                                                                                     // 7376
                                                                                                                       // 7377
		this.element.removeClass("ui-resizable-resizing");                                                                   // 7378
                                                                                                                       // 7379
		this._propagate("stop", event);                                                                                      // 7380
                                                                                                                       // 7381
		if (this._helper) {                                                                                                  // 7382
			this.helper.remove();                                                                                               // 7383
		}                                                                                                                    // 7384
                                                                                                                       // 7385
		return false;                                                                                                        // 7386
                                                                                                                       // 7387
	},                                                                                                                    // 7388
                                                                                                                       // 7389
	_updatePrevProperties: function() {                                                                                   // 7390
		this.prevPosition = {                                                                                                // 7391
			top: this.position.top,                                                                                             // 7392
			left: this.position.left                                                                                            // 7393
		};                                                                                                                   // 7394
		this.prevSize = {                                                                                                    // 7395
			width: this.size.width,                                                                                             // 7396
			height: this.size.height                                                                                            // 7397
		};                                                                                                                   // 7398
	},                                                                                                                    // 7399
                                                                                                                       // 7400
	_applyChanges: function() {                                                                                           // 7401
		var props = {};                                                                                                      // 7402
                                                                                                                       // 7403
		if ( this.position.top !== this.prevPosition.top ) {                                                                 // 7404
			props.top = this.position.top + "px";                                                                               // 7405
		}                                                                                                                    // 7406
		if ( this.position.left !== this.prevPosition.left ) {                                                               // 7407
			props.left = this.position.left + "px";                                                                             // 7408
		}                                                                                                                    // 7409
		if ( this.size.width !== this.prevSize.width ) {                                                                     // 7410
			props.width = this.size.width + "px";                                                                               // 7411
		}                                                                                                                    // 7412
		if ( this.size.height !== this.prevSize.height ) {                                                                   // 7413
			props.height = this.size.height + "px";                                                                             // 7414
		}                                                                                                                    // 7415
                                                                                                                       // 7416
		this.helper.css( props );                                                                                            // 7417
                                                                                                                       // 7418
		return props;                                                                                                        // 7419
	},                                                                                                                    // 7420
                                                                                                                       // 7421
	_updateVirtualBoundaries: function(forceAspectRatio) {                                                                // 7422
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,                                                                 // 7423
			o = this.options;                                                                                                   // 7424
                                                                                                                       // 7425
		b = {                                                                                                                // 7426
			minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,                                                              // 7427
			maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,                                                       // 7428
			minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,                                                           // 7429
			maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity                                                     // 7430
		};                                                                                                                   // 7431
                                                                                                                       // 7432
		if (this._aspectRatio || forceAspectRatio) {                                                                         // 7433
			pMinWidth = b.minHeight * this.aspectRatio;                                                                         // 7434
			pMinHeight = b.minWidth / this.aspectRatio;                                                                         // 7435
			pMaxWidth = b.maxHeight * this.aspectRatio;                                                                         // 7436
			pMaxHeight = b.maxWidth / this.aspectRatio;                                                                         // 7437
                                                                                                                       // 7438
			if (pMinWidth > b.minWidth) {                                                                                       // 7439
				b.minWidth = pMinWidth;                                                                                            // 7440
			}                                                                                                                   // 7441
			if (pMinHeight > b.minHeight) {                                                                                     // 7442
				b.minHeight = pMinHeight;                                                                                          // 7443
			}                                                                                                                   // 7444
			if (pMaxWidth < b.maxWidth) {                                                                                       // 7445
				b.maxWidth = pMaxWidth;                                                                                            // 7446
			}                                                                                                                   // 7447
			if (pMaxHeight < b.maxHeight) {                                                                                     // 7448
				b.maxHeight = pMaxHeight;                                                                                          // 7449
			}                                                                                                                   // 7450
		}                                                                                                                    // 7451
		this._vBoundaries = b;                                                                                               // 7452
	},                                                                                                                    // 7453
                                                                                                                       // 7454
	_updateCache: function(data) {                                                                                        // 7455
		this.offset = this.helper.offset();                                                                                  // 7456
		if (this._isNumber(data.left)) {                                                                                     // 7457
			this.position.left = data.left;                                                                                     // 7458
		}                                                                                                                    // 7459
		if (this._isNumber(data.top)) {                                                                                      // 7460
			this.position.top = data.top;                                                                                       // 7461
		}                                                                                                                    // 7462
		if (this._isNumber(data.height)) {                                                                                   // 7463
			this.size.height = data.height;                                                                                     // 7464
		}                                                                                                                    // 7465
		if (this._isNumber(data.width)) {                                                                                    // 7466
			this.size.width = data.width;                                                                                       // 7467
		}                                                                                                                    // 7468
	},                                                                                                                    // 7469
                                                                                                                       // 7470
	_updateRatio: function( data ) {                                                                                      // 7471
                                                                                                                       // 7472
		var cpos = this.position,                                                                                            // 7473
			csize = this.size,                                                                                                  // 7474
			a = this.axis;                                                                                                      // 7475
                                                                                                                       // 7476
		if (this._isNumber(data.height)) {                                                                                   // 7477
			data.width = (data.height * this.aspectRatio);                                                                      // 7478
		} else if (this._isNumber(data.width)) {                                                                             // 7479
			data.height = (data.width / this.aspectRatio);                                                                      // 7480
		}                                                                                                                    // 7481
                                                                                                                       // 7482
		if (a === "sw") {                                                                                                    // 7483
			data.left = cpos.left + (csize.width - data.width);                                                                 // 7484
			data.top = null;                                                                                                    // 7485
		}                                                                                                                    // 7486
		if (a === "nw") {                                                                                                    // 7487
			data.top = cpos.top + (csize.height - data.height);                                                                 // 7488
			data.left = cpos.left + (csize.width - data.width);                                                                 // 7489
		}                                                                                                                    // 7490
                                                                                                                       // 7491
		return data;                                                                                                         // 7492
	},                                                                                                                    // 7493
                                                                                                                       // 7494
	_respectSize: function( data ) {                                                                                      // 7495
                                                                                                                       // 7496
		var o = this._vBoundaries,                                                                                           // 7497
			a = this.axis,                                                                                                      // 7498
			ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),                                     // 7499
			ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),                                 // 7500
			isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width),                                     // 7501
			isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height),                                 // 7502
			dw = this.originalPosition.left + this.originalSize.width,                                                          // 7503
			dh = this.position.top + this.size.height,                                                                          // 7504
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);                                                                     // 7505
		if (isminw) {                                                                                                        // 7506
			data.width = o.minWidth;                                                                                            // 7507
		}                                                                                                                    // 7508
		if (isminh) {                                                                                                        // 7509
			data.height = o.minHeight;                                                                                          // 7510
		}                                                                                                                    // 7511
		if (ismaxw) {                                                                                                        // 7512
			data.width = o.maxWidth;                                                                                            // 7513
		}                                                                                                                    // 7514
		if (ismaxh) {                                                                                                        // 7515
			data.height = o.maxHeight;                                                                                          // 7516
		}                                                                                                                    // 7517
                                                                                                                       // 7518
		if (isminw && cw) {                                                                                                  // 7519
			data.left = dw - o.minWidth;                                                                                        // 7520
		}                                                                                                                    // 7521
		if (ismaxw && cw) {                                                                                                  // 7522
			data.left = dw - o.maxWidth;                                                                                        // 7523
		}                                                                                                                    // 7524
		if (isminh && ch) {                                                                                                  // 7525
			data.top = dh - o.minHeight;                                                                                        // 7526
		}                                                                                                                    // 7527
		if (ismaxh && ch) {                                                                                                  // 7528
			data.top = dh - o.maxHeight;                                                                                        // 7529
		}                                                                                                                    // 7530
                                                                                                                       // 7531
		// Fixing jump error on top/left - bug #2330                                                                         // 7532
		if (!data.width && !data.height && !data.left && data.top) {                                                         // 7533
			data.top = null;                                                                                                    // 7534
		} else if (!data.width && !data.height && !data.top && data.left) {                                                  // 7535
			data.left = null;                                                                                                   // 7536
		}                                                                                                                    // 7537
                                                                                                                       // 7538
		return data;                                                                                                         // 7539
	},                                                                                                                    // 7540
                                                                                                                       // 7541
	_getPaddingPlusBorderDimensions: function( element ) {                                                                // 7542
		var i = 0,                                                                                                           // 7543
			widths = [],                                                                                                        // 7544
			borders = [                                                                                                         // 7545
				element.css( "borderTopWidth" ),                                                                                   // 7546
				element.css( "borderRightWidth" ),                                                                                 // 7547
				element.css( "borderBottomWidth" ),                                                                                // 7548
				element.css( "borderLeftWidth" )                                                                                   // 7549
			],                                                                                                                  // 7550
			paddings = [                                                                                                        // 7551
				element.css( "paddingTop" ),                                                                                       // 7552
				element.css( "paddingRight" ),                                                                                     // 7553
				element.css( "paddingBottom" ),                                                                                    // 7554
				element.css( "paddingLeft" )                                                                                       // 7555
			];                                                                                                                  // 7556
                                                                                                                       // 7557
		for ( ; i < 4; i++ ) {                                                                                               // 7558
			widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );                                                                // 7559
			widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );                                                              // 7560
		}                                                                                                                    // 7561
                                                                                                                       // 7562
		return {                                                                                                             // 7563
			height: widths[ 0 ] + widths[ 2 ],                                                                                  // 7564
			width: widths[ 1 ] + widths[ 3 ]                                                                                    // 7565
		};                                                                                                                   // 7566
	},                                                                                                                    // 7567
                                                                                                                       // 7568
	_proportionallyResize: function() {                                                                                   // 7569
                                                                                                                       // 7570
		if (!this._proportionallyResizeElements.length) {                                                                    // 7571
			return;                                                                                                             // 7572
		}                                                                                                                    // 7573
                                                                                                                       // 7574
		var prel,                                                                                                            // 7575
			i = 0,                                                                                                              // 7576
			element = this.helper || this.element;                                                                              // 7577
                                                                                                                       // 7578
		for ( ; i < this._proportionallyResizeElements.length; i++) {                                                        // 7579
                                                                                                                       // 7580
			prel = this._proportionallyResizeElements[i];                                                                       // 7581
                                                                                                                       // 7582
			// TODO: Seems like a bug to cache this.outerDimensions                                                             // 7583
			// considering that we are in a loop.                                                                               // 7584
			if (!this.outerDimensions) {                                                                                        // 7585
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );                                               // 7586
			}                                                                                                                   // 7587
                                                                                                                       // 7588
			prel.css({                                                                                                          // 7589
				height: (element.height() - this.outerDimensions.height) || 0,                                                     // 7590
				width: (element.width() - this.outerDimensions.width) || 0                                                         // 7591
			});                                                                                                                 // 7592
                                                                                                                       // 7593
		}                                                                                                                    // 7594
                                                                                                                       // 7595
	},                                                                                                                    // 7596
                                                                                                                       // 7597
	_renderProxy: function() {                                                                                            // 7598
                                                                                                                       // 7599
		var el = this.element, o = this.options;                                                                             // 7600
		this.elementOffset = el.offset();                                                                                    // 7601
                                                                                                                       // 7602
		if (this._helper) {                                                                                                  // 7603
                                                                                                                       // 7604
			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");                                             // 7605
                                                                                                                       // 7606
			this.helper.addClass(this._helper).css({                                                                            // 7607
				width: this.element.outerWidth() - 1,                                                                              // 7608
				height: this.element.outerHeight() - 1,                                                                            // 7609
				position: "absolute",                                                                                              // 7610
				left: this.elementOffset.left + "px",                                                                              // 7611
				top: this.elementOffset.top + "px",                                                                                // 7612
				zIndex: ++o.zIndex //TODO: Don't modify option                                                                     // 7613
			});                                                                                                                 // 7614
                                                                                                                       // 7615
			this.helper                                                                                                         // 7616
				.appendTo("body")                                                                                                  // 7617
				.disableSelection();                                                                                               // 7618
                                                                                                                       // 7619
		} else {                                                                                                             // 7620
			this.helper = this.element;                                                                                         // 7621
		}                                                                                                                    // 7622
                                                                                                                       // 7623
	},                                                                                                                    // 7624
                                                                                                                       // 7625
	_change: {                                                                                                            // 7626
		e: function(event, dx) {                                                                                             // 7627
			return { width: this.originalSize.width + dx };                                                                     // 7628
		},                                                                                                                   // 7629
		w: function(event, dx) {                                                                                             // 7630
			var cs = this.originalSize, sp = this.originalPosition;                                                             // 7631
			return { left: sp.left + dx, width: cs.width - dx };                                                                // 7632
		},                                                                                                                   // 7633
		n: function(event, dx, dy) {                                                                                         // 7634
			var cs = this.originalSize, sp = this.originalPosition;                                                             // 7635
			return { top: sp.top + dy, height: cs.height - dy };                                                                // 7636
		},                                                                                                                   // 7637
		s: function(event, dx, dy) {                                                                                         // 7638
			return { height: this.originalSize.height + dy };                                                                   // 7639
		},                                                                                                                   // 7640
		se: function(event, dx, dy) {                                                                                        // 7641
			return $.extend(this._change.s.apply(this, arguments),                                                              // 7642
				this._change.e.apply(this, [ event, dx, dy ]));                                                                    // 7643
		},                                                                                                                   // 7644
		sw: function(event, dx, dy) {                                                                                        // 7645
			return $.extend(this._change.s.apply(this, arguments),                                                              // 7646
				this._change.w.apply(this, [ event, dx, dy ]));                                                                    // 7647
		},                                                                                                                   // 7648
		ne: function(event, dx, dy) {                                                                                        // 7649
			return $.extend(this._change.n.apply(this, arguments),                                                              // 7650
				this._change.e.apply(this, [ event, dx, dy ]));                                                                    // 7651
		},                                                                                                                   // 7652
		nw: function(event, dx, dy) {                                                                                        // 7653
			return $.extend(this._change.n.apply(this, arguments),                                                              // 7654
				this._change.w.apply(this, [ event, dx, dy ]));                                                                    // 7655
		}                                                                                                                    // 7656
	},                                                                                                                    // 7657
                                                                                                                       // 7658
	_propagate: function(n, event) {                                                                                      // 7659
		$.ui.plugin.call(this, n, [ event, this.ui() ]);                                                                     // 7660
		(n !== "resize" && this._trigger(n, event, this.ui()));                                                              // 7661
	},                                                                                                                    // 7662
                                                                                                                       // 7663
	plugins: {},                                                                                                          // 7664
                                                                                                                       // 7665
	ui: function() {                                                                                                      // 7666
		return {                                                                                                             // 7667
			originalElement: this.originalElement,                                                                              // 7668
			element: this.element,                                                                                              // 7669
			helper: this.helper,                                                                                                // 7670
			position: this.position,                                                                                            // 7671
			size: this.size,                                                                                                    // 7672
			originalSize: this.originalSize,                                                                                    // 7673
			originalPosition: this.originalPosition                                                                             // 7674
		};                                                                                                                   // 7675
	}                                                                                                                     // 7676
                                                                                                                       // 7677
});                                                                                                                    // 7678
                                                                                                                       // 7679
/*                                                                                                                     // 7680
 * Resizable Extensions                                                                                                // 7681
 */                                                                                                                    // 7682
                                                                                                                       // 7683
$.ui.plugin.add("resizable", "animate", {                                                                              // 7684
                                                                                                                       // 7685
	stop: function( event ) {                                                                                             // 7686
		var that = $(this).resizable( "instance" ),                                                                          // 7687
			o = that.options,                                                                                                   // 7688
			pr = that._proportionallyResizeElements,                                                                            // 7689
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),                                                             // 7690
			soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,                                       // 7691
			soffsetw = ista ? 0 : that.sizeDiff.width,                                                                          // 7692
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },                             // 7693
			left = (parseInt(that.element.css("left"), 10) +                                                                    // 7694
				(that.position.left - that.originalPosition.left)) || null,                                                        // 7695
			top = (parseInt(that.element.css("top"), 10) +                                                                      // 7696
				(that.position.top - that.originalPosition.top)) || null;                                                          // 7697
                                                                                                                       // 7698
		that.element.animate(                                                                                                // 7699
			$.extend(style, top && left ? { top: top, left: left } : {}), {                                                     // 7700
				duration: o.animateDuration,                                                                                       // 7701
				easing: o.animateEasing,                                                                                           // 7702
				step: function() {                                                                                                 // 7703
                                                                                                                       // 7704
					var data = {                                                                                                      // 7705
						width: parseInt(that.element.css("width"), 10),                                                                  // 7706
						height: parseInt(that.element.css("height"), 10),                                                                // 7707
						top: parseInt(that.element.css("top"), 10),                                                                      // 7708
						left: parseInt(that.element.css("left"), 10)                                                                     // 7709
					};                                                                                                                // 7710
                                                                                                                       // 7711
					if (pr && pr.length) {                                                                                            // 7712
						$(pr[0]).css({ width: data.width, height: data.height });                                                        // 7713
					}                                                                                                                 // 7714
                                                                                                                       // 7715
					// propagating resize, and updating values for each animation step                                                // 7716
					that._updateCache(data);                                                                                          // 7717
					that._propagate("resize", event);                                                                                 // 7718
                                                                                                                       // 7719
				}                                                                                                                  // 7720
			}                                                                                                                   // 7721
		);                                                                                                                   // 7722
	}                                                                                                                     // 7723
                                                                                                                       // 7724
});                                                                                                                    // 7725
                                                                                                                       // 7726
$.ui.plugin.add( "resizable", "containment", {                                                                         // 7727
                                                                                                                       // 7728
	start: function() {                                                                                                   // 7729
		var element, p, co, ch, cw, width, height,                                                                           // 7730
			that = $( this ).resizable( "instance" ),                                                                           // 7731
			o = that.options,                                                                                                   // 7732
			el = that.element,                                                                                                  // 7733
			oc = o.containment,                                                                                                 // 7734
			ce = ( oc instanceof $ ) ? oc.get( 0 ) : ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;                       // 7735
                                                                                                                       // 7736
		if ( !ce ) {                                                                                                         // 7737
			return;                                                                                                             // 7738
		}                                                                                                                    // 7739
                                                                                                                       // 7740
		that.containerElement = $( ce );                                                                                     // 7741
                                                                                                                       // 7742
		if ( /document/.test( oc ) || oc === document ) {                                                                    // 7743
			that.containerOffset = {                                                                                            // 7744
				left: 0,                                                                                                           // 7745
				top: 0                                                                                                             // 7746
			};                                                                                                                  // 7747
			that.containerPosition = {                                                                                          // 7748
				left: 0,                                                                                                           // 7749
				top: 0                                                                                                             // 7750
			};                                                                                                                  // 7751
                                                                                                                       // 7752
			that.parentData = {                                                                                                 // 7753
				element: $( document ),                                                                                            // 7754
				left: 0,                                                                                                           // 7755
				top: 0,                                                                                                            // 7756
				width: $( document ).width(),                                                                                      // 7757
				height: $( document ).height() || document.body.parentNode.scrollHeight                                            // 7758
			};                                                                                                                  // 7759
		} else {                                                                                                             // 7760
			element = $( ce );                                                                                                  // 7761
			p = [];                                                                                                             // 7762
			$([ "Top", "Right", "Left", "Bottom" ]).each(function( i, name ) {                                                  // 7763
				p[ i ] = that._num( element.css( "padding" + name ) );                                                             // 7764
			});                                                                                                                 // 7765
                                                                                                                       // 7766
			that.containerOffset = element.offset();                                                                            // 7767
			that.containerPosition = element.position();                                                                        // 7768
			that.containerSize = {                                                                                              // 7769
				height: ( element.innerHeight() - p[ 3 ] ),                                                                        // 7770
				width: ( element.innerWidth() - p[ 1 ] )                                                                           // 7771
			};                                                                                                                  // 7772
                                                                                                                       // 7773
			co = that.containerOffset;                                                                                          // 7774
			ch = that.containerSize.height;                                                                                     // 7775
			cw = that.containerSize.width;                                                                                      // 7776
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );                                                   // 7777
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;                                                        // 7778
                                                                                                                       // 7779
			that.parentData = {                                                                                                 // 7780
				element: ce,                                                                                                       // 7781
				left: co.left,                                                                                                     // 7782
				top: co.top,                                                                                                       // 7783
				width: width,                                                                                                      // 7784
				height: height                                                                                                     // 7785
			};                                                                                                                  // 7786
		}                                                                                                                    // 7787
	},                                                                                                                    // 7788
                                                                                                                       // 7789
	resize: function( event ) {                                                                                           // 7790
		var woset, hoset, isParent, isOffsetRelative,                                                                        // 7791
			that = $( this ).resizable( "instance" ),                                                                           // 7792
			o = that.options,                                                                                                   // 7793
			co = that.containerOffset,                                                                                          // 7794
			cp = that.position,                                                                                                 // 7795
			pRatio = that._aspectRatio || event.shiftKey,                                                                       // 7796
			cop = {                                                                                                             // 7797
				top: 0,                                                                                                            // 7798
				left: 0                                                                                                            // 7799
			},                                                                                                                  // 7800
			ce = that.containerElement,                                                                                         // 7801
			continueResize = true;                                                                                              // 7802
                                                                                                                       // 7803
		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {                                           // 7804
			cop = co;                                                                                                           // 7805
		}                                                                                                                    // 7806
                                                                                                                       // 7807
		if ( cp.left < ( that._helper ? co.left : 0 ) ) {                                                                    // 7808
			that.size.width = that.size.width +                                                                                 // 7809
				( that._helper ?                                                                                                   // 7810
					( that.position.left - co.left ) :                                                                                // 7811
					( that.position.left - cop.left ) );                                                                              // 7812
                                                                                                                       // 7813
			if ( pRatio ) {                                                                                                     // 7814
				that.size.height = that.size.width / that.aspectRatio;                                                             // 7815
				continueResize = false;                                                                                            // 7816
			}                                                                                                                   // 7817
			that.position.left = o.helper ? co.left : 0;                                                                        // 7818
		}                                                                                                                    // 7819
                                                                                                                       // 7820
		if ( cp.top < ( that._helper ? co.top : 0 ) ) {                                                                      // 7821
			that.size.height = that.size.height +                                                                               // 7822
				( that._helper ?                                                                                                   // 7823
					( that.position.top - co.top ) :                                                                                  // 7824
					that.position.top );                                                                                              // 7825
                                                                                                                       // 7826
			if ( pRatio ) {                                                                                                     // 7827
				that.size.width = that.size.height * that.aspectRatio;                                                             // 7828
				continueResize = false;                                                                                            // 7829
			}                                                                                                                   // 7830
			that.position.top = that._helper ? co.top : 0;                                                                      // 7831
		}                                                                                                                    // 7832
                                                                                                                       // 7833
		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );                                        // 7834
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );                              // 7835
                                                                                                                       // 7836
		if ( isParent && isOffsetRelative ) {                                                                                // 7837
			that.offset.left = that.parentData.left + that.position.left;                                                       // 7838
			that.offset.top = that.parentData.top + that.position.top;                                                          // 7839
		} else {                                                                                                             // 7840
			that.offset.left = that.element.offset().left;                                                                      // 7841
			that.offset.top = that.element.offset().top;                                                                        // 7842
		}                                                                                                                    // 7843
                                                                                                                       // 7844
		woset = Math.abs( that.sizeDiff.width +                                                                              // 7845
			(that._helper ?                                                                                                     // 7846
				that.offset.left - cop.left :                                                                                      // 7847
				(that.offset.left - co.left)) );                                                                                   // 7848
                                                                                                                       // 7849
		hoset = Math.abs( that.sizeDiff.height +                                                                             // 7850
			(that._helper ?                                                                                                     // 7851
				that.offset.top - cop.top :                                                                                        // 7852
				(that.offset.top - co.top)) );                                                                                     // 7853
                                                                                                                       // 7854
		if ( woset + that.size.width >= that.parentData.width ) {                                                            // 7855
			that.size.width = that.parentData.width - woset;                                                                    // 7856
			if ( pRatio ) {                                                                                                     // 7857
				that.size.height = that.size.width / that.aspectRatio;                                                             // 7858
				continueResize = false;                                                                                            // 7859
			}                                                                                                                   // 7860
		}                                                                                                                    // 7861
                                                                                                                       // 7862
		if ( hoset + that.size.height >= that.parentData.height ) {                                                          // 7863
			that.size.height = that.parentData.height - hoset;                                                                  // 7864
			if ( pRatio ) {                                                                                                     // 7865
				that.size.width = that.size.height * that.aspectRatio;                                                             // 7866
				continueResize = false;                                                                                            // 7867
			}                                                                                                                   // 7868
		}                                                                                                                    // 7869
                                                                                                                       // 7870
		if ( !continueResize ){                                                                                              // 7871
			that.position.left = that.prevPosition.left;                                                                        // 7872
			that.position.top = that.prevPosition.top;                                                                          // 7873
			that.size.width = that.prevSize.width;                                                                              // 7874
			that.size.height = that.prevSize.height;                                                                            // 7875
		}                                                                                                                    // 7876
	},                                                                                                                    // 7877
                                                                                                                       // 7878
	stop: function() {                                                                                                    // 7879
		var that = $( this ).resizable( "instance" ),                                                                        // 7880
			o = that.options,                                                                                                   // 7881
			co = that.containerOffset,                                                                                          // 7882
			cop = that.containerPosition,                                                                                       // 7883
			ce = that.containerElement,                                                                                         // 7884
			helper = $( that.helper ),                                                                                          // 7885
			ho = helper.offset(),                                                                                               // 7886
			w = helper.outerWidth() - that.sizeDiff.width,                                                                      // 7887
			h = helper.outerHeight() - that.sizeDiff.height;                                                                    // 7888
                                                                                                                       // 7889
		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {                                   // 7890
			$( this ).css({                                                                                                     // 7891
				left: ho.left - cop.left - co.left,                                                                                // 7892
				width: w,                                                                                                          // 7893
				height: h                                                                                                          // 7894
			});                                                                                                                 // 7895
		}                                                                                                                    // 7896
                                                                                                                       // 7897
		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {                                     // 7898
			$( this ).css({                                                                                                     // 7899
				left: ho.left - cop.left - co.left,                                                                                // 7900
				width: w,                                                                                                          // 7901
				height: h                                                                                                          // 7902
			});                                                                                                                 // 7903
		}                                                                                                                    // 7904
	}                                                                                                                     // 7905
});                                                                                                                    // 7906
                                                                                                                       // 7907
$.ui.plugin.add("resizable", "alsoResize", {                                                                           // 7908
                                                                                                                       // 7909
	start: function() {                                                                                                   // 7910
		var that = $(this).resizable( "instance" ),                                                                          // 7911
			o = that.options,                                                                                                   // 7912
			_store = function(exp) {                                                                                            // 7913
				$(exp).each(function() {                                                                                           // 7914
					var el = $(this);                                                                                                 // 7915
					el.data("ui-resizable-alsoresize", {                                                                              // 7916
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),                                              // 7917
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)                                             // 7918
					});                                                                                                               // 7919
				});                                                                                                                // 7920
			};                                                                                                                  // 7921
                                                                                                                       // 7922
		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {                                                 // 7923
			if (o.alsoResize.length) {                                                                                          // 7924
				o.alsoResize = o.alsoResize[0];                                                                                    // 7925
				_store(o.alsoResize);                                                                                              // 7926
			} else {                                                                                                            // 7927
				$.each(o.alsoResize, function(exp) {                                                                               // 7928
					_store(exp);                                                                                                      // 7929
				});                                                                                                                // 7930
			}                                                                                                                   // 7931
		} else {                                                                                                             // 7932
			_store(o.alsoResize);                                                                                               // 7933
		}                                                                                                                    // 7934
	},                                                                                                                    // 7935
                                                                                                                       // 7936
	resize: function(event, ui) {                                                                                         // 7937
		var that = $(this).resizable( "instance" ),                                                                          // 7938
			o = that.options,                                                                                                   // 7939
			os = that.originalSize,                                                                                             // 7940
			op = that.originalPosition,                                                                                         // 7941
			delta = {                                                                                                           // 7942
				height: (that.size.height - os.height) || 0,                                                                       // 7943
				width: (that.size.width - os.width) || 0,                                                                          // 7944
				top: (that.position.top - op.top) || 0,                                                                            // 7945
				left: (that.position.left - op.left) || 0                                                                          // 7946
			},                                                                                                                  // 7947
                                                                                                                       // 7948
			_alsoResize = function(exp, c) {                                                                                    // 7949
				$(exp).each(function() {                                                                                           // 7950
					var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},                                    // 7951
						css = c && c.length ?                                                                                            // 7952
							c :                                                                                                             // 7953
							el.parents(ui.originalElement[0]).length ?                                                                      // 7954
								[ "width", "height" ] :                                                                                        // 7955
								[ "width", "height", "top", "left" ];                                                                          // 7956
                                                                                                                       // 7957
					$.each(css, function(i, prop) {                                                                                   // 7958
						var sum = (start[prop] || 0) + (delta[prop] || 0);                                                               // 7959
						if (sum && sum >= 0) {                                                                                           // 7960
							style[prop] = sum || null;                                                                                      // 7961
						}                                                                                                                // 7962
					});                                                                                                               // 7963
                                                                                                                       // 7964
					el.css(style);                                                                                                    // 7965
				});                                                                                                                // 7966
			};                                                                                                                  // 7967
                                                                                                                       // 7968
		if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {                                                   // 7969
			$.each(o.alsoResize, function(exp, c) {                                                                             // 7970
				_alsoResize(exp, c);                                                                                               // 7971
			});                                                                                                                 // 7972
		} else {                                                                                                             // 7973
			_alsoResize(o.alsoResize);                                                                                          // 7974
		}                                                                                                                    // 7975
	},                                                                                                                    // 7976
                                                                                                                       // 7977
	stop: function() {                                                                                                    // 7978
		$(this).removeData("resizable-alsoresize");                                                                          // 7979
	}                                                                                                                     // 7980
});                                                                                                                    // 7981
                                                                                                                       // 7982
$.ui.plugin.add("resizable", "ghost", {                                                                                // 7983
                                                                                                                       // 7984
	start: function() {                                                                                                   // 7985
                                                                                                                       // 7986
		var that = $(this).resizable( "instance" ), o = that.options, cs = that.size;                                        // 7987
                                                                                                                       // 7988
		that.ghost = that.originalElement.clone();                                                                           // 7989
		that.ghost                                                                                                           // 7990
			.css({                                                                                                              // 7991
				opacity: 0.25,                                                                                                     // 7992
				display: "block",                                                                                                  // 7993
				position: "relative",                                                                                              // 7994
				height: cs.height,                                                                                                 // 7995
				width: cs.width,                                                                                                   // 7996
				margin: 0,                                                                                                         // 7997
				left: 0,                                                                                                           // 7998
				top: 0                                                                                                             // 7999
			})                                                                                                                  // 8000
			.addClass("ui-resizable-ghost")                                                                                     // 8001
			.addClass(typeof o.ghost === "string" ? o.ghost : "");                                                              // 8002
                                                                                                                       // 8003
		that.ghost.appendTo(that.helper);                                                                                    // 8004
                                                                                                                       // 8005
	},                                                                                                                    // 8006
                                                                                                                       // 8007
	resize: function() {                                                                                                  // 8008
		var that = $(this).resizable( "instance" );                                                                          // 8009
		if (that.ghost) {                                                                                                    // 8010
			that.ghost.css({                                                                                                    // 8011
				position: "relative",                                                                                              // 8012
				height: that.size.height,                                                                                          // 8013
				width: that.size.width                                                                                             // 8014
			});                                                                                                                 // 8015
		}                                                                                                                    // 8016
	},                                                                                                                    // 8017
                                                                                                                       // 8018
	stop: function() {                                                                                                    // 8019
		var that = $(this).resizable( "instance" );                                                                          // 8020
		if (that.ghost && that.helper) {                                                                                     // 8021
			that.helper.get(0).removeChild(that.ghost.get(0));                                                                  // 8022
		}                                                                                                                    // 8023
	}                                                                                                                     // 8024
                                                                                                                       // 8025
});                                                                                                                    // 8026
                                                                                                                       // 8027
$.ui.plugin.add("resizable", "grid", {                                                                                 // 8028
                                                                                                                       // 8029
	resize: function() {                                                                                                  // 8030
		var outerDimensions,                                                                                                 // 8031
			that = $(this).resizable( "instance" ),                                                                             // 8032
			o = that.options,                                                                                                   // 8033
			cs = that.size,                                                                                                     // 8034
			os = that.originalSize,                                                                                             // 8035
			op = that.originalPosition,                                                                                         // 8036
			a = that.axis,                                                                                                      // 8037
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,                                                    // 8038
			gridX = (grid[0] || 1),                                                                                             // 8039
			gridY = (grid[1] || 1),                                                                                             // 8040
			ox = Math.round((cs.width - os.width) / gridX) * gridX,                                                             // 8041
			oy = Math.round((cs.height - os.height) / gridY) * gridY,                                                           // 8042
			newWidth = os.width + ox,                                                                                           // 8043
			newHeight = os.height + oy,                                                                                         // 8044
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),                                                                 // 8045
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),                                                             // 8046
			isMinWidth = o.minWidth && (o.minWidth > newWidth),                                                                 // 8047
			isMinHeight = o.minHeight && (o.minHeight > newHeight);                                                             // 8048
                                                                                                                       // 8049
		o.grid = grid;                                                                                                       // 8050
                                                                                                                       // 8051
		if (isMinWidth) {                                                                                                    // 8052
			newWidth += gridX;                                                                                                  // 8053
		}                                                                                                                    // 8054
		if (isMinHeight) {                                                                                                   // 8055
			newHeight += gridY;                                                                                                 // 8056
		}                                                                                                                    // 8057
		if (isMaxWidth) {                                                                                                    // 8058
			newWidth -= gridX;                                                                                                  // 8059
		}                                                                                                                    // 8060
		if (isMaxHeight) {                                                                                                   // 8061
			newHeight -= gridY;                                                                                                 // 8062
		}                                                                                                                    // 8063
                                                                                                                       // 8064
		if (/^(se|s|e)$/.test(a)) {                                                                                          // 8065
			that.size.width = newWidth;                                                                                         // 8066
			that.size.height = newHeight;                                                                                       // 8067
		} else if (/^(ne)$/.test(a)) {                                                                                       // 8068
			that.size.width = newWidth;                                                                                         // 8069
			that.size.height = newHeight;                                                                                       // 8070
			that.position.top = op.top - oy;                                                                                    // 8071
		} else if (/^(sw)$/.test(a)) {                                                                                       // 8072
			that.size.width = newWidth;                                                                                         // 8073
			that.size.height = newHeight;                                                                                       // 8074
			that.position.left = op.left - ox;                                                                                  // 8075
		} else {                                                                                                             // 8076
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {                                                             // 8077
				outerDimensions = that._getPaddingPlusBorderDimensions( this );                                                    // 8078
			}                                                                                                                   // 8079
                                                                                                                       // 8080
			if ( newHeight - gridY > 0 ) {                                                                                      // 8081
				that.size.height = newHeight;                                                                                      // 8082
				that.position.top = op.top - oy;                                                                                   // 8083
			} else {                                                                                                            // 8084
				newHeight = gridY - outerDimensions.height;                                                                        // 8085
				that.size.height = newHeight;                                                                                      // 8086
				that.position.top = op.top + os.height - newHeight;                                                                // 8087
			}                                                                                                                   // 8088
			if ( newWidth - gridX > 0 ) {                                                                                       // 8089
				that.size.width = newWidth;                                                                                        // 8090
				that.position.left = op.left - ox;                                                                                 // 8091
			} else {                                                                                                            // 8092
				newWidth = gridY - outerDimensions.height;                                                                         // 8093
				that.size.width = newWidth;                                                                                        // 8094
				that.position.left = op.left + os.width - newWidth;                                                                // 8095
			}                                                                                                                   // 8096
		}                                                                                                                    // 8097
	}                                                                                                                     // 8098
                                                                                                                       // 8099
});                                                                                                                    // 8100
                                                                                                                       // 8101
var resizable = $.ui.resizable;                                                                                        // 8102
                                                                                                                       // 8103
                                                                                                                       // 8104
/*!                                                                                                                    // 8105
 * jQuery UI Dialog 1.11.2                                                                                             // 8106
 * http://jqueryui.com                                                                                                 // 8107
 *                                                                                                                     // 8108
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 8109
 * Released under the MIT license.                                                                                     // 8110
 * http://jquery.org/license                                                                                           // 8111
 *                                                                                                                     // 8112
 * http://api.jqueryui.com/dialog/                                                                                     // 8113
 */                                                                                                                    // 8114
                                                                                                                       // 8115
                                                                                                                       // 8116
var dialog = $.widget( "ui.dialog", {                                                                                  // 8117
	version: "1.11.2",                                                                                                    // 8118
	options: {                                                                                                            // 8119
		appendTo: "body",                                                                                                    // 8120
		autoOpen: true,                                                                                                      // 8121
		buttons: [],                                                                                                         // 8122
		closeOnEscape: true,                                                                                                 // 8123
		closeText: "Close",                                                                                                  // 8124
		dialogClass: "",                                                                                                     // 8125
		draggable: true,                                                                                                     // 8126
		hide: null,                                                                                                          // 8127
		height: "auto",                                                                                                      // 8128
		maxHeight: null,                                                                                                     // 8129
		maxWidth: null,                                                                                                      // 8130
		minHeight: 150,                                                                                                      // 8131
		minWidth: 150,                                                                                                       // 8132
		modal: false,                                                                                                        // 8133
		position: {                                                                                                          // 8134
			my: "center",                                                                                                       // 8135
			at: "center",                                                                                                       // 8136
			of: window,                                                                                                         // 8137
			collision: "fit",                                                                                                   // 8138
			// Ensure the titlebar is always visible                                                                            // 8139
			using: function( pos ) {                                                                                            // 8140
				var topOffset = $( this ).css( pos ).offset().top;                                                                 // 8141
				if ( topOffset < 0 ) {                                                                                             // 8142
					$( this ).css( "top", pos.top - topOffset );                                                                      // 8143
				}                                                                                                                  // 8144
			}                                                                                                                   // 8145
		},                                                                                                                   // 8146
		resizable: true,                                                                                                     // 8147
		show: null,                                                                                                          // 8148
		title: null,                                                                                                         // 8149
		width: 300,                                                                                                          // 8150
                                                                                                                       // 8151
		// callbacks                                                                                                         // 8152
		beforeClose: null,                                                                                                   // 8153
		close: null,                                                                                                         // 8154
		drag: null,                                                                                                          // 8155
		dragStart: null,                                                                                                     // 8156
		dragStop: null,                                                                                                      // 8157
		focus: null,                                                                                                         // 8158
		open: null,                                                                                                          // 8159
		resize: null,                                                                                                        // 8160
		resizeStart: null,                                                                                                   // 8161
		resizeStop: null                                                                                                     // 8162
	},                                                                                                                    // 8163
                                                                                                                       // 8164
	sizeRelatedOptions: {                                                                                                 // 8165
		buttons: true,                                                                                                       // 8166
		height: true,                                                                                                        // 8167
		maxHeight: true,                                                                                                     // 8168
		maxWidth: true,                                                                                                      // 8169
		minHeight: true,                                                                                                     // 8170
		minWidth: true,                                                                                                      // 8171
		width: true                                                                                                          // 8172
	},                                                                                                                    // 8173
                                                                                                                       // 8174
	resizableRelatedOptions: {                                                                                            // 8175
		maxHeight: true,                                                                                                     // 8176
		maxWidth: true,                                                                                                      // 8177
		minHeight: true,                                                                                                     // 8178
		minWidth: true                                                                                                       // 8179
	},                                                                                                                    // 8180
                                                                                                                       // 8181
	_create: function() {                                                                                                 // 8182
		this.originalCss = {                                                                                                 // 8183
			display: this.element[ 0 ].style.display,                                                                           // 8184
			width: this.element[ 0 ].style.width,                                                                               // 8185
			minHeight: this.element[ 0 ].style.minHeight,                                                                       // 8186
			maxHeight: this.element[ 0 ].style.maxHeight,                                                                       // 8187
			height: this.element[ 0 ].style.height                                                                              // 8188
		};                                                                                                                   // 8189
		this.originalPosition = {                                                                                            // 8190
			parent: this.element.parent(),                                                                                      // 8191
			index: this.element.parent().children().index( this.element )                                                       // 8192
		};                                                                                                                   // 8193
		this.originalTitle = this.element.attr( "title" );                                                                   // 8194
		this.options.title = this.options.title || this.originalTitle;                                                       // 8195
                                                                                                                       // 8196
		this._createWrapper();                                                                                               // 8197
                                                                                                                       // 8198
		this.element                                                                                                         // 8199
			.show()                                                                                                             // 8200
			.removeAttr( "title" )                                                                                              // 8201
			.addClass( "ui-dialog-content ui-widget-content" )                                                                  // 8202
			.appendTo( this.uiDialog );                                                                                         // 8203
                                                                                                                       // 8204
		this._createTitlebar();                                                                                              // 8205
		this._createButtonPane();                                                                                            // 8206
                                                                                                                       // 8207
		if ( this.options.draggable && $.fn.draggable ) {                                                                    // 8208
			this._makeDraggable();                                                                                              // 8209
		}                                                                                                                    // 8210
		if ( this.options.resizable && $.fn.resizable ) {                                                                    // 8211
			this._makeResizable();                                                                                              // 8212
		}                                                                                                                    // 8213
                                                                                                                       // 8214
		this._isOpen = false;                                                                                                // 8215
                                                                                                                       // 8216
		this._trackFocus();                                                                                                  // 8217
	},                                                                                                                    // 8218
                                                                                                                       // 8219
	_init: function() {                                                                                                   // 8220
		if ( this.options.autoOpen ) {                                                                                       // 8221
			this.open();                                                                                                        // 8222
		}                                                                                                                    // 8223
	},                                                                                                                    // 8224
                                                                                                                       // 8225
	_appendTo: function() {                                                                                               // 8226
		var element = this.options.appendTo;                                                                                 // 8227
		if ( element && (element.jquery || element.nodeType) ) {                                                             // 8228
			return $( element );                                                                                                // 8229
		}                                                                                                                    // 8230
		return this.document.find( element || "body" ).eq( 0 );                                                              // 8231
	},                                                                                                                    // 8232
                                                                                                                       // 8233
	_destroy: function() {                                                                                                // 8234
		var next,                                                                                                            // 8235
			originalPosition = this.originalPosition;                                                                           // 8236
                                                                                                                       // 8237
		this._destroyOverlay();                                                                                              // 8238
                                                                                                                       // 8239
		this.element                                                                                                         // 8240
			.removeUniqueId()                                                                                                   // 8241
			.removeClass( "ui-dialog-content ui-widget-content" )                                                               // 8242
			.css( this.originalCss )                                                                                            // 8243
			// Without detaching first, the following becomes really slow                                                       // 8244
			.detach();                                                                                                          // 8245
                                                                                                                       // 8246
		this.uiDialog.stop( true, true ).remove();                                                                           // 8247
                                                                                                                       // 8248
		if ( this.originalTitle ) {                                                                                          // 8249
			this.element.attr( "title", this.originalTitle );                                                                   // 8250
		}                                                                                                                    // 8251
                                                                                                                       // 8252
		next = originalPosition.parent.children().eq( originalPosition.index );                                              // 8253
		// Don't try to place the dialog next to itself (#8613)                                                              // 8254
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {                                                              // 8255
			next.before( this.element );                                                                                        // 8256
		} else {                                                                                                             // 8257
			originalPosition.parent.append( this.element );                                                                     // 8258
		}                                                                                                                    // 8259
	},                                                                                                                    // 8260
                                                                                                                       // 8261
	widget: function() {                                                                                                  // 8262
		return this.uiDialog;                                                                                                // 8263
	},                                                                                                                    // 8264
                                                                                                                       // 8265
	disable: $.noop,                                                                                                      // 8266
	enable: $.noop,                                                                                                       // 8267
                                                                                                                       // 8268
	close: function( event ) {                                                                                            // 8269
		var activeElement,                                                                                                   // 8270
			that = this;                                                                                                        // 8271
                                                                                                                       // 8272
		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {                                            // 8273
			return;                                                                                                             // 8274
		}                                                                                                                    // 8275
                                                                                                                       // 8276
		this._isOpen = false;                                                                                                // 8277
		this._focusedElement = null;                                                                                         // 8278
		this._destroyOverlay();                                                                                              // 8279
		this._untrackInstance();                                                                                             // 8280
                                                                                                                       // 8281
		if ( !this.opener.filter( ":focusable" ).focus().length ) {                                                          // 8282
                                                                                                                       // 8283
			// support: IE9                                                                                                     // 8284
			// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>                              // 8285
			try {                                                                                                               // 8286
				activeElement = this.document[ 0 ].activeElement;                                                                  // 8287
                                                                                                                       // 8288
				// Support: IE9, IE10                                                                                              // 8289
				// If the <body> is blurred, IE will switch windows, see #4520                                                     // 8290
				if ( activeElement && activeElement.nodeName.toLowerCase() !== "body" ) {                                          // 8291
                                                                                                                       // 8292
					// Hiding a focused element doesn't trigger blur in WebKit                                                        // 8293
					// so in case we have nothing to focus on, explicitly blur the active element                                     // 8294
					// https://bugs.webkit.org/show_bug.cgi?id=47182                                                                  // 8295
					$( activeElement ).blur();                                                                                        // 8296
				}                                                                                                                  // 8297
			} catch ( error ) {}                                                                                                // 8298
		}                                                                                                                    // 8299
                                                                                                                       // 8300
		this._hide( this.uiDialog, this.options.hide, function() {                                                           // 8301
			that._trigger( "close", event );                                                                                    // 8302
		});                                                                                                                  // 8303
	},                                                                                                                    // 8304
                                                                                                                       // 8305
	isOpen: function() {                                                                                                  // 8306
		return this._isOpen;                                                                                                 // 8307
	},                                                                                                                    // 8308
                                                                                                                       // 8309
	moveToTop: function() {                                                                                               // 8310
		this._moveToTop();                                                                                                   // 8311
	},                                                                                                                    // 8312
                                                                                                                       // 8313
	_moveToTop: function( event, silent ) {                                                                               // 8314
		var moved = false,                                                                                                   // 8315
			zIndicies = this.uiDialog.siblings( ".ui-front:visible" ).map(function() {                                          // 8316
				return +$( this ).css( "z-index" );                                                                                // 8317
			}).get(),                                                                                                           // 8318
			zIndexMax = Math.max.apply( null, zIndicies );                                                                      // 8319
                                                                                                                       // 8320
		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {                                                                // 8321
			this.uiDialog.css( "z-index", zIndexMax + 1 );                                                                      // 8322
			moved = true;                                                                                                       // 8323
		}                                                                                                                    // 8324
                                                                                                                       // 8325
		if ( moved && !silent ) {                                                                                            // 8326
			this._trigger( "focus", event );                                                                                    // 8327
		}                                                                                                                    // 8328
		return moved;                                                                                                        // 8329
	},                                                                                                                    // 8330
                                                                                                                       // 8331
	open: function() {                                                                                                    // 8332
		var that = this;                                                                                                     // 8333
		if ( this._isOpen ) {                                                                                                // 8334
			if ( this._moveToTop() ) {                                                                                          // 8335
				this._focusTabbable();                                                                                             // 8336
			}                                                                                                                   // 8337
			return;                                                                                                             // 8338
		}                                                                                                                    // 8339
                                                                                                                       // 8340
		this._isOpen = true;                                                                                                 // 8341
		this.opener = $( this.document[ 0 ].activeElement );                                                                 // 8342
                                                                                                                       // 8343
		this._size();                                                                                                        // 8344
		this._position();                                                                                                    // 8345
		this._createOverlay();                                                                                               // 8346
		this._moveToTop( null, true );                                                                                       // 8347
                                                                                                                       // 8348
		// Ensure the overlay is moved to the top with the dialog, but only when                                             // 8349
		// opening. The overlay shouldn't move after the dialog is open so that                                              // 8350
		// modeless dialogs opened after the modal dialog stack properly.                                                    // 8351
		if ( this.overlay ) {                                                                                                // 8352
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );                                                  // 8353
		}                                                                                                                    // 8354
                                                                                                                       // 8355
		this._show( this.uiDialog, this.options.show, function() {                                                           // 8356
			that._focusTabbable();                                                                                              // 8357
			that._trigger( "focus" );                                                                                           // 8358
		});                                                                                                                  // 8359
                                                                                                                       // 8360
		// Track the dialog immediately upon openening in case a focus event                                                 // 8361
		// somehow occurs outside of the dialog before an element inside the                                                 // 8362
		// dialog is focused (#10152)                                                                                        // 8363
		this._makeFocusTarget();                                                                                             // 8364
                                                                                                                       // 8365
		this._trigger( "open" );                                                                                             // 8366
	},                                                                                                                    // 8367
                                                                                                                       // 8368
	_focusTabbable: function() {                                                                                          // 8369
		// Set focus to the first match:                                                                                     // 8370
		// 1. An element that was focused previously                                                                         // 8371
		// 2. First element inside the dialog matching [autofocus]                                                           // 8372
		// 3. Tabbable element inside the content element                                                                    // 8373
		// 4. Tabbable element inside the buttonpane                                                                         // 8374
		// 5. The close button                                                                                               // 8375
		// 6. The dialog itself                                                                                              // 8376
		var hasFocus = this._focusedElement;                                                                                 // 8377
		if ( !hasFocus ) {                                                                                                   // 8378
			hasFocus = this.element.find( "[autofocus]" );                                                                      // 8379
		}                                                                                                                    // 8380
		if ( !hasFocus.length ) {                                                                                            // 8381
			hasFocus = this.element.find( ":tabbable" );                                                                        // 8382
		}                                                                                                                    // 8383
		if ( !hasFocus.length ) {                                                                                            // 8384
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );                                                             // 8385
		}                                                                                                                    // 8386
		if ( !hasFocus.length ) {                                                                                            // 8387
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );                                                        // 8388
		}                                                                                                                    // 8389
		if ( !hasFocus.length ) {                                                                                            // 8390
			hasFocus = this.uiDialog;                                                                                           // 8391
		}                                                                                                                    // 8392
		hasFocus.eq( 0 ).focus();                                                                                            // 8393
	},                                                                                                                    // 8394
                                                                                                                       // 8395
	_keepFocus: function( event ) {                                                                                       // 8396
		function checkFocus() {                                                                                              // 8397
			var activeElement = this.document[0].activeElement,                                                                 // 8398
				isActive = this.uiDialog[0] === activeElement ||                                                                   // 8399
					$.contains( this.uiDialog[0], activeElement );                                                                    // 8400
			if ( !isActive ) {                                                                                                  // 8401
				this._focusTabbable();                                                                                             // 8402
			}                                                                                                                   // 8403
		}                                                                                                                    // 8404
		event.preventDefault();                                                                                              // 8405
		checkFocus.call( this );                                                                                             // 8406
		// support: IE                                                                                                       // 8407
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()                                             // 8408
		// so we check again later                                                                                           // 8409
		this._delay( checkFocus );                                                                                           // 8410
	},                                                                                                                    // 8411
                                                                                                                       // 8412
	_createWrapper: function() {                                                                                          // 8413
		this.uiDialog = $("<div>")                                                                                           // 8414
			.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +                                        // 8415
				this.options.dialogClass )                                                                                         // 8416
			.hide()                                                                                                             // 8417
			.attr({                                                                                                             // 8418
				// Setting tabIndex makes the div focusable                                                                        // 8419
				tabIndex: -1,                                                                                                      // 8420
				role: "dialog"                                                                                                     // 8421
			})                                                                                                                  // 8422
			.appendTo( this._appendTo() );                                                                                      // 8423
                                                                                                                       // 8424
		this._on( this.uiDialog, {                                                                                           // 8425
			keydown: function( event ) {                                                                                        // 8426
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&                                 // 8427
						event.keyCode === $.ui.keyCode.ESCAPE ) {                                                                        // 8428
					event.preventDefault();                                                                                           // 8429
					this.close( event );                                                                                              // 8430
					return;                                                                                                           // 8431
				}                                                                                                                  // 8432
                                                                                                                       // 8433
				// prevent tabbing out of dialogs                                                                                  // 8434
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {                                          // 8435
					return;                                                                                                           // 8436
				}                                                                                                                  // 8437
				var tabbables = this.uiDialog.find( ":tabbable" ),                                                                 // 8438
					first = tabbables.filter( ":first" ),                                                                             // 8439
					last = tabbables.filter( ":last" );                                                                               // 8440
                                                                                                                       // 8441
				if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {                      // 8442
					this._delay(function() {                                                                                          // 8443
						first.focus();                                                                                                   // 8444
					});                                                                                                               // 8445
					event.preventDefault();                                                                                           // 8446
				} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {               // 8447
					this._delay(function() {                                                                                          // 8448
						last.focus();                                                                                                    // 8449
					});                                                                                                               // 8450
					event.preventDefault();                                                                                           // 8451
				}                                                                                                                  // 8452
			},                                                                                                                  // 8453
			mousedown: function( event ) {                                                                                      // 8454
				if ( this._moveToTop( event ) ) {                                                                                  // 8455
					this._focusTabbable();                                                                                            // 8456
				}                                                                                                                  // 8457
			}                                                                                                                   // 8458
		});                                                                                                                  // 8459
                                                                                                                       // 8460
		// We assume that any existing aria-describedby attribute means                                                      // 8461
		// that the dialog content is marked up properly                                                                     // 8462
		// otherwise we brute force the content as the description                                                           // 8463
		if ( !this.element.find( "[aria-describedby]" ).length ) {                                                           // 8464
			this.uiDialog.attr({                                                                                                // 8465
				"aria-describedby": this.element.uniqueId().attr( "id" )                                                           // 8466
			});                                                                                                                 // 8467
		}                                                                                                                    // 8468
	},                                                                                                                    // 8469
                                                                                                                       // 8470
	_createTitlebar: function() {                                                                                         // 8471
		var uiDialogTitle;                                                                                                   // 8472
                                                                                                                       // 8473
		this.uiDialogTitlebar = $( "<div>" )                                                                                 // 8474
			.addClass( "ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" )                                 // 8475
			.prependTo( this.uiDialog );                                                                                        // 8476
		this._on( this.uiDialogTitlebar, {                                                                                   // 8477
			mousedown: function( event ) {                                                                                      // 8478
				// Don't prevent click on close button (#8838)                                                                     // 8479
				// Focusing a dialog that is partially scrolled out of view                                                        // 8480
				// causes the browser to scroll it into view, preventing the click event                                           // 8481
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {                                                 // 8482
					// Dialog isn't getting focus when dragging (#8063)                                                               // 8483
					this.uiDialog.focus();                                                                                            // 8484
				}                                                                                                                  // 8485
			}                                                                                                                   // 8486
		});                                                                                                                  // 8487
                                                                                                                       // 8488
		// support: IE                                                                                                       // 8489
		// Use type="button" to prevent enter keypresses in textboxes from closing the                                       // 8490
		// dialog in IE (#9312)                                                                                              // 8491
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )                                                  // 8492
			.button({                                                                                                           // 8493
				label: this.options.closeText,                                                                                     // 8494
				icons: {                                                                                                           // 8495
					primary: "ui-icon-closethick"                                                                                     // 8496
				},                                                                                                                 // 8497
				text: false                                                                                                        // 8498
			})                                                                                                                  // 8499
			.addClass( "ui-dialog-titlebar-close" )                                                                             // 8500
			.appendTo( this.uiDialogTitlebar );                                                                                 // 8501
		this._on( this.uiDialogTitlebarClose, {                                                                              // 8502
			click: function( event ) {                                                                                          // 8503
				event.preventDefault();                                                                                            // 8504
				this.close( event );                                                                                               // 8505
			}                                                                                                                   // 8506
		});                                                                                                                  // 8507
                                                                                                                       // 8508
		uiDialogTitle = $( "<span>" )                                                                                        // 8509
			.uniqueId()                                                                                                         // 8510
			.addClass( "ui-dialog-title" )                                                                                      // 8511
			.prependTo( this.uiDialogTitlebar );                                                                                // 8512
		this._title( uiDialogTitle );                                                                                        // 8513
                                                                                                                       // 8514
		this.uiDialog.attr({                                                                                                 // 8515
			"aria-labelledby": uiDialogTitle.attr( "id" )                                                                       // 8516
		});                                                                                                                  // 8517
	},                                                                                                                    // 8518
                                                                                                                       // 8519
	_title: function( title ) {                                                                                           // 8520
		if ( !this.options.title ) {                                                                                         // 8521
			title.html( "&#160;" );                                                                                             // 8522
		}                                                                                                                    // 8523
		title.text( this.options.title );                                                                                    // 8524
	},                                                                                                                    // 8525
                                                                                                                       // 8526
	_createButtonPane: function() {                                                                                       // 8527
		this.uiDialogButtonPane = $( "<div>" )                                                                               // 8528
			.addClass( "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" );                                           // 8529
                                                                                                                       // 8530
		this.uiButtonSet = $( "<div>" )                                                                                      // 8531
			.addClass( "ui-dialog-buttonset" )                                                                                  // 8532
			.appendTo( this.uiDialogButtonPane );                                                                               // 8533
                                                                                                                       // 8534
		this._createButtons();                                                                                               // 8535
	},                                                                                                                    // 8536
                                                                                                                       // 8537
	_createButtons: function() {                                                                                          // 8538
		var that = this,                                                                                                     // 8539
			buttons = this.options.buttons;                                                                                     // 8540
                                                                                                                       // 8541
		// if we already have a button pane, remove it                                                                       // 8542
		this.uiDialogButtonPane.remove();                                                                                    // 8543
		this.uiButtonSet.empty();                                                                                            // 8544
                                                                                                                       // 8545
		if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {                                     // 8546
			this.uiDialog.removeClass( "ui-dialog-buttons" );                                                                   // 8547
			return;                                                                                                             // 8548
		}                                                                                                                    // 8549
                                                                                                                       // 8550
		$.each( buttons, function( name, props ) {                                                                           // 8551
			var click, buttonOptions;                                                                                           // 8552
			props = $.isFunction( props ) ?                                                                                     // 8553
				{ click: props, text: name } :                                                                                     // 8554
				props;                                                                                                             // 8555
			// Default to a non-submitting button                                                                               // 8556
			props = $.extend( { type: "button" }, props );                                                                      // 8557
			// Change the context for the click callback to be the main element                                                 // 8558
			click = props.click;                                                                                                // 8559
			props.click = function() {                                                                                          // 8560
				click.apply( that.element[ 0 ], arguments );                                                                       // 8561
			};                                                                                                                  // 8562
			buttonOptions = {                                                                                                   // 8563
				icons: props.icons,                                                                                                // 8564
				text: props.showText                                                                                               // 8565
			};                                                                                                                  // 8566
			delete props.icons;                                                                                                 // 8567
			delete props.showText;                                                                                              // 8568
			$( "<button></button>", props )                                                                                     // 8569
				.button( buttonOptions )                                                                                           // 8570
				.appendTo( that.uiButtonSet );                                                                                     // 8571
		});                                                                                                                  // 8572
		this.uiDialog.addClass( "ui-dialog-buttons" );                                                                       // 8573
		this.uiDialogButtonPane.appendTo( this.uiDialog );                                                                   // 8574
	},                                                                                                                    // 8575
                                                                                                                       // 8576
	_makeDraggable: function() {                                                                                          // 8577
		var that = this,                                                                                                     // 8578
			options = this.options;                                                                                             // 8579
                                                                                                                       // 8580
		function filteredUi( ui ) {                                                                                          // 8581
			return {                                                                                                            // 8582
				position: ui.position,                                                                                             // 8583
				offset: ui.offset                                                                                                  // 8584
			};                                                                                                                  // 8585
		}                                                                                                                    // 8586
                                                                                                                       // 8587
		this.uiDialog.draggable({                                                                                            // 8588
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",                                                            // 8589
			handle: ".ui-dialog-titlebar",                                                                                      // 8590
			containment: "document",                                                                                            // 8591
			start: function( event, ui ) {                                                                                      // 8592
				$( this ).addClass( "ui-dialog-dragging" );                                                                        // 8593
				that._blockFrames();                                                                                               // 8594
				that._trigger( "dragStart", event, filteredUi( ui ) );                                                             // 8595
			},                                                                                                                  // 8596
			drag: function( event, ui ) {                                                                                       // 8597
				that._trigger( "drag", event, filteredUi( ui ) );                                                                  // 8598
			},                                                                                                                  // 8599
			stop: function( event, ui ) {                                                                                       // 8600
				var left = ui.offset.left - that.document.scrollLeft(),                                                            // 8601
					top = ui.offset.top - that.document.scrollTop();                                                                  // 8602
                                                                                                                       // 8603
				options.position = {                                                                                               // 8604
					my: "left top",                                                                                                   // 8605
					at: "left" + (left >= 0 ? "+" : "") + left + " " +                                                                // 8606
						"top" + (top >= 0 ? "+" : "") + top,                                                                             // 8607
					of: that.window                                                                                                   // 8608
				};                                                                                                                 // 8609
				$( this ).removeClass( "ui-dialog-dragging" );                                                                     // 8610
				that._unblockFrames();                                                                                             // 8611
				that._trigger( "dragStop", event, filteredUi( ui ) );                                                              // 8612
			}                                                                                                                   // 8613
		});                                                                                                                  // 8614
	},                                                                                                                    // 8615
                                                                                                                       // 8616
	_makeResizable: function() {                                                                                          // 8617
		var that = this,                                                                                                     // 8618
			options = this.options,                                                                                             // 8619
			handles = options.resizable,                                                                                        // 8620
			// .ui-resizable has position: relative defined in the stylesheet                                                   // 8621
			// but dialogs have to use absolute or fixed positioning                                                            // 8622
			position = this.uiDialog.css("position"),                                                                           // 8623
			resizeHandles = typeof handles === "string" ?                                                                       // 8624
				handles	:                                                                                                          // 8625
				"n,e,s,w,se,sw,ne,nw";                                                                                             // 8626
                                                                                                                       // 8627
		function filteredUi( ui ) {                                                                                          // 8628
			return {                                                                                                            // 8629
				originalPosition: ui.originalPosition,                                                                             // 8630
				originalSize: ui.originalSize,                                                                                     // 8631
				position: ui.position,                                                                                             // 8632
				size: ui.size                                                                                                      // 8633
			};                                                                                                                  // 8634
		}                                                                                                                    // 8635
                                                                                                                       // 8636
		this.uiDialog.resizable({                                                                                            // 8637
			cancel: ".ui-dialog-content",                                                                                       // 8638
			containment: "document",                                                                                            // 8639
			alsoResize: this.element,                                                                                           // 8640
			maxWidth: options.maxWidth,                                                                                         // 8641
			maxHeight: options.maxHeight,                                                                                       // 8642
			minWidth: options.minWidth,                                                                                         // 8643
			minHeight: this._minHeight(),                                                                                       // 8644
			handles: resizeHandles,                                                                                             // 8645
			start: function( event, ui ) {                                                                                      // 8646
				$( this ).addClass( "ui-dialog-resizing" );                                                                        // 8647
				that._blockFrames();                                                                                               // 8648
				that._trigger( "resizeStart", event, filteredUi( ui ) );                                                           // 8649
			},                                                                                                                  // 8650
			resize: function( event, ui ) {                                                                                     // 8651
				that._trigger( "resize", event, filteredUi( ui ) );                                                                // 8652
			},                                                                                                                  // 8653
			stop: function( event, ui ) {                                                                                       // 8654
				var offset = that.uiDialog.offset(),                                                                               // 8655
					left = offset.left - that.document.scrollLeft(),                                                                  // 8656
					top = offset.top - that.document.scrollTop();                                                                     // 8657
                                                                                                                       // 8658
				options.height = that.uiDialog.height();                                                                           // 8659
				options.width = that.uiDialog.width();                                                                             // 8660
				options.position = {                                                                                               // 8661
					my: "left top",                                                                                                   // 8662
					at: "left" + (left >= 0 ? "+" : "") + left + " " +                                                                // 8663
						"top" + (top >= 0 ? "+" : "") + top,                                                                             // 8664
					of: that.window                                                                                                   // 8665
				};                                                                                                                 // 8666
				$( this ).removeClass( "ui-dialog-resizing" );                                                                     // 8667
				that._unblockFrames();                                                                                             // 8668
				that._trigger( "resizeStop", event, filteredUi( ui ) );                                                            // 8669
			}                                                                                                                   // 8670
		})                                                                                                                   // 8671
		.css( "position", position );                                                                                        // 8672
	},                                                                                                                    // 8673
                                                                                                                       // 8674
	_trackFocus: function() {                                                                                             // 8675
		this._on( this.widget(), {                                                                                           // 8676
			focusin: function( event ) {                                                                                        // 8677
				this._makeFocusTarget();                                                                                           // 8678
				this._focusedElement = $( event.target );                                                                          // 8679
			}                                                                                                                   // 8680
		});                                                                                                                  // 8681
	},                                                                                                                    // 8682
                                                                                                                       // 8683
	_makeFocusTarget: function() {                                                                                        // 8684
		this._untrackInstance();                                                                                             // 8685
		this._trackingInstances().unshift( this );                                                                           // 8686
	},                                                                                                                    // 8687
                                                                                                                       // 8688
	_untrackInstance: function() {                                                                                        // 8689
		var instances = this._trackingInstances(),                                                                           // 8690
			exists = $.inArray( this, instances );                                                                              // 8691
		if ( exists !== -1 ) {                                                                                               // 8692
			instances.splice( exists, 1 );                                                                                      // 8693
		}                                                                                                                    // 8694
	},                                                                                                                    // 8695
                                                                                                                       // 8696
	_trackingInstances: function() {                                                                                      // 8697
		var instances = this.document.data( "ui-dialog-instances" );                                                         // 8698
		if ( !instances ) {                                                                                                  // 8699
			instances = [];                                                                                                     // 8700
			this.document.data( "ui-dialog-instances", instances );                                                             // 8701
		}                                                                                                                    // 8702
		return instances;                                                                                                    // 8703
	},                                                                                                                    // 8704
                                                                                                                       // 8705
	_minHeight: function() {                                                                                              // 8706
		var options = this.options;                                                                                          // 8707
                                                                                                                       // 8708
		return options.height === "auto" ?                                                                                   // 8709
			options.minHeight :                                                                                                 // 8710
			Math.min( options.minHeight, options.height );                                                                      // 8711
	},                                                                                                                    // 8712
                                                                                                                       // 8713
	_position: function() {                                                                                               // 8714
		// Need to show the dialog to get the actual offset in the position plugin                                           // 8715
		var isVisible = this.uiDialog.is( ":visible" );                                                                      // 8716
		if ( !isVisible ) {                                                                                                  // 8717
			this.uiDialog.show();                                                                                               // 8718
		}                                                                                                                    // 8719
		this.uiDialog.position( this.options.position );                                                                     // 8720
		if ( !isVisible ) {                                                                                                  // 8721
			this.uiDialog.hide();                                                                                               // 8722
		}                                                                                                                    // 8723
	},                                                                                                                    // 8724
                                                                                                                       // 8725
	_setOptions: function( options ) {                                                                                    // 8726
		var that = this,                                                                                                     // 8727
			resize = false,                                                                                                     // 8728
			resizableOptions = {};                                                                                              // 8729
                                                                                                                       // 8730
		$.each( options, function( key, value ) {                                                                            // 8731
			that._setOption( key, value );                                                                                      // 8732
                                                                                                                       // 8733
			if ( key in that.sizeRelatedOptions ) {                                                                             // 8734
				resize = true;                                                                                                     // 8735
			}                                                                                                                   // 8736
			if ( key in that.resizableRelatedOptions ) {                                                                        // 8737
				resizableOptions[ key ] = value;                                                                                   // 8738
			}                                                                                                                   // 8739
		});                                                                                                                  // 8740
                                                                                                                       // 8741
		if ( resize ) {                                                                                                      // 8742
			this._size();                                                                                                       // 8743
			this._position();                                                                                                   // 8744
		}                                                                                                                    // 8745
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {                                                                   // 8746
			this.uiDialog.resizable( "option", resizableOptions );                                                              // 8747
		}                                                                                                                    // 8748
	},                                                                                                                    // 8749
                                                                                                                       // 8750
	_setOption: function( key, value ) {                                                                                  // 8751
		var isDraggable, isResizable,                                                                                        // 8752
			uiDialog = this.uiDialog;                                                                                           // 8753
                                                                                                                       // 8754
		if ( key === "dialogClass" ) {                                                                                       // 8755
			uiDialog                                                                                                            // 8756
				.removeClass( this.options.dialogClass )                                                                           // 8757
				.addClass( value );                                                                                                // 8758
		}                                                                                                                    // 8759
                                                                                                                       // 8760
		if ( key === "disabled" ) {                                                                                          // 8761
			return;                                                                                                             // 8762
		}                                                                                                                    // 8763
                                                                                                                       // 8764
		this._super( key, value );                                                                                           // 8765
                                                                                                                       // 8766
		if ( key === "appendTo" ) {                                                                                          // 8767
			this.uiDialog.appendTo( this._appendTo() );                                                                         // 8768
		}                                                                                                                    // 8769
                                                                                                                       // 8770
		if ( key === "buttons" ) {                                                                                           // 8771
			this._createButtons();                                                                                              // 8772
		}                                                                                                                    // 8773
                                                                                                                       // 8774
		if ( key === "closeText" ) {                                                                                         // 8775
			this.uiDialogTitlebarClose.button({                                                                                 // 8776
				// Ensure that we always pass a string                                                                             // 8777
				label: "" + value                                                                                                  // 8778
			});                                                                                                                 // 8779
		}                                                                                                                    // 8780
                                                                                                                       // 8781
		if ( key === "draggable" ) {                                                                                         // 8782
			isDraggable = uiDialog.is( ":data(ui-draggable)" );                                                                 // 8783
			if ( isDraggable && !value ) {                                                                                      // 8784
				uiDialog.draggable( "destroy" );                                                                                   // 8785
			}                                                                                                                   // 8786
                                                                                                                       // 8787
			if ( !isDraggable && value ) {                                                                                      // 8788
				this._makeDraggable();                                                                                             // 8789
			}                                                                                                                   // 8790
		}                                                                                                                    // 8791
                                                                                                                       // 8792
		if ( key === "position" ) {                                                                                          // 8793
			this._position();                                                                                                   // 8794
		}                                                                                                                    // 8795
                                                                                                                       // 8796
		if ( key === "resizable" ) {                                                                                         // 8797
			// currently resizable, becoming non-resizable                                                                      // 8798
			isResizable = uiDialog.is( ":data(ui-resizable)" );                                                                 // 8799
			if ( isResizable && !value ) {                                                                                      // 8800
				uiDialog.resizable( "destroy" );                                                                                   // 8801
			}                                                                                                                   // 8802
                                                                                                                       // 8803
			// currently resizable, changing handles                                                                            // 8804
			if ( isResizable && typeof value === "string" ) {                                                                   // 8805
				uiDialog.resizable( "option", "handles", value );                                                                  // 8806
			}                                                                                                                   // 8807
                                                                                                                       // 8808
			// currently non-resizable, becoming resizable                                                                      // 8809
			if ( !isResizable && value !== false ) {                                                                            // 8810
				this._makeResizable();                                                                                             // 8811
			}                                                                                                                   // 8812
		}                                                                                                                    // 8813
                                                                                                                       // 8814
		if ( key === "title" ) {                                                                                             // 8815
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );                                                    // 8816
		}                                                                                                                    // 8817
	},                                                                                                                    // 8818
                                                                                                                       // 8819
	_size: function() {                                                                                                   // 8820
		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content                                         // 8821
		// divs will both have width and height set, so we need to reset them                                                // 8822
		var nonContentHeight, minContentHeight, maxContentHeight,                                                            // 8823
			options = this.options;                                                                                             // 8824
                                                                                                                       // 8825
		// Reset content sizing                                                                                              // 8826
		this.element.show().css({                                                                                            // 8827
			width: "auto",                                                                                                      // 8828
			minHeight: 0,                                                                                                       // 8829
			maxHeight: "none",                                                                                                  // 8830
			height: 0                                                                                                           // 8831
		});                                                                                                                  // 8832
                                                                                                                       // 8833
		if ( options.minWidth > options.width ) {                                                                            // 8834
			options.width = options.minWidth;                                                                                   // 8835
		}                                                                                                                    // 8836
                                                                                                                       // 8837
		// reset wrapper sizing                                                                                              // 8838
		// determine the height of all the non-content elements                                                              // 8839
		nonContentHeight = this.uiDialog.css({                                                                               // 8840
				height: "auto",                                                                                                    // 8841
				width: options.width                                                                                               // 8842
			})                                                                                                                  // 8843
			.outerHeight();                                                                                                     // 8844
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );                                              // 8845
		maxContentHeight = typeof options.maxHeight === "number" ?                                                           // 8846
			Math.max( 0, options.maxHeight - nonContentHeight ) :                                                               // 8847
			"none";                                                                                                             // 8848
                                                                                                                       // 8849
		if ( options.height === "auto" ) {                                                                                   // 8850
			this.element.css({                                                                                                  // 8851
				minHeight: minContentHeight,                                                                                       // 8852
				maxHeight: maxContentHeight,                                                                                       // 8853
				height: "auto"                                                                                                     // 8854
			});                                                                                                                 // 8855
		} else {                                                                                                             // 8856
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );                                            // 8857
		}                                                                                                                    // 8858
                                                                                                                       // 8859
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {                                                                   // 8860
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );                                                // 8861
		}                                                                                                                    // 8862
	},                                                                                                                    // 8863
                                                                                                                       // 8864
	_blockFrames: function() {                                                                                            // 8865
		this.iframeBlocks = this.document.find( "iframe" ).map(function() {                                                  // 8866
			var iframe = $( this );                                                                                             // 8867
                                                                                                                       // 8868
			return $( "<div>" )                                                                                                 // 8869
				.css({                                                                                                             // 8870
					position: "absolute",                                                                                             // 8871
					width: iframe.outerWidth(),                                                                                       // 8872
					height: iframe.outerHeight()                                                                                      // 8873
				})                                                                                                                 // 8874
				.appendTo( iframe.parent() )                                                                                       // 8875
				.offset( iframe.offset() )[0];                                                                                     // 8876
		});                                                                                                                  // 8877
	},                                                                                                                    // 8878
                                                                                                                       // 8879
	_unblockFrames: function() {                                                                                          // 8880
		if ( this.iframeBlocks ) {                                                                                           // 8881
			this.iframeBlocks.remove();                                                                                         // 8882
			delete this.iframeBlocks;                                                                                           // 8883
		}                                                                                                                    // 8884
	},                                                                                                                    // 8885
                                                                                                                       // 8886
	_allowInteraction: function( event ) {                                                                                // 8887
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {                                                            // 8888
			return true;                                                                                                        // 8889
		}                                                                                                                    // 8890
                                                                                                                       // 8891
		// TODO: Remove hack when datepicker implements                                                                      // 8892
		// the .ui-front logic (#8989)                                                                                       // 8893
		return !!$( event.target ).closest( ".ui-datepicker" ).length;                                                       // 8894
	},                                                                                                                    // 8895
                                                                                                                       // 8896
	_createOverlay: function() {                                                                                          // 8897
		if ( !this.options.modal ) {                                                                                         // 8898
			return;                                                                                                             // 8899
		}                                                                                                                    // 8900
                                                                                                                       // 8901
		// We use a delay in case the overlay is created from an                                                             // 8902
		// event that we're going to be cancelling (#2804)                                                                   // 8903
		var isOpening = true;                                                                                                // 8904
		this._delay(function() {                                                                                             // 8905
			isOpening = false;                                                                                                  // 8906
		});                                                                                                                  // 8907
                                                                                                                       // 8908
		if ( !this.document.data( "ui-dialog-overlays" ) ) {                                                                 // 8909
                                                                                                                       // 8910
			// Prevent use of anchors and inputs                                                                                // 8911
			// Using _on() for an event handler shared across many instances is                                                 // 8912
			// safe because the dialogs stack and must be closed in reverse order                                               // 8913
			this._on( this.document, {                                                                                          // 8914
				focusin: function( event ) {                                                                                       // 8915
					if ( isOpening ) {                                                                                                // 8916
						return;                                                                                                          // 8917
					}                                                                                                                 // 8918
                                                                                                                       // 8919
					if ( !this._allowInteraction( event ) ) {                                                                         // 8920
						event.preventDefault();                                                                                          // 8921
						this._trackingInstances()[ 0 ]._focusTabbable();                                                                 // 8922
					}                                                                                                                 // 8923
				}                                                                                                                  // 8924
			});                                                                                                                 // 8925
		}                                                                                                                    // 8926
                                                                                                                       // 8927
		this.overlay = $( "<div>" )                                                                                          // 8928
			.addClass( "ui-widget-overlay ui-front" )                                                                           // 8929
			.appendTo( this._appendTo() );                                                                                      // 8930
		this._on( this.overlay, {                                                                                            // 8931
			mousedown: "_keepFocus"                                                                                             // 8932
		});                                                                                                                  // 8933
		this.document.data( "ui-dialog-overlays",                                                                            // 8934
			(this.document.data( "ui-dialog-overlays" ) || 0) + 1 );                                                            // 8935
	},                                                                                                                    // 8936
                                                                                                                       // 8937
	_destroyOverlay: function() {                                                                                         // 8938
		if ( !this.options.modal ) {                                                                                         // 8939
			return;                                                                                                             // 8940
		}                                                                                                                    // 8941
                                                                                                                       // 8942
		if ( this.overlay ) {                                                                                                // 8943
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;                                                      // 8944
                                                                                                                       // 8945
			if ( !overlays ) {                                                                                                  // 8946
				this.document                                                                                                      // 8947
					.unbind( "focusin" )                                                                                              // 8948
					.removeData( "ui-dialog-overlays" );                                                                              // 8949
			} else {                                                                                                            // 8950
				this.document.data( "ui-dialog-overlays", overlays );                                                              // 8951
			}                                                                                                                   // 8952
                                                                                                                       // 8953
			this.overlay.remove();                                                                                              // 8954
			this.overlay = null;                                                                                                // 8955
		}                                                                                                                    // 8956
	}                                                                                                                     // 8957
});                                                                                                                    // 8958
                                                                                                                       // 8959
                                                                                                                       // 8960
/*!                                                                                                                    // 8961
 * jQuery UI Droppable 1.11.2                                                                                          // 8962
 * http://jqueryui.com                                                                                                 // 8963
 *                                                                                                                     // 8964
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 8965
 * Released under the MIT license.                                                                                     // 8966
 * http://jquery.org/license                                                                                           // 8967
 *                                                                                                                     // 8968
 * http://api.jqueryui.com/droppable/                                                                                  // 8969
 */                                                                                                                    // 8970
                                                                                                                       // 8971
                                                                                                                       // 8972
$.widget( "ui.droppable", {                                                                                            // 8973
	version: "1.11.2",                                                                                                    // 8974
	widgetEventPrefix: "drop",                                                                                            // 8975
	options: {                                                                                                            // 8976
		accept: "*",                                                                                                         // 8977
		activeClass: false,                                                                                                  // 8978
		addClasses: true,                                                                                                    // 8979
		greedy: false,                                                                                                       // 8980
		hoverClass: false,                                                                                                   // 8981
		scope: "default",                                                                                                    // 8982
		tolerance: "intersect",                                                                                              // 8983
                                                                                                                       // 8984
		// callbacks                                                                                                         // 8985
		activate: null,                                                                                                      // 8986
		deactivate: null,                                                                                                    // 8987
		drop: null,                                                                                                          // 8988
		out: null,                                                                                                           // 8989
		over: null                                                                                                           // 8990
	},                                                                                                                    // 8991
	_create: function() {                                                                                                 // 8992
                                                                                                                       // 8993
		var proportions,                                                                                                     // 8994
			o = this.options,                                                                                                   // 8995
			accept = o.accept;                                                                                                  // 8996
                                                                                                                       // 8997
		this.isover = false;                                                                                                 // 8998
		this.isout = true;                                                                                                   // 8999
                                                                                                                       // 9000
		this.accept = $.isFunction( accept ) ? accept : function( d ) {                                                      // 9001
			return d.is( accept );                                                                                              // 9002
		};                                                                                                                   // 9003
                                                                                                                       // 9004
		this.proportions = function( /* valueToWrite */ ) {                                                                  // 9005
			if ( arguments.length ) {                                                                                           // 9006
				// Store the droppable's proportions                                                                               // 9007
				proportions = arguments[ 0 ];                                                                                      // 9008
			} else {                                                                                                            // 9009
				// Retrieve or derive the droppable's proportions                                                                  // 9010
				return proportions ?                                                                                               // 9011
					proportions :                                                                                                     // 9012
					proportions = {                                                                                                   // 9013
						width: this.element[ 0 ].offsetWidth,                                                                            // 9014
						height: this.element[ 0 ].offsetHeight                                                                           // 9015
					};                                                                                                                // 9016
			}                                                                                                                   // 9017
		};                                                                                                                   // 9018
                                                                                                                       // 9019
		this._addToManager( o.scope );                                                                                       // 9020
                                                                                                                       // 9021
		o.addClasses && this.element.addClass( "ui-droppable" );                                                             // 9022
                                                                                                                       // 9023
	},                                                                                                                    // 9024
                                                                                                                       // 9025
	_addToManager: function( scope ) {                                                                                    // 9026
		// Add the reference and positions to the manager                                                                    // 9027
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];                                       // 9028
		$.ui.ddmanager.droppables[ scope ].push( this );                                                                     // 9029
	},                                                                                                                    // 9030
                                                                                                                       // 9031
	_splice: function( drop ) {                                                                                           // 9032
		var i = 0;                                                                                                           // 9033
		for ( ; i < drop.length; i++ ) {                                                                                     // 9034
			if ( drop[ i ] === this ) {                                                                                         // 9035
				drop.splice( i, 1 );                                                                                               // 9036
			}                                                                                                                   // 9037
		}                                                                                                                    // 9038
	},                                                                                                                    // 9039
                                                                                                                       // 9040
	_destroy: function() {                                                                                                // 9041
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];                                                          // 9042
                                                                                                                       // 9043
		this._splice( drop );                                                                                                // 9044
                                                                                                                       // 9045
		this.element.removeClass( "ui-droppable ui-droppable-disabled" );                                                    // 9046
	},                                                                                                                    // 9047
                                                                                                                       // 9048
	_setOption: function( key, value ) {                                                                                  // 9049
                                                                                                                       // 9050
		if ( key === "accept" ) {                                                                                            // 9051
			this.accept = $.isFunction( value ) ? value : function( d ) {                                                       // 9052
				return d.is( value );                                                                                              // 9053
			};                                                                                                                  // 9054
		} else if ( key === "scope" ) {                                                                                      // 9055
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];                                                         // 9056
                                                                                                                       // 9057
			this._splice( drop );                                                                                               // 9058
			this._addToManager( value );                                                                                        // 9059
		}                                                                                                                    // 9060
                                                                                                                       // 9061
		this._super( key, value );                                                                                           // 9062
	},                                                                                                                    // 9063
                                                                                                                       // 9064
	_activate: function( event ) {                                                                                        // 9065
		var draggable = $.ui.ddmanager.current;                                                                              // 9066
		if ( this.options.activeClass ) {                                                                                    // 9067
			this.element.addClass( this.options.activeClass );                                                                  // 9068
		}                                                                                                                    // 9069
		if ( draggable ){                                                                                                    // 9070
			this._trigger( "activate", event, this.ui( draggable ) );                                                           // 9071
		}                                                                                                                    // 9072
	},                                                                                                                    // 9073
                                                                                                                       // 9074
	_deactivate: function( event ) {                                                                                      // 9075
		var draggable = $.ui.ddmanager.current;                                                                              // 9076
		if ( this.options.activeClass ) {                                                                                    // 9077
			this.element.removeClass( this.options.activeClass );                                                               // 9078
		}                                                                                                                    // 9079
		if ( draggable ){                                                                                                    // 9080
			this._trigger( "deactivate", event, this.ui( draggable ) );                                                         // 9081
		}                                                                                                                    // 9082
	},                                                                                                                    // 9083
                                                                                                                       // 9084
	_over: function( event ) {                                                                                            // 9085
                                                                                                                       // 9086
		var draggable = $.ui.ddmanager.current;                                                                              // 9087
                                                                                                                       // 9088
		// Bail if draggable and droppable are same element                                                                  // 9089
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {                     // 9090
			return;                                                                                                             // 9091
		}                                                                                                                    // 9092
                                                                                                                       // 9093
		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {                       // 9094
			if ( this.options.hoverClass ) {                                                                                    // 9095
				this.element.addClass( this.options.hoverClass );                                                                  // 9096
			}                                                                                                                   // 9097
			this._trigger( "over", event, this.ui( draggable ) );                                                               // 9098
		}                                                                                                                    // 9099
                                                                                                                       // 9100
	},                                                                                                                    // 9101
                                                                                                                       // 9102
	_out: function( event ) {                                                                                             // 9103
                                                                                                                       // 9104
		var draggable = $.ui.ddmanager.current;                                                                              // 9105
                                                                                                                       // 9106
		// Bail if draggable and droppable are same element                                                                  // 9107
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {                     // 9108
			return;                                                                                                             // 9109
		}                                                                                                                    // 9110
                                                                                                                       // 9111
		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {                       // 9112
			if ( this.options.hoverClass ) {                                                                                    // 9113
				this.element.removeClass( this.options.hoverClass );                                                               // 9114
			}                                                                                                                   // 9115
			this._trigger( "out", event, this.ui( draggable ) );                                                                // 9116
		}                                                                                                                    // 9117
                                                                                                                       // 9118
	},                                                                                                                    // 9119
                                                                                                                       // 9120
	_drop: function( event, custom ) {                                                                                    // 9121
                                                                                                                       // 9122
		var draggable = custom || $.ui.ddmanager.current,                                                                    // 9123
			childrenIntersection = false;                                                                                       // 9124
                                                                                                                       // 9125
		// Bail if draggable and droppable are same element                                                                  // 9126
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {                     // 9127
			return false;                                                                                                       // 9128
		}                                                                                                                    // 9129
                                                                                                                       // 9130
		this.element.find( ":data(ui-droppable)" ).not( ".ui-draggable-dragging" ).each(function() {                         // 9131
			var inst = $( this ).droppable( "instance" );                                                                       // 9132
			if (                                                                                                                // 9133
				inst.options.greedy &&                                                                                             // 9134
				!inst.options.disabled &&                                                                                          // 9135
				inst.options.scope === draggable.options.scope &&                                                                  // 9136
				inst.accept.call( inst.element[ 0 ], ( draggable.currentItem || draggable.element ) ) &&                           // 9137
				$.ui.intersect( draggable, $.extend( inst, { offset: inst.element.offset() } ), inst.options.tolerance, event )    // 9138
			) { childrenIntersection = true; return false; }                                                                    // 9139
		});                                                                                                                  // 9140
		if ( childrenIntersection ) {                                                                                        // 9141
			return false;                                                                                                       // 9142
		}                                                                                                                    // 9143
                                                                                                                       // 9144
		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {                       // 9145
			if ( this.options.activeClass ) {                                                                                   // 9146
				this.element.removeClass( this.options.activeClass );                                                              // 9147
			}                                                                                                                   // 9148
			if ( this.options.hoverClass ) {                                                                                    // 9149
				this.element.removeClass( this.options.hoverClass );                                                               // 9150
			}                                                                                                                   // 9151
			this._trigger( "drop", event, this.ui( draggable ) );                                                               // 9152
			return this.element;                                                                                                // 9153
		}                                                                                                                    // 9154
                                                                                                                       // 9155
		return false;                                                                                                        // 9156
                                                                                                                       // 9157
	},                                                                                                                    // 9158
                                                                                                                       // 9159
	ui: function( c ) {                                                                                                   // 9160
		return {                                                                                                             // 9161
			draggable: ( c.currentItem || c.element ),                                                                          // 9162
			helper: c.helper,                                                                                                   // 9163
			position: c.position,                                                                                               // 9164
			offset: c.positionAbs                                                                                               // 9165
		};                                                                                                                   // 9166
	}                                                                                                                     // 9167
                                                                                                                       // 9168
});                                                                                                                    // 9169
                                                                                                                       // 9170
$.ui.intersect = (function() {                                                                                         // 9171
	function isOverAxis( x, reference, size ) {                                                                           // 9172
		return ( x >= reference ) && ( x < ( reference + size ) );                                                           // 9173
	}                                                                                                                     // 9174
                                                                                                                       // 9175
	return function( draggable, droppable, toleranceMode, event ) {                                                       // 9176
                                                                                                                       // 9177
		if ( !droppable.offset ) {                                                                                           // 9178
			return false;                                                                                                       // 9179
		}                                                                                                                    // 9180
                                                                                                                       // 9181
		var x1 = ( draggable.positionAbs || draggable.position.absolute ).left + draggable.margins.left,                     // 9182
			y1 = ( draggable.positionAbs || draggable.position.absolute ).top + draggable.margins.top,                          // 9183
			x2 = x1 + draggable.helperProportions.width,                                                                        // 9184
			y2 = y1 + draggable.helperProportions.height,                                                                       // 9185
			l = droppable.offset.left,                                                                                          // 9186
			t = droppable.offset.top,                                                                                           // 9187
			r = l + droppable.proportions().width,                                                                              // 9188
			b = t + droppable.proportions().height;                                                                             // 9189
                                                                                                                       // 9190
		switch ( toleranceMode ) {                                                                                           // 9191
		case "fit":                                                                                                          // 9192
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );                                                                // 9193
		case "intersect":                                                                                                    // 9194
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half                                        // 9195
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half                                                 // 9196
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half                                              // 9197
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half                                                 // 9198
		case "pointer":                                                                                                      // 9199
			return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":                                                                                                        // 9201
			return (                                                                                                            // 9202
				( y1 >= t && y1 <= b ) || // Top edge touching                                                                     // 9203
				( y2 >= t && y2 <= b ) || // Bottom edge touching                                                                  // 9204
				( y1 < t && y2 > b ) // Surrounded vertically                                                                      // 9205
			) && (                                                                                                              // 9206
				( x1 >= l && x1 <= r ) || // Left edge touching                                                                    // 9207
				( x2 >= l && x2 <= r ) || // Right edge touching                                                                   // 9208
				( x1 < l && x2 > r ) // Surrounded horizontally                                                                    // 9209
			);                                                                                                                  // 9210
		default:                                                                                                             // 9211
			return false;                                                                                                       // 9212
		}                                                                                                                    // 9213
	};                                                                                                                    // 9214
})();                                                                                                                  // 9215
                                                                                                                       // 9216
/*                                                                                                                     // 9217
	This manager tracks offsets of draggables and droppables                                                              // 9218
*/                                                                                                                     // 9219
$.ui.ddmanager = {                                                                                                     // 9220
	current: null,                                                                                                        // 9221
	droppables: { "default": [] },                                                                                        // 9222
	prepareOffsets: function( t, event ) {                                                                                // 9223
                                                                                                                       // 9224
		var i, j,                                                                                                            // 9225
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],                                                             // 9226
			type = event ? event.type : null, // workaround for #2317                                                           // 9227
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();                                      // 9228
                                                                                                                       // 9229
		droppablesLoop: for ( i = 0; i < m.length; i++ ) {                                                                   // 9230
                                                                                                                       // 9231
			// No disabled and non-accepted                                                                                     // 9232
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ], ( t.currentItem || t.element ) ) ) ) {
				continue;                                                                                                          // 9234
			}                                                                                                                   // 9235
                                                                                                                       // 9236
			// Filter out elements in the current dragged item                                                                  // 9237
			for ( j = 0; j < list.length; j++ ) {                                                                               // 9238
				if ( list[ j ] === m[ i ].element[ 0 ] ) {                                                                         // 9239
					m[ i ].proportions().height = 0;                                                                                  // 9240
					continue droppablesLoop;                                                                                          // 9241
				}                                                                                                                  // 9242
			}                                                                                                                   // 9243
                                                                                                                       // 9244
			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";                                                        // 9245
			if ( !m[ i ].visible ) {                                                                                            // 9246
				continue;                                                                                                          // 9247
			}                                                                                                                   // 9248
                                                                                                                       // 9249
			// Activate the droppable if used directly from draggables                                                          // 9250
			if ( type === "mousedown" ) {                                                                                       // 9251
				m[ i ]._activate.call( m[ i ], event );                                                                            // 9252
			}                                                                                                                   // 9253
                                                                                                                       // 9254
			m[ i ].offset = m[ i ].element.offset();                                                                            // 9255
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });           // 9256
                                                                                                                       // 9257
		}                                                                                                                    // 9258
                                                                                                                       // 9259
	},                                                                                                                    // 9260
	drop: function( draggable, event ) {                                                                                  // 9261
                                                                                                                       // 9262
		var dropped = false;                                                                                                 // 9263
		// Create a copy of the droppables in case the list changes during the drop (#9116)                                  // 9264
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {                         // 9265
                                                                                                                       // 9266
			if ( !this.options ) {                                                                                              // 9267
				return;                                                                                                            // 9268
			}                                                                                                                   // 9269
			if ( !this.options.disabled && this.visible && $.ui.intersect( draggable, this, this.options.tolerance, event ) ) { // 9270
				dropped = this._drop.call( this, event ) || dropped;                                                               // 9271
			}                                                                                                                   // 9272
                                                                                                                       // 9273
			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;                                                                                                 // 9275
				this.isover = false;                                                                                               // 9276
				this._deactivate.call( this, event );                                                                              // 9277
			}                                                                                                                   // 9278
                                                                                                                       // 9279
		});                                                                                                                  // 9280
		return dropped;                                                                                                      // 9281
                                                                                                                       // 9282
	},                                                                                                                    // 9283
	dragStart: function( draggable, event ) {                                                                             // 9284
		// Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {                                      // 9286
			if ( !draggable.options.refreshPositions ) {                                                                        // 9287
				$.ui.ddmanager.prepareOffsets( draggable, event );                                                                 // 9288
			}                                                                                                                   // 9289
		});                                                                                                                  // 9290
	},                                                                                                                    // 9291
	drag: function( draggable, event ) {                                                                                  // 9292
                                                                                                                       // 9293
		// If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse. // 9294
		if ( draggable.options.refreshPositions ) {                                                                          // 9295
			$.ui.ddmanager.prepareOffsets( draggable, event );                                                                  // 9296
		}                                                                                                                    // 9297
                                                                                                                       // 9298
		// Run through all droppables and check their positions based on specific tolerance options                          // 9299
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {                                     // 9300
                                                                                                                       // 9301
			if ( this.options.disabled || this.greedyChild || !this.visible ) {                                                 // 9302
				return;                                                                                                            // 9303
			}                                                                                                                   // 9304
                                                                                                                       // 9305
			var parentInstance, scope, parent,                                                                                  // 9306
				intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),                                     // 9307
				c = !intersects && this.isover ? "isout" : ( intersects && !this.isover ? "isover" : null );                       // 9308
			if ( !c ) {                                                                                                         // 9309
				return;                                                                                                            // 9310
			}                                                                                                                   // 9311
                                                                                                                       // 9312
			if ( this.options.greedy ) {                                                                                        // 9313
				// find droppable parents with same scope                                                                          // 9314
				scope = this.options.scope;                                                                                        // 9315
				parent = this.element.parents( ":data(ui-droppable)" ).filter(function() {                                         // 9316
					return $( this ).droppable( "instance" ).options.scope === scope;                                                 // 9317
				});                                                                                                                // 9318
                                                                                                                       // 9319
				if ( parent.length ) {                                                                                             // 9320
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );                                                        // 9321
					parentInstance.greedyChild = ( c === "isover" );                                                                  // 9322
				}                                                                                                                  // 9323
			}                                                                                                                   // 9324
                                                                                                                       // 9325
			// we just moved into a greedy child                                                                                // 9326
			if ( parentInstance && c === "isover" ) {                                                                           // 9327
				parentInstance.isover = false;                                                                                     // 9328
				parentInstance.isout = true;                                                                                       // 9329
				parentInstance._out.call( parentInstance, event );                                                                 // 9330
			}                                                                                                                   // 9331
                                                                                                                       // 9332
			this[ c ] = true;                                                                                                   // 9333
			this[c === "isout" ? "isover" : "isout"] = false;                                                                   // 9334
			this[c === "isover" ? "_over" : "_out"].call( this, event );                                                        // 9335
                                                                                                                       // 9336
			// we just moved out of a greedy child                                                                              // 9337
			if ( parentInstance && c === "isout" ) {                                                                            // 9338
				parentInstance.isout = false;                                                                                      // 9339
				parentInstance.isover = true;                                                                                      // 9340
				parentInstance._over.call( parentInstance, event );                                                                // 9341
			}                                                                                                                   // 9342
		});                                                                                                                  // 9343
                                                                                                                       // 9344
	},                                                                                                                    // 9345
	dragStop: function( draggable, event ) {                                                                              // 9346
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );                                               // 9347
		// Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {                                                                         // 9349
			$.ui.ddmanager.prepareOffsets( draggable, event );                                                                  // 9350
		}                                                                                                                    // 9351
	}                                                                                                                     // 9352
};                                                                                                                     // 9353
                                                                                                                       // 9354
var droppable = $.ui.droppable;                                                                                        // 9355
                                                                                                                       // 9356
                                                                                                                       // 9357
/*!                                                                                                                    // 9358
 * jQuery UI Effects 1.11.2                                                                                            // 9359
 * http://jqueryui.com                                                                                                 // 9360
 *                                                                                                                     // 9361
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 9362
 * Released under the MIT license.                                                                                     // 9363
 * http://jquery.org/license                                                                                           // 9364
 *                                                                                                                     // 9365
 * http://api.jqueryui.com/category/effects-core/                                                                      // 9366
 */                                                                                                                    // 9367
                                                                                                                       // 9368
                                                                                                                       // 9369
var dataSpace = "ui-effects-",                                                                                         // 9370
                                                                                                                       // 9371
	// Create a local jQuery because jQuery Color relies on it and the                                                    // 9372
	// global may not exist with AMD and a custom build (#10199)                                                          // 9373
	jQuery = $;                                                                                                           // 9374
                                                                                                                       // 9375
$.effects = {                                                                                                          // 9376
	effect: {}                                                                                                            // 9377
};                                                                                                                     // 9378
                                                                                                                       // 9379
/*!                                                                                                                    // 9380
 * jQuery Color Animations v2.1.2                                                                                      // 9381
 * https://github.com/jquery/jquery-color                                                                              // 9382
 *                                                                                                                     // 9383
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 9384
 * Released under the MIT license.                                                                                     // 9385
 * http://jquery.org/license                                                                                           // 9386
 *                                                                                                                     // 9387
 * Date: Wed Jan 16 08:47:09 2013 -0600                                                                                // 9388
 */                                                                                                                    // 9389
(function( jQuery, undefined ) {                                                                                       // 9390
                                                                                                                       // 9391
	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
                                                                                                                       // 9393
	// plusequals test for += 100 -= 100                                                                                  // 9394
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,                                                                              // 9395
	// a set of RE's that can match strings and generate color tuples.                                                    // 9396
	stringParsers = [ {                                                                                                   // 9397
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,                          // 9398
			parse: function( execResult ) {                                                                                     // 9399
				return [                                                                                                           // 9400
					execResult[ 1 ],                                                                                                  // 9401
					execResult[ 2 ],                                                                                                  // 9402
					execResult[ 3 ],                                                                                                  // 9403
					execResult[ 4 ]                                                                                                   // 9404
				];                                                                                                                 // 9405
			}                                                                                                                   // 9406
		}, {                                                                                                                 // 9407
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,  // 9408
			parse: function( execResult ) {                                                                                     // 9409
				return [                                                                                                           // 9410
					execResult[ 1 ] * 2.55,                                                                                           // 9411
					execResult[ 2 ] * 2.55,                                                                                           // 9412
					execResult[ 3 ] * 2.55,                                                                                           // 9413
					execResult[ 4 ]                                                                                                   // 9414
				];                                                                                                                 // 9415
			}                                                                                                                   // 9416
		}, {                                                                                                                 // 9417
			// this regex ignores A-F because it's compared against an already lowercased string                                // 9418
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,                                                                     // 9419
			parse: function( execResult ) {                                                                                     // 9420
				return [                                                                                                           // 9421
					parseInt( execResult[ 1 ], 16 ),                                                                                  // 9422
					parseInt( execResult[ 2 ], 16 ),                                                                                  // 9423
					parseInt( execResult[ 3 ], 16 )                                                                                   // 9424
				];                                                                                                                 // 9425
			}                                                                                                                   // 9426
		}, {                                                                                                                 // 9427
			// this regex ignores A-F because it's compared against an already lowercased string                                // 9428
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,                                                                              // 9429
			parse: function( execResult ) {                                                                                     // 9430
				return [                                                                                                           // 9431
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),                                                                // 9432
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),                                                                // 9433
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )                                                                 // 9434
				];                                                                                                                 // 9435
			}                                                                                                                   // 9436
		}, {                                                                                                                 // 9437
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,    // 9438
			space: "hsla",                                                                                                      // 9439
			parse: function( execResult ) {                                                                                     // 9440
				return [                                                                                                           // 9441
					execResult[ 1 ],                                                                                                  // 9442
					execResult[ 2 ] / 100,                                                                                            // 9443
					execResult[ 3 ] / 100,                                                                                            // 9444
					execResult[ 4 ]                                                                                                   // 9445
				];                                                                                                                 // 9446
			}                                                                                                                   // 9447
		} ],                                                                                                                 // 9448
                                                                                                                       // 9449
	// jQuery.Color( )                                                                                                    // 9450
	color = jQuery.Color = function( color, green, blue, alpha ) {                                                        // 9451
		return new jQuery.Color.fn.parse( color, green, blue, alpha );                                                       // 9452
	},                                                                                                                    // 9453
	spaces = {                                                                                                            // 9454
		rgba: {                                                                                                              // 9455
			props: {                                                                                                            // 9456
				red: {                                                                                                             // 9457
					idx: 0,                                                                                                           // 9458
					type: "byte"                                                                                                      // 9459
				},                                                                                                                 // 9460
				green: {                                                                                                           // 9461
					idx: 1,                                                                                                           // 9462
					type: "byte"                                                                                                      // 9463
				},                                                                                                                 // 9464
				blue: {                                                                                                            // 9465
					idx: 2,                                                                                                           // 9466
					type: "byte"                                                                                                      // 9467
				}                                                                                                                  // 9468
			}                                                                                                                   // 9469
		},                                                                                                                   // 9470
                                                                                                                       // 9471
		hsla: {                                                                                                              // 9472
			props: {                                                                                                            // 9473
				hue: {                                                                                                             // 9474
					idx: 0,                                                                                                           // 9475
					type: "degrees"                                                                                                   // 9476
				},                                                                                                                 // 9477
				saturation: {                                                                                                      // 9478
					idx: 1,                                                                                                           // 9479
					type: "percent"                                                                                                   // 9480
				},                                                                                                                 // 9481
				lightness: {                                                                                                       // 9482
					idx: 2,                                                                                                           // 9483
					type: "percent"                                                                                                   // 9484
				}                                                                                                                  // 9485
			}                                                                                                                   // 9486
		}                                                                                                                    // 9487
	},                                                                                                                    // 9488
	propTypes = {                                                                                                         // 9489
		"byte": {                                                                                                            // 9490
			floor: true,                                                                                                        // 9491
			max: 255                                                                                                            // 9492
		},                                                                                                                   // 9493
		"percent": {                                                                                                         // 9494
			max: 1                                                                                                              // 9495
		},                                                                                                                   // 9496
		"degrees": {                                                                                                         // 9497
			mod: 360,                                                                                                           // 9498
			floor: true                                                                                                         // 9499
		}                                                                                                                    // 9500
	},                                                                                                                    // 9501
	support = color.support = {},                                                                                         // 9502
                                                                                                                       // 9503
	// element for support tests                                                                                          // 9504
	supportElem = jQuery( "<p>" )[ 0 ],                                                                                   // 9505
                                                                                                                       // 9506
	// colors = jQuery.Color.names                                                                                        // 9507
	colors,                                                                                                               // 9508
                                                                                                                       // 9509
	// local aliases of functions called often                                                                            // 9510
	each = jQuery.each;                                                                                                   // 9511
                                                                                                                       // 9512
// determine rgba support immediately                                                                                  // 9513
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";                                                         // 9514
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;                                               // 9515
                                                                                                                       // 9516
// define cache name and alpha properties                                                                              // 9517
// for rgba and hsla spaces                                                                                            // 9518
each( spaces, function( spaceName, space ) {                                                                           // 9519
	space.cache = "_" + spaceName;                                                                                        // 9520
	space.props.alpha = {                                                                                                 // 9521
		idx: 3,                                                                                                              // 9522
		type: "percent",                                                                                                     // 9523
		def: 1                                                                                                               // 9524
	};                                                                                                                    // 9525
});                                                                                                                    // 9526
                                                                                                                       // 9527
function clamp( value, prop, allowEmpty ) {                                                                            // 9528
	var type = propTypes[ prop.type ] || {};                                                                              // 9529
                                                                                                                       // 9530
	if ( value == null ) {                                                                                                // 9531
		return (allowEmpty || !prop.def) ? null : prop.def;                                                                  // 9532
	}                                                                                                                     // 9533
                                                                                                                       // 9534
	// ~~ is an short way of doing floor for positive numbers                                                             // 9535
	value = type.floor ? ~~value : parseFloat( value );                                                                   // 9536
                                                                                                                       // 9537
	// IE will pass in empty strings as value for alpha,                                                                  // 9538
	// which will hit this case                                                                                           // 9539
	if ( isNaN( value ) ) {                                                                                               // 9540
		return prop.def;                                                                                                     // 9541
	}                                                                                                                     // 9542
                                                                                                                       // 9543
	if ( type.mod ) {                                                                                                     // 9544
		// we add mod before modding to make sure that negatives values                                                      // 9545
		// get converted properly: -10 -> 350                                                                                // 9546
		return (value + type.mod) % type.mod;                                                                                // 9547
	}                                                                                                                     // 9548
                                                                                                                       // 9549
	// for now all property types without mod have min and max                                                            // 9550
	return 0 > value ? 0 : type.max < value ? type.max : value;                                                           // 9551
}                                                                                                                      // 9552
                                                                                                                       // 9553
function stringParse( string ) {                                                                                       // 9554
	var inst = color(),                                                                                                   // 9555
		rgba = inst._rgba = [];                                                                                              // 9556
                                                                                                                       // 9557
	string = string.toLowerCase();                                                                                        // 9558
                                                                                                                       // 9559
	each( stringParsers, function( i, parser ) {                                                                          // 9560
		var parsed,                                                                                                          // 9561
			match = parser.re.exec( string ),                                                                                   // 9562
			values = match && parser.parse( match ),                                                                            // 9563
			spaceName = parser.space || "rgba";                                                                                 // 9564
                                                                                                                       // 9565
		if ( values ) {                                                                                                      // 9566
			parsed = inst[ spaceName ]( values );                                                                               // 9567
                                                                                                                       // 9568
			// if this was an rgba parse the assignment might happen twice                                                      // 9569
			// oh well....                                                                                                      // 9570
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];                                            // 9571
			rgba = inst._rgba = parsed._rgba;                                                                                   // 9572
                                                                                                                       // 9573
			// exit each( stringParsers ) here because we matched                                                               // 9574
			return false;                                                                                                       // 9575
		}                                                                                                                    // 9576
	});                                                                                                                   // 9577
                                                                                                                       // 9578
	// Found a stringParser that handled it                                                                               // 9579
	if ( rgba.length ) {                                                                                                  // 9580
                                                                                                                       // 9581
		// if this came from a parsed string, force "transparent" when alpha is 0                                            // 9582
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)                                                  // 9583
		if ( rgba.join() === "0,0,0,0" ) {                                                                                   // 9584
			jQuery.extend( rgba, colors.transparent );                                                                          // 9585
		}                                                                                                                    // 9586
		return inst;                                                                                                         // 9587
	}                                                                                                                     // 9588
                                                                                                                       // 9589
	// named colors                                                                                                       // 9590
	return colors[ string ];                                                                                              // 9591
}                                                                                                                      // 9592
                                                                                                                       // 9593
color.fn = jQuery.extend( color.prototype, {                                                                           // 9594
	parse: function( red, green, blue, alpha ) {                                                                          // 9595
		if ( red === undefined ) {                                                                                           // 9596
			this._rgba = [ null, null, null, null ];                                                                            // 9597
			return this;                                                                                                        // 9598
		}                                                                                                                    // 9599
		if ( red.jquery || red.nodeType ) {                                                                                  // 9600
			red = jQuery( red ).css( green );                                                                                   // 9601
			green = undefined;                                                                                                  // 9602
		}                                                                                                                    // 9603
                                                                                                                       // 9604
		var inst = this,                                                                                                     // 9605
			type = jQuery.type( red ),                                                                                          // 9606
			rgba = this._rgba = [];                                                                                             // 9607
                                                                                                                       // 9608
		// more than 1 argument specified - assume ( red, green, blue, alpha )                                               // 9609
		if ( green !== undefined ) {                                                                                         // 9610
			red = [ red, green, blue, alpha ];                                                                                  // 9611
			type = "array";                                                                                                     // 9612
		}                                                                                                                    // 9613
                                                                                                                       // 9614
		if ( type === "string" ) {                                                                                           // 9615
			return this.parse( stringParse( red ) || colors._default );                                                         // 9616
		}                                                                                                                    // 9617
                                                                                                                       // 9618
		if ( type === "array" ) {                                                                                            // 9619
			each( spaces.rgba.props, function( key, prop ) {                                                                    // 9620
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );                                                                 // 9621
			});                                                                                                                 // 9622
			return this;                                                                                                        // 9623
		}                                                                                                                    // 9624
                                                                                                                       // 9625
		if ( type === "object" ) {                                                                                           // 9626
			if ( red instanceof color ) {                                                                                       // 9627
				each( spaces, function( spaceName, space ) {                                                                       // 9628
					if ( red[ space.cache ] ) {                                                                                       // 9629
						inst[ space.cache ] = red[ space.cache ].slice();                                                                // 9630
					}                                                                                                                 // 9631
				});                                                                                                                // 9632
			} else {                                                                                                            // 9633
				each( spaces, function( spaceName, space ) {                                                                       // 9634
					var cache = space.cache;                                                                                          // 9635
					each( space.props, function( key, prop ) {                                                                        // 9636
                                                                                                                       // 9637
						// if the cache doesn't exist, and we know how to convert                                                        // 9638
						if ( !inst[ cache ] && space.to ) {                                                                              // 9639
                                                                                                                       // 9640
							// if the value was null, we don't need to copy it                                                              // 9641
							// if the key was alpha, we don't need to copy it either                                                        // 9642
							if ( key === "alpha" || red[ key ] == null ) {                                                                  // 9643
								return;                                                                                                        // 9644
							}                                                                                                               // 9645
							inst[ cache ] = space.to( inst._rgba );                                                                         // 9646
						}                                                                                                                // 9647
                                                                                                                       // 9648
						// this is the only case where we allow nulls for ALL properties.                                                // 9649
						// call clamp with alwaysAllowEmpty                                                                              // 9650
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );                                                     // 9651
					});                                                                                                               // 9652
                                                                                                                       // 9653
					// everything defined but alpha?                                                                                  // 9654
					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {                                 // 9655
						// use the default of 1                                                                                          // 9656
						inst[ cache ][ 3 ] = 1;                                                                                          // 9657
						if ( space.from ) {                                                                                              // 9658
							inst._rgba = space.from( inst[ cache ] );                                                                       // 9659
						}                                                                                                                // 9660
					}                                                                                                                 // 9661
				});                                                                                                                // 9662
			}                                                                                                                   // 9663
			return this;                                                                                                        // 9664
		}                                                                                                                    // 9665
	},                                                                                                                    // 9666
	is: function( compare ) {                                                                                             // 9667
		var is = color( compare ),                                                                                           // 9668
			same = true,                                                                                                        // 9669
			inst = this;                                                                                                        // 9670
                                                                                                                       // 9671
		each( spaces, function( _, space ) {                                                                                 // 9672
			var localCache,                                                                                                     // 9673
				isCache = is[ space.cache ];                                                                                       // 9674
			if (isCache) {                                                                                                      // 9675
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];                                      // 9676
				each( space.props, function( _, prop ) {                                                                           // 9677
					if ( isCache[ prop.idx ] != null ) {                                                                              // 9678
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );                                                       // 9679
						return same;                                                                                                     // 9680
					}                                                                                                                 // 9681
				});                                                                                                                // 9682
			}                                                                                                                   // 9683
			return same;                                                                                                        // 9684
		});                                                                                                                  // 9685
		return same;                                                                                                         // 9686
	},                                                                                                                    // 9687
	_space: function() {                                                                                                  // 9688
		var used = [],                                                                                                       // 9689
			inst = this;                                                                                                        // 9690
		each( spaces, function( spaceName, space ) {                                                                         // 9691
			if ( inst[ space.cache ] ) {                                                                                        // 9692
				used.push( spaceName );                                                                                            // 9693
			}                                                                                                                   // 9694
		});                                                                                                                  // 9695
		return used.pop();                                                                                                   // 9696
	},                                                                                                                    // 9697
	transition: function( other, distance ) {                                                                             // 9698
		var end = color( other ),                                                                                            // 9699
			spaceName = end._space(),                                                                                           // 9700
			space = spaces[ spaceName ],                                                                                        // 9701
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,                                                    // 9702
			start = startColor[ space.cache ] || space.to( startColor._rgba ),                                                  // 9703
			result = start.slice();                                                                                             // 9704
                                                                                                                       // 9705
		end = end[ space.cache ];                                                                                            // 9706
		each( space.props, function( key, prop ) {                                                                           // 9707
			var index = prop.idx,                                                                                               // 9708
				startValue = start[ index ],                                                                                       // 9709
				endValue = end[ index ],                                                                                           // 9710
				type = propTypes[ prop.type ] || {};                                                                               // 9711
                                                                                                                       // 9712
			// if null, don't override start value                                                                              // 9713
			if ( endValue === null ) {                                                                                          // 9714
				return;                                                                                                            // 9715
			}                                                                                                                   // 9716
			// if null - use end                                                                                                // 9717
			if ( startValue === null ) {                                                                                        // 9718
				result[ index ] = endValue;                                                                                        // 9719
			} else {                                                                                                            // 9720
				if ( type.mod ) {                                                                                                  // 9721
					if ( endValue - startValue > type.mod / 2 ) {                                                                     // 9722
						startValue += type.mod;                                                                                          // 9723
					} else if ( startValue - endValue > type.mod / 2 ) {                                                              // 9724
						startValue -= type.mod;                                                                                          // 9725
					}                                                                                                                 // 9726
				}                                                                                                                  // 9727
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );                                // 9728
			}                                                                                                                   // 9729
		});                                                                                                                  // 9730
		return this[ spaceName ]( result );                                                                                  // 9731
	},                                                                                                                    // 9732
	blend: function( opaque ) {                                                                                           // 9733
		// if we are already opaque - return ourself                                                                         // 9734
		if ( this._rgba[ 3 ] === 1 ) {                                                                                       // 9735
			return this;                                                                                                        // 9736
		}                                                                                                                    // 9737
                                                                                                                       // 9738
		var rgb = this._rgba.slice(),                                                                                        // 9739
			a = rgb.pop(),                                                                                                      // 9740
			blend = color( opaque )._rgba;                                                                                      // 9741
                                                                                                                       // 9742
		return color( jQuery.map( rgb, function( v, i ) {                                                                    // 9743
			return ( 1 - a ) * blend[ i ] + a * v;                                                                              // 9744
		}));                                                                                                                 // 9745
	},                                                                                                                    // 9746
	toRgbaString: function() {                                                                                            // 9747
		var prefix = "rgba(",                                                                                                // 9748
			rgba = jQuery.map( this._rgba, function( v, i ) {                                                                   // 9749
				return v == null ? ( i > 2 ? 1 : 0 ) : v;                                                                          // 9750
			});                                                                                                                 // 9751
                                                                                                                       // 9752
		if ( rgba[ 3 ] === 1 ) {                                                                                             // 9753
			rgba.pop();                                                                                                         // 9754
			prefix = "rgb(";                                                                                                    // 9755
		}                                                                                                                    // 9756
                                                                                                                       // 9757
		return prefix + rgba.join() + ")";                                                                                   // 9758
	},                                                                                                                    // 9759
	toHslaString: function() {                                                                                            // 9760
		var prefix = "hsla(",                                                                                                // 9761
			hsla = jQuery.map( this.hsla(), function( v, i ) {                                                                  // 9762
				if ( v == null ) {                                                                                                 // 9763
					v = i > 2 ? 1 : 0;                                                                                                // 9764
				}                                                                                                                  // 9765
                                                                                                                       // 9766
				// catch 1 and 2                                                                                                   // 9767
				if ( i && i < 3 ) {                                                                                                // 9768
					v = Math.round( v * 100 ) + "%";                                                                                  // 9769
				}                                                                                                                  // 9770
				return v;                                                                                                          // 9771
			});                                                                                                                 // 9772
                                                                                                                       // 9773
		if ( hsla[ 3 ] === 1 ) {                                                                                             // 9774
			hsla.pop();                                                                                                         // 9775
			prefix = "hsl(";                                                                                                    // 9776
		}                                                                                                                    // 9777
		return prefix + hsla.join() + ")";                                                                                   // 9778
	},                                                                                                                    // 9779
	toHexString: function( includeAlpha ) {                                                                               // 9780
		var rgba = this._rgba.slice(),                                                                                       // 9781
			alpha = rgba.pop();                                                                                                 // 9782
                                                                                                                       // 9783
		if ( includeAlpha ) {                                                                                                // 9784
			rgba.push( ~~( alpha * 255 ) );                                                                                     // 9785
		}                                                                                                                    // 9786
                                                                                                                       // 9787
		return "#" + jQuery.map( rgba, function( v ) {                                                                       // 9788
                                                                                                                       // 9789
			// default to 0 when nulls exist                                                                                    // 9790
			v = ( v || 0 ).toString( 16 );                                                                                      // 9791
			return v.length === 1 ? "0" + v : v;                                                                                // 9792
		}).join("");                                                                                                         // 9793
	},                                                                                                                    // 9794
	toString: function() {                                                                                                // 9795
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();                                                  // 9796
	}                                                                                                                     // 9797
});                                                                                                                    // 9798
color.fn.parse.prototype = color.fn;                                                                                   // 9799
                                                                                                                       // 9800
// hsla conversions adapted from:                                                                                      // 9801
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021     // 9802
                                                                                                                       // 9803
function hue2rgb( p, q, h ) {                                                                                          // 9804
	h = ( h + 1 ) % 1;                                                                                                    // 9805
	if ( h * 6 < 1 ) {                                                                                                    // 9806
		return p + ( q - p ) * h * 6;                                                                                        // 9807
	}                                                                                                                     // 9808
	if ( h * 2 < 1) {                                                                                                     // 9809
		return q;                                                                                                            // 9810
	}                                                                                                                     // 9811
	if ( h * 3 < 2 ) {                                                                                                    // 9812
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;                                                                        // 9813
	}                                                                                                                     // 9814
	return p;                                                                                                             // 9815
}                                                                                                                      // 9816
                                                                                                                       // 9817
spaces.hsla.to = function( rgba ) {                                                                                    // 9818
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {                                                  // 9819
		return [ null, null, null, rgba[ 3 ] ];                                                                              // 9820
	}                                                                                                                     // 9821
	var r = rgba[ 0 ] / 255,                                                                                              // 9822
		g = rgba[ 1 ] / 255,                                                                                                 // 9823
		b = rgba[ 2 ] / 255,                                                                                                 // 9824
		a = rgba[ 3 ],                                                                                                       // 9825
		max = Math.max( r, g, b ),                                                                                           // 9826
		min = Math.min( r, g, b ),                                                                                           // 9827
		diff = max - min,                                                                                                    // 9828
		add = max + min,                                                                                                     // 9829
		l = add * 0.5,                                                                                                       // 9830
		h, s;                                                                                                                // 9831
                                                                                                                       // 9832
	if ( min === max ) {                                                                                                  // 9833
		h = 0;                                                                                                               // 9834
	} else if ( r === max ) {                                                                                             // 9835
		h = ( 60 * ( g - b ) / diff ) + 360;                                                                                 // 9836
	} else if ( g === max ) {                                                                                             // 9837
		h = ( 60 * ( b - r ) / diff ) + 120;                                                                                 // 9838
	} else {                                                                                                              // 9839
		h = ( 60 * ( r - g ) / diff ) + 240;                                                                                 // 9840
	}                                                                                                                     // 9841
                                                                                                                       // 9842
	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%                                           // 9843
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)                                    // 9844
	if ( diff === 0 ) {                                                                                                   // 9845
		s = 0;                                                                                                               // 9846
	} else if ( l <= 0.5 ) {                                                                                              // 9847
		s = diff / add;                                                                                                      // 9848
	} else {                                                                                                              // 9849
		s = diff / ( 2 - add );                                                                                              // 9850
	}                                                                                                                     // 9851
	return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];                                                              // 9852
};                                                                                                                     // 9853
                                                                                                                       // 9854
spaces.hsla.from = function( hsla ) {                                                                                  // 9855
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {                                                  // 9856
		return [ null, null, null, hsla[ 3 ] ];                                                                              // 9857
	}                                                                                                                     // 9858
	var h = hsla[ 0 ] / 360,                                                                                              // 9859
		s = hsla[ 1 ],                                                                                                       // 9860
		l = hsla[ 2 ],                                                                                                       // 9861
		a = hsla[ 3 ],                                                                                                       // 9862
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,                                                                        // 9863
		p = 2 * l - q;                                                                                                       // 9864
                                                                                                                       // 9865
	return [                                                                                                              // 9866
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),                                                                  // 9867
		Math.round( hue2rgb( p, q, h ) * 255 ),                                                                              // 9868
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),                                                                  // 9869
		a                                                                                                                    // 9870
	];                                                                                                                    // 9871
};                                                                                                                     // 9872
                                                                                                                       // 9873
each( spaces, function( spaceName, space ) {                                                                           // 9874
	var props = space.props,                                                                                              // 9875
		cache = space.cache,                                                                                                 // 9876
		to = space.to,                                                                                                       // 9877
		from = space.from;                                                                                                   // 9878
                                                                                                                       // 9879
	// makes rgba() and hsla()                                                                                            // 9880
	color.fn[ spaceName ] = function( value ) {                                                                           // 9881
                                                                                                                       // 9882
		// generate a cache for this space if it doesn't exist                                                               // 9883
		if ( to && !this[ cache ] ) {                                                                                        // 9884
			this[ cache ] = to( this._rgba );                                                                                   // 9885
		}                                                                                                                    // 9886
		if ( value === undefined ) {                                                                                         // 9887
			return this[ cache ].slice();                                                                                       // 9888
		}                                                                                                                    // 9889
                                                                                                                       // 9890
		var ret,                                                                                                             // 9891
			type = jQuery.type( value ),                                                                                        // 9892
			arr = ( type === "array" || type === "object" ) ? value : arguments,                                                // 9893
			local = this[ cache ].slice();                                                                                      // 9894
                                                                                                                       // 9895
		each( props, function( key, prop ) {                                                                                 // 9896
			var val = arr[ type === "object" ? key : prop.idx ];                                                                // 9897
			if ( val == null ) {                                                                                                // 9898
				val = local[ prop.idx ];                                                                                           // 9899
			}                                                                                                                   // 9900
			local[ prop.idx ] = clamp( val, prop );                                                                             // 9901
		});                                                                                                                  // 9902
                                                                                                                       // 9903
		if ( from ) {                                                                                                        // 9904
			ret = color( from( local ) );                                                                                       // 9905
			ret[ cache ] = local;                                                                                               // 9906
			return ret;                                                                                                         // 9907
		} else {                                                                                                             // 9908
			return color( local );                                                                                              // 9909
		}                                                                                                                    // 9910
	};                                                                                                                    // 9911
                                                                                                                       // 9912
	// makes red() green() blue() alpha() hue() saturation() lightness()                                                  // 9913
	each( props, function( key, prop ) {                                                                                  // 9914
		// alpha is included in more than one space                                                                          // 9915
		if ( color.fn[ key ] ) {                                                                                             // 9916
			return;                                                                                                             // 9917
		}                                                                                                                    // 9918
		color.fn[ key ] = function( value ) {                                                                                // 9919
			var vtype = jQuery.type( value ),                                                                                   // 9920
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),                                           // 9921
				local = this[ fn ](),                                                                                              // 9922
				cur = local[ prop.idx ],                                                                                           // 9923
				match;                                                                                                             // 9924
                                                                                                                       // 9925
			if ( vtype === "undefined" ) {                                                                                      // 9926
				return cur;                                                                                                        // 9927
			}                                                                                                                   // 9928
                                                                                                                       // 9929
			if ( vtype === "function" ) {                                                                                       // 9930
				value = value.call( this, cur );                                                                                   // 9931
				vtype = jQuery.type( value );                                                                                      // 9932
			}                                                                                                                   // 9933
			if ( value == null && prop.empty ) {                                                                                // 9934
				return this;                                                                                                       // 9935
			}                                                                                                                   // 9936
			if ( vtype === "string" ) {                                                                                         // 9937
				match = rplusequals.exec( value );                                                                                 // 9938
				if ( match ) {                                                                                                     // 9939
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );                                         // 9940
				}                                                                                                                  // 9941
			}                                                                                                                   // 9942
			local[ prop.idx ] = value;                                                                                          // 9943
			return this[ fn ]( local );                                                                                         // 9944
		};                                                                                                                   // 9945
	});                                                                                                                   // 9946
});                                                                                                                    // 9947
                                                                                                                       // 9948
// add cssHook and .fx.step function for each named hook.                                                              // 9949
// accept a space separated string of properties                                                                       // 9950
color.hook = function( hook ) {                                                                                        // 9951
	var hooks = hook.split( " " );                                                                                        // 9952
	each( hooks, function( i, hook ) {                                                                                    // 9953
		jQuery.cssHooks[ hook ] = {                                                                                          // 9954
			set: function( elem, value ) {                                                                                      // 9955
				var parsed, curElem,                                                                                               // 9956
					backgroundColor = "";                                                                                             // 9957
                                                                                                                       // 9958
				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {     // 9959
					value = color( parsed || value );                                                                                 // 9960
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {                                                                  // 9961
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;                                                   // 9962
						while (                                                                                                          // 9963
							(backgroundColor === "" || backgroundColor === "transparent") &&                                                // 9964
							curElem && curElem.style                                                                                        // 9965
						) {                                                                                                              // 9966
							try {                                                                                                           // 9967
								backgroundColor = jQuery.css( curElem, "backgroundColor" );                                                    // 9968
								curElem = curElem.parentNode;                                                                                  // 9969
							} catch ( e ) {                                                                                                 // 9970
							}                                                                                                               // 9971
						}                                                                                                                // 9972
                                                                                                                       // 9973
						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?                                      // 9974
							backgroundColor :                                                                                               // 9975
							"_default" );                                                                                                   // 9976
					}                                                                                                                 // 9977
                                                                                                                       // 9978
					value = value.toRgbaString();                                                                                     // 9979
				}                                                                                                                  // 9980
				try {                                                                                                              // 9981
					elem.style[ hook ] = value;                                                                                       // 9982
				} catch ( e ) {                                                                                                    // 9983
					// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'                        // 9984
				}                                                                                                                  // 9985
			}                                                                                                                   // 9986
		};                                                                                                                   // 9987
		jQuery.fx.step[ hook ] = function( fx ) {                                                                            // 9988
			if ( !fx.colorInit ) {                                                                                              // 9989
				fx.start = color( fx.elem, hook );                                                                                 // 9990
				fx.end = color( fx.end );                                                                                          // 9991
				fx.colorInit = true;                                                                                               // 9992
			}                                                                                                                   // 9993
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );                                      // 9994
		};                                                                                                                   // 9995
	});                                                                                                                   // 9996
                                                                                                                       // 9997
};                                                                                                                     // 9998
                                                                                                                       // 9999
color.hook( stepHooks );                                                                                               // 10000
                                                                                                                       // 10001
jQuery.cssHooks.borderColor = {                                                                                        // 10002
	expand: function( value ) {                                                                                           // 10003
		var expanded = {};                                                                                                   // 10004
                                                                                                                       // 10005
		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {                                                    // 10006
			expanded[ "border" + part + "Color" ] = value;                                                                      // 10007
		});                                                                                                                  // 10008
		return expanded;                                                                                                     // 10009
	}                                                                                                                     // 10010
};                                                                                                                     // 10011
                                                                                                                       // 10012
// Basic color names only.                                                                                             // 10013
// Usage of any of the other color names requires adding yourself or including                                         // 10014
// jquery.color.svg-names.js.                                                                                          // 10015
colors = jQuery.Color.names = {                                                                                        // 10016
	// 4.1. Basic color keywords                                                                                          // 10017
	aqua: "#00ffff",                                                                                                      // 10018
	black: "#000000",                                                                                                     // 10019
	blue: "#0000ff",                                                                                                      // 10020
	fuchsia: "#ff00ff",                                                                                                   // 10021
	gray: "#808080",                                                                                                      // 10022
	green: "#008000",                                                                                                     // 10023
	lime: "#00ff00",                                                                                                      // 10024
	maroon: "#800000",                                                                                                    // 10025
	navy: "#000080",                                                                                                      // 10026
	olive: "#808000",                                                                                                     // 10027
	purple: "#800080",                                                                                                    // 10028
	red: "#ff0000",                                                                                                       // 10029
	silver: "#c0c0c0",                                                                                                    // 10030
	teal: "#008080",                                                                                                      // 10031
	white: "#ffffff",                                                                                                     // 10032
	yellow: "#ffff00",                                                                                                    // 10033
                                                                                                                       // 10034
	// 4.2.3. "transparent" color keyword                                                                                 // 10035
	transparent: [ null, null, null, 0 ],                                                                                 // 10036
                                                                                                                       // 10037
	_default: "#ffffff"                                                                                                   // 10038
};                                                                                                                     // 10039
                                                                                                                       // 10040
})( jQuery );                                                                                                          // 10041
                                                                                                                       // 10042
/******************************************************************************/                                       // 10043
/****************************** CLASS ANIMATIONS ******************************/                                       // 10044
/******************************************************************************/                                       // 10045
(function() {                                                                                                          // 10046
                                                                                                                       // 10047
var classAnimationActions = [ "add", "remove", "toggle" ],                                                             // 10048
	shorthandStyles = {                                                                                                   // 10049
		border: 1,                                                                                                           // 10050
		borderBottom: 1,                                                                                                     // 10051
		borderColor: 1,                                                                                                      // 10052
		borderLeft: 1,                                                                                                       // 10053
		borderRight: 1,                                                                                                      // 10054
		borderTop: 1,                                                                                                        // 10055
		borderWidth: 1,                                                                                                      // 10056
		margin: 1,                                                                                                           // 10057
		padding: 1                                                                                                           // 10058
	};                                                                                                                    // 10059
                                                                                                                       // 10060
$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {         // 10061
	$.fx.step[ prop ] = function( fx ) {                                                                                  // 10062
		if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {                                             // 10063
			jQuery.style( fx.elem, prop, fx.end );                                                                              // 10064
			fx.setAttr = true;                                                                                                  // 10065
		}                                                                                                                    // 10066
	};                                                                                                                    // 10067
});                                                                                                                    // 10068
                                                                                                                       // 10069
function getElementStyles( elem ) {                                                                                    // 10070
	var key, len,                                                                                                         // 10071
		style = elem.ownerDocument.defaultView ?                                                                             // 10072
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :                                                     // 10073
			elem.currentStyle,                                                                                                  // 10074
		styles = {};                                                                                                         // 10075
                                                                                                                       // 10076
	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {                                                   // 10077
		len = style.length;                                                                                                  // 10078
		while ( len-- ) {                                                                                                    // 10079
			key = style[ len ];                                                                                                 // 10080
			if ( typeof style[ key ] === "string" ) {                                                                           // 10081
				styles[ $.camelCase( key ) ] = style[ key ];                                                                       // 10082
			}                                                                                                                   // 10083
		}                                                                                                                    // 10084
	// support: Opera, IE <9                                                                                              // 10085
	} else {                                                                                                              // 10086
		for ( key in style ) {                                                                                               // 10087
			if ( typeof style[ key ] === "string" ) {                                                                           // 10088
				styles[ key ] = style[ key ];                                                                                      // 10089
			}                                                                                                                   // 10090
		}                                                                                                                    // 10091
	}                                                                                                                     // 10092
                                                                                                                       // 10093
	return styles;                                                                                                        // 10094
}                                                                                                                      // 10095
                                                                                                                       // 10096
function styleDifference( oldStyle, newStyle ) {                                                                       // 10097
	var diff = {},                                                                                                        // 10098
		name, value;                                                                                                         // 10099
                                                                                                                       // 10100
	for ( name in newStyle ) {                                                                                            // 10101
		value = newStyle[ name ];                                                                                            // 10102
		if ( oldStyle[ name ] !== value ) {                                                                                  // 10103
			if ( !shorthandStyles[ name ] ) {                                                                                   // 10104
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {                                                        // 10105
					diff[ name ] = value;                                                                                             // 10106
				}                                                                                                                  // 10107
			}                                                                                                                   // 10108
		}                                                                                                                    // 10109
	}                                                                                                                     // 10110
                                                                                                                       // 10111
	return diff;                                                                                                          // 10112
}                                                                                                                      // 10113
                                                                                                                       // 10114
// support: jQuery <1.8                                                                                                // 10115
if ( !$.fn.addBack ) {                                                                                                 // 10116
	$.fn.addBack = function( selector ) {                                                                                 // 10117
		return this.add( selector == null ?                                                                                  // 10118
			this.prevObject : this.prevObject.filter( selector )                                                                // 10119
		);                                                                                                                   // 10120
	};                                                                                                                    // 10121
}                                                                                                                      // 10122
                                                                                                                       // 10123
$.effects.animateClass = function( value, duration, easing, callback ) {                                               // 10124
	var o = $.speed( duration, easing, callback );                                                                        // 10125
                                                                                                                       // 10126
	return this.queue( function() {                                                                                       // 10127
		var animated = $( this ),                                                                                            // 10128
			baseClass = animated.attr( "class" ) || "",                                                                         // 10129
			applyClassChange,                                                                                                   // 10130
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;                                             // 10131
                                                                                                                       // 10132
		// map the animated objects to store the original styles.                                                            // 10133
		allAnimations = allAnimations.map(function() {                                                                       // 10134
			var el = $( this );                                                                                                 // 10135
			return {                                                                                                            // 10136
				el: el,                                                                                                            // 10137
				start: getElementStyles( this )                                                                                    // 10138
			};                                                                                                                  // 10139
		});                                                                                                                  // 10140
                                                                                                                       // 10141
		// apply class change                                                                                                // 10142
		applyClassChange = function() {                                                                                      // 10143
			$.each( classAnimationActions, function(i, action) {                                                                // 10144
				if ( value[ action ] ) {                                                                                           // 10145
					animated[ action + "Class" ]( value[ action ] );                                                                  // 10146
				}                                                                                                                  // 10147
			});                                                                                                                 // 10148
		};                                                                                                                   // 10149
		applyClassChange();                                                                                                  // 10150
                                                                                                                       // 10151
		// map all animated objects again - calculate new styles and diff                                                    // 10152
		allAnimations = allAnimations.map(function() {                                                                       // 10153
			this.end = getElementStyles( this.el[ 0 ] );                                                                        // 10154
			this.diff = styleDifference( this.start, this.end );                                                                // 10155
			return this;                                                                                                        // 10156
		});                                                                                                                  // 10157
                                                                                                                       // 10158
		// apply original class                                                                                              // 10159
		animated.attr( "class", baseClass );                                                                                 // 10160
                                                                                                                       // 10161
		// map all animated objects again - this time collecting a promise                                                   // 10162
		allAnimations = allAnimations.map(function() {                                                                       // 10163
			var styleInfo = this,                                                                                               // 10164
				dfd = $.Deferred(),                                                                                                // 10165
				opts = $.extend({}, o, {                                                                                           // 10166
					queue: false,                                                                                                     // 10167
					complete: function() {                                                                                            // 10168
						dfd.resolve( styleInfo );                                                                                        // 10169
					}                                                                                                                 // 10170
				});                                                                                                                // 10171
                                                                                                                       // 10172
			this.el.animate( this.diff, opts );                                                                                 // 10173
			return dfd.promise();                                                                                               // 10174
		});                                                                                                                  // 10175
                                                                                                                       // 10176
		// once all animations have completed:                                                                               // 10177
		$.when.apply( $, allAnimations.get() ).done(function() {                                                             // 10178
                                                                                                                       // 10179
			// set the final class                                                                                              // 10180
			applyClassChange();                                                                                                 // 10181
                                                                                                                       // 10182
			// for each animated element,                                                                                       // 10183
			// clear all css properties that were animated                                                                      // 10184
			$.each( arguments, function() {                                                                                     // 10185
				var el = this.el;                                                                                                  // 10186
				$.each( this.diff, function(key) {                                                                                 // 10187
					el.css( key, "" );                                                                                                // 10188
				});                                                                                                                // 10189
			});                                                                                                                 // 10190
                                                                                                                       // 10191
			// this is guarnteed to be there if you use jQuery.speed()                                                          // 10192
			// it also handles dequeuing the next anim...                                                                       // 10193
			o.complete.call( animated[ 0 ] );                                                                                   // 10194
		});                                                                                                                  // 10195
	});                                                                                                                   // 10196
};                                                                                                                     // 10197
                                                                                                                       // 10198
$.fn.extend({                                                                                                          // 10199
	addClass: (function( orig ) {                                                                                         // 10200
		return function( classNames, speed, easing, callback ) {                                                             // 10201
			return speed ?                                                                                                      // 10202
				$.effects.animateClass.call( this,                                                                                 // 10203
					{ add: classNames }, speed, easing, callback ) :                                                                  // 10204
				orig.apply( this, arguments );                                                                                     // 10205
		};                                                                                                                   // 10206
	})( $.fn.addClass ),                                                                                                  // 10207
                                                                                                                       // 10208
	removeClass: (function( orig ) {                                                                                      // 10209
		return function( classNames, speed, easing, callback ) {                                                             // 10210
			return arguments.length > 1 ?                                                                                       // 10211
				$.effects.animateClass.call( this,                                                                                 // 10212
					{ remove: classNames }, speed, easing, callback ) :                                                               // 10213
				orig.apply( this, arguments );                                                                                     // 10214
		};                                                                                                                   // 10215
	})( $.fn.removeClass ),                                                                                               // 10216
                                                                                                                       // 10217
	toggleClass: (function( orig ) {                                                                                      // 10218
		return function( classNames, force, speed, easing, callback ) {                                                      // 10219
			if ( typeof force === "boolean" || force === undefined ) {                                                          // 10220
				if ( !speed ) {                                                                                                    // 10221
					// without speed parameter                                                                                        // 10222
					return orig.apply( this, arguments );                                                                             // 10223
				} else {                                                                                                           // 10224
					return $.effects.animateClass.call( this,                                                                         // 10225
						(force ? { add: classNames } : { remove: classNames }),                                                          // 10226
						speed, easing, callback );                                                                                       // 10227
				}                                                                                                                  // 10228
			} else {                                                                                                            // 10229
				// without force parameter                                                                                         // 10230
				return $.effects.animateClass.call( this,                                                                          // 10231
					{ toggle: classNames }, force, speed, easing );                                                                   // 10232
			}                                                                                                                   // 10233
		};                                                                                                                   // 10234
	})( $.fn.toggleClass ),                                                                                               // 10235
                                                                                                                       // 10236
	switchClass: function( remove, add, speed, easing, callback) {                                                        // 10237
		return $.effects.animateClass.call( this, {                                                                          // 10238
			add: add,                                                                                                           // 10239
			remove: remove                                                                                                      // 10240
		}, speed, easing, callback );                                                                                        // 10241
	}                                                                                                                     // 10242
});                                                                                                                    // 10243
                                                                                                                       // 10244
})();                                                                                                                  // 10245
                                                                                                                       // 10246
/******************************************************************************/                                       // 10247
/*********************************** EFFECTS **********************************/                                       // 10248
/******************************************************************************/                                       // 10249
                                                                                                                       // 10250
(function() {                                                                                                          // 10251
                                                                                                                       // 10252
$.extend( $.effects, {                                                                                                 // 10253
	version: "1.11.2",                                                                                                    // 10254
                                                                                                                       // 10255
	// Saves a set of properties in a data storage                                                                        // 10256
	save: function( element, set ) {                                                                                      // 10257
		for ( var i = 0; i < set.length; i++ ) {                                                                             // 10258
			if ( set[ i ] !== null ) {                                                                                          // 10259
				element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );                                              // 10260
			}                                                                                                                   // 10261
		}                                                                                                                    // 10262
	},                                                                                                                    // 10263
                                                                                                                       // 10264
	// Restores a set of previously saved properties from a data storage                                                  // 10265
	restore: function( element, set ) {                                                                                   // 10266
		var val, i;                                                                                                          // 10267
		for ( i = 0; i < set.length; i++ ) {                                                                                 // 10268
			if ( set[ i ] !== null ) {                                                                                          // 10269
				val = element.data( dataSpace + set[ i ] );                                                                        // 10270
				// support: jQuery 1.6.2                                                                                           // 10271
				// http://bugs.jquery.com/ticket/9917                                                                              // 10272
				// jQuery 1.6.2 incorrectly returns undefined for any falsy value.                                                 // 10273
				// We can't differentiate between "" and 0 here, so we just assume                                                 // 10274
				// empty string since it's likely to be a more common value...                                                     // 10275
				if ( val === undefined ) {                                                                                         // 10276
					val = "";                                                                                                         // 10277
				}                                                                                                                  // 10278
				element.css( set[ i ], val );                                                                                      // 10279
			}                                                                                                                   // 10280
		}                                                                                                                    // 10281
	},                                                                                                                    // 10282
                                                                                                                       // 10283
	setMode: function( el, mode ) {                                                                                       // 10284
		if (mode === "toggle") {                                                                                             // 10285
			mode = el.is( ":hidden" ) ? "show" : "hide";                                                                        // 10286
		}                                                                                                                    // 10287
		return mode;                                                                                                         // 10288
	},                                                                                                                    // 10289
                                                                                                                       // 10290
	// Translates a [top,left] array into a baseline value                                                                // 10291
	// this should be a little more flexible in the future to handle a string & hash                                      // 10292
	getBaseline: function( origin, original ) {                                                                           // 10293
		var y, x;                                                                                                            // 10294
		switch ( origin[ 0 ] ) {                                                                                             // 10295
			case "top": y = 0; break;                                                                                           // 10296
			case "middle": y = 0.5; break;                                                                                      // 10297
			case "bottom": y = 1; break;                                                                                        // 10298
			default: y = origin[ 0 ] / original.height;                                                                         // 10299
		}                                                                                                                    // 10300
		switch ( origin[ 1 ] ) {                                                                                             // 10301
			case "left": x = 0; break;                                                                                          // 10302
			case "center": x = 0.5; break;                                                                                      // 10303
			case "right": x = 1; break;                                                                                         // 10304
			default: x = origin[ 1 ] / original.width;                                                                          // 10305
		}                                                                                                                    // 10306
		return {                                                                                                             // 10307
			x: x,                                                                                                               // 10308
			y: y                                                                                                                // 10309
		};                                                                                                                   // 10310
	},                                                                                                                    // 10311
                                                                                                                       // 10312
	// Wraps the element around a wrapper that copies position properties                                                 // 10313
	createWrapper: function( element ) {                                                                                  // 10314
                                                                                                                       // 10315
		// if the element is already wrapped, return it                                                                      // 10316
		if ( element.parent().is( ".ui-effects-wrapper" )) {                                                                 // 10317
			return element.parent();                                                                                            // 10318
		}                                                                                                                    // 10319
                                                                                                                       // 10320
		// wrap the element                                                                                                  // 10321
		var props = {                                                                                                        // 10322
				width: element.outerWidth(true),                                                                                   // 10323
				height: element.outerHeight(true),                                                                                 // 10324
				"float": element.css( "float" )                                                                                    // 10325
			},                                                                                                                  // 10326
			wrapper = $( "<div></div>" )                                                                                        // 10327
				.addClass( "ui-effects-wrapper" )                                                                                  // 10328
				.css({                                                                                                             // 10329
					fontSize: "100%",                                                                                                 // 10330
					background: "transparent",                                                                                        // 10331
					border: "none",                                                                                                   // 10332
					margin: 0,                                                                                                        // 10333
					padding: 0                                                                                                        // 10334
				}),                                                                                                                // 10335
			// Store the size in case width/height are defined in % - Fixes #5245                                               // 10336
			size = {                                                                                                            // 10337
				width: element.width(),                                                                                            // 10338
				height: element.height()                                                                                           // 10339
			},                                                                                                                  // 10340
			active = document.activeElement;                                                                                    // 10341
                                                                                                                       // 10342
		// support: Firefox                                                                                                  // 10343
		// Firefox incorrectly exposes anonymous content                                                                     // 10344
		// https://bugzilla.mozilla.org/show_bug.cgi?id=561664                                                               // 10345
		try {                                                                                                                // 10346
			active.id;                                                                                                          // 10347
		} catch ( e ) {                                                                                                      // 10348
			active = document.body;                                                                                             // 10349
		}                                                                                                                    // 10350
                                                                                                                       // 10351
		element.wrap( wrapper );                                                                                             // 10352
                                                                                                                       // 10353
		// Fixes #7595 - Elements lose focus when wrapped.                                                                   // 10354
		if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {                                               // 10355
			$( active ).focus();                                                                                                // 10356
		}                                                                                                                    // 10357
                                                                                                                       // 10358
		wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
                                                                                                                       // 10360
		// transfer positioning properties to the wrapper                                                                    // 10361
		if ( element.css( "position" ) === "static" ) {                                                                      // 10362
			wrapper.css({ position: "relative" });                                                                              // 10363
			element.css({ position: "relative" });                                                                              // 10364
		} else {                                                                                                             // 10365
			$.extend( props, {                                                                                                  // 10366
				position: element.css( "position" ),                                                                               // 10367
				zIndex: element.css( "z-index" )                                                                                   // 10368
			});                                                                                                                 // 10369
			$.each([ "top", "left", "bottom", "right" ], function(i, pos) {                                                     // 10370
				props[ pos ] = element.css( pos );                                                                                 // 10371
				if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {                                                                     // 10372
					props[ pos ] = "auto";                                                                                            // 10373
				}                                                                                                                  // 10374
			});                                                                                                                 // 10375
			element.css({                                                                                                       // 10376
				position: "relative",                                                                                              // 10377
				top: 0,                                                                                                            // 10378
				left: 0,                                                                                                           // 10379
				right: "auto",                                                                                                     // 10380
				bottom: "auto"                                                                                                     // 10381
			});                                                                                                                 // 10382
		}                                                                                                                    // 10383
		element.css(size);                                                                                                   // 10384
                                                                                                                       // 10385
		return wrapper.css( props ).show();                                                                                  // 10386
	},                                                                                                                    // 10387
                                                                                                                       // 10388
	removeWrapper: function( element ) {                                                                                  // 10389
		var active = document.activeElement;                                                                                 // 10390
                                                                                                                       // 10391
		if ( element.parent().is( ".ui-effects-wrapper" ) ) {                                                                // 10392
			element.parent().replaceWith( element );                                                                            // 10393
                                                                                                                       // 10394
			// Fixes #7595 - Elements lose focus when wrapped.                                                                  // 10395
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {                                              // 10396
				$( active ).focus();                                                                                               // 10397
			}                                                                                                                   // 10398
		}                                                                                                                    // 10399
                                                                                                                       // 10400
		return element;                                                                                                      // 10401
	},                                                                                                                    // 10402
                                                                                                                       // 10403
	setTransition: function( element, list, factor, value ) {                                                             // 10404
		value = value || {};                                                                                                 // 10405
		$.each( list, function( i, x ) {                                                                                     // 10406
			var unit = element.cssUnit( x );                                                                                    // 10407
			if ( unit[ 0 ] > 0 ) {                                                                                              // 10408
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];                                                                       // 10409
			}                                                                                                                   // 10410
		});                                                                                                                  // 10411
		return value;                                                                                                        // 10412
	}                                                                                                                     // 10413
});                                                                                                                    // 10414
                                                                                                                       // 10415
// return an effect options object for the given parameters:                                                           // 10416
function _normalizeArguments( effect, options, speed, callback ) {                                                     // 10417
                                                                                                                       // 10418
	// allow passing all options as the first parameter                                                                   // 10419
	if ( $.isPlainObject( effect ) ) {                                                                                    // 10420
		options = effect;                                                                                                    // 10421
		effect = effect.effect;                                                                                              // 10422
	}                                                                                                                     // 10423
                                                                                                                       // 10424
	// convert to an object                                                                                               // 10425
	effect = { effect: effect };                                                                                          // 10426
                                                                                                                       // 10427
	// catch (effect, null, ...)                                                                                          // 10428
	if ( options == null ) {                                                                                              // 10429
		options = {};                                                                                                        // 10430
	}                                                                                                                     // 10431
                                                                                                                       // 10432
	// catch (effect, callback)                                                                                           // 10433
	if ( $.isFunction( options ) ) {                                                                                      // 10434
		callback = options;                                                                                                  // 10435
		speed = null;                                                                                                        // 10436
		options = {};                                                                                                        // 10437
	}                                                                                                                     // 10438
                                                                                                                       // 10439
	// catch (effect, speed, ?)                                                                                           // 10440
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {                                                        // 10441
		callback = speed;                                                                                                    // 10442
		speed = options;                                                                                                     // 10443
		options = {};                                                                                                        // 10444
	}                                                                                                                     // 10445
                                                                                                                       // 10446
	// catch (effect, options, callback)                                                                                  // 10447
	if ( $.isFunction( speed ) ) {                                                                                        // 10448
		callback = speed;                                                                                                    // 10449
		speed = null;                                                                                                        // 10450
	}                                                                                                                     // 10451
                                                                                                                       // 10452
	// add options to effect                                                                                              // 10453
	if ( options ) {                                                                                                      // 10454
		$.extend( effect, options );                                                                                         // 10455
	}                                                                                                                     // 10456
                                                                                                                       // 10457
	speed = speed || options.duration;                                                                                    // 10458
	effect.duration = $.fx.off ? 0 :                                                                                      // 10459
		typeof speed === "number" ? speed :                                                                                  // 10460
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :                                                                        // 10461
		$.fx.speeds._default;                                                                                                // 10462
                                                                                                                       // 10463
	effect.complete = callback || options.complete;                                                                       // 10464
                                                                                                                       // 10465
	return effect;                                                                                                        // 10466
}                                                                                                                      // 10467
                                                                                                                       // 10468
function standardAnimationOption( option ) {                                                                           // 10469
	// Valid standard speeds (nothing, number, named speed)                                                               // 10470
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {                                               // 10471
		return true;                                                                                                         // 10472
	}                                                                                                                     // 10473
                                                                                                                       // 10474
	// Invalid strings - treat as "normal" speed                                                                          // 10475
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {                                                    // 10476
		return true;                                                                                                         // 10477
	}                                                                                                                     // 10478
                                                                                                                       // 10479
	// Complete callback                                                                                                  // 10480
	if ( $.isFunction( option ) ) {                                                                                       // 10481
		return true;                                                                                                         // 10482
	}                                                                                                                     // 10483
                                                                                                                       // 10484
	// Options hash (but not naming an effect)                                                                            // 10485
	if ( typeof option === "object" && !option.effect ) {                                                                 // 10486
		return true;                                                                                                         // 10487
	}                                                                                                                     // 10488
                                                                                                                       // 10489
	// Didn't match any standard API                                                                                      // 10490
	return false;                                                                                                         // 10491
}                                                                                                                      // 10492
                                                                                                                       // 10493
$.fn.extend({                                                                                                          // 10494
	effect: function( /* effect, options, speed, callback */ ) {                                                          // 10495
		var args = _normalizeArguments.apply( this, arguments ),                                                             // 10496
			mode = args.mode,                                                                                                   // 10497
			queue = args.queue,                                                                                                 // 10498
			effectMethod = $.effects.effect[ args.effect ];                                                                     // 10499
                                                                                                                       // 10500
		if ( $.fx.off || !effectMethod ) {                                                                                   // 10501
			// delegate to the original method (e.g., .show()) if possible                                                      // 10502
			if ( mode ) {                                                                                                       // 10503
				return this[ mode ]( args.duration, args.complete );                                                               // 10504
			} else {                                                                                                            // 10505
				return this.each( function() {                                                                                     // 10506
					if ( args.complete ) {                                                                                            // 10507
						args.complete.call( this );                                                                                      // 10508
					}                                                                                                                 // 10509
				});                                                                                                                // 10510
			}                                                                                                                   // 10511
		}                                                                                                                    // 10512
                                                                                                                       // 10513
		function run( next ) {                                                                                               // 10514
			var elem = $( this ),                                                                                               // 10515
				complete = args.complete,                                                                                          // 10516
				mode = args.mode;                                                                                                  // 10517
                                                                                                                       // 10518
			function done() {                                                                                                   // 10519
				if ( $.isFunction( complete ) ) {                                                                                  // 10520
					complete.call( elem[0] );                                                                                         // 10521
				}                                                                                                                  // 10522
				if ( $.isFunction( next ) ) {                                                                                      // 10523
					next();                                                                                                           // 10524
				}                                                                                                                  // 10525
			}                                                                                                                   // 10526
                                                                                                                       // 10527
			// If the element already has the correct final state, delegate to                                                  // 10528
			// the core methods so the internal tracking of "olddisplay" works.                                                 // 10529
			if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {                                                   // 10530
				elem[ mode ]();                                                                                                    // 10531
				done();                                                                                                            // 10532
			} else {                                                                                                            // 10533
				effectMethod.call( elem[0], args, done );                                                                          // 10534
			}                                                                                                                   // 10535
		}                                                                                                                    // 10536
                                                                                                                       // 10537
		return queue === false ? this.each( run ) : this.queue( queue || "fx", run );                                        // 10538
	},                                                                                                                    // 10539
                                                                                                                       // 10540
	show: (function( orig ) {                                                                                             // 10541
		return function( option ) {                                                                                          // 10542
			if ( standardAnimationOption( option ) ) {                                                                          // 10543
				return orig.apply( this, arguments );                                                                              // 10544
			} else {                                                                                                            // 10545
				var args = _normalizeArguments.apply( this, arguments );                                                           // 10546
				args.mode = "show";                                                                                                // 10547
				return this.effect.call( this, args );                                                                             // 10548
			}                                                                                                                   // 10549
		};                                                                                                                   // 10550
	})( $.fn.show ),                                                                                                      // 10551
                                                                                                                       // 10552
	hide: (function( orig ) {                                                                                             // 10553
		return function( option ) {                                                                                          // 10554
			if ( standardAnimationOption( option ) ) {                                                                          // 10555
				return orig.apply( this, arguments );                                                                              // 10556
			} else {                                                                                                            // 10557
				var args = _normalizeArguments.apply( this, arguments );                                                           // 10558
				args.mode = "hide";                                                                                                // 10559
				return this.effect.call( this, args );                                                                             // 10560
			}                                                                                                                   // 10561
		};                                                                                                                   // 10562
	})( $.fn.hide ),                                                                                                      // 10563
                                                                                                                       // 10564
	toggle: (function( orig ) {                                                                                           // 10565
		return function( option ) {                                                                                          // 10566
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {                                           // 10567
				return orig.apply( this, arguments );                                                                              // 10568
			} else {                                                                                                            // 10569
				var args = _normalizeArguments.apply( this, arguments );                                                           // 10570
				args.mode = "toggle";                                                                                              // 10571
				return this.effect.call( this, args );                                                                             // 10572
			}                                                                                                                   // 10573
		};                                                                                                                   // 10574
	})( $.fn.toggle ),                                                                                                    // 10575
                                                                                                                       // 10576
	// helper functions                                                                                                   // 10577
	cssUnit: function(key) {                                                                                              // 10578
		var style = this.css( key ),                                                                                         // 10579
			val = [];                                                                                                           // 10580
                                                                                                                       // 10581
		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {                                                             // 10582
			if ( style.indexOf( unit ) > 0 ) {                                                                                  // 10583
				val = [ parseFloat( style ), unit ];                                                                               // 10584
			}                                                                                                                   // 10585
		});                                                                                                                  // 10586
		return val;                                                                                                          // 10587
	}                                                                                                                     // 10588
});                                                                                                                    // 10589
                                                                                                                       // 10590
})();                                                                                                                  // 10591
                                                                                                                       // 10592
/******************************************************************************/                                       // 10593
/*********************************** EASING ***********************************/                                       // 10594
/******************************************************************************/                                       // 10595
                                                                                                                       // 10596
(function() {                                                                                                          // 10597
                                                                                                                       // 10598
// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)                                   // 10599
                                                                                                                       // 10600
var baseEasings = {};                                                                                                  // 10601
                                                                                                                       // 10602
$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {                                           // 10603
	baseEasings[ name ] = function( p ) {                                                                                 // 10604
		return Math.pow( p, i + 2 );                                                                                         // 10605
	};                                                                                                                    // 10606
});                                                                                                                    // 10607
                                                                                                                       // 10608
$.extend( baseEasings, {                                                                                               // 10609
	Sine: function( p ) {                                                                                                 // 10610
		return 1 - Math.cos( p * Math.PI / 2 );                                                                              // 10611
	},                                                                                                                    // 10612
	Circ: function( p ) {                                                                                                 // 10613
		return 1 - Math.sqrt( 1 - p * p );                                                                                   // 10614
	},                                                                                                                    // 10615
	Elastic: function( p ) {                                                                                              // 10616
		return p === 0 || p === 1 ? p :                                                                                      // 10617
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );                                    // 10618
	},                                                                                                                    // 10619
	Back: function( p ) {                                                                                                 // 10620
		return p * p * ( 3 * p - 2 );                                                                                        // 10621
	},                                                                                                                    // 10622
	Bounce: function( p ) {                                                                                               // 10623
		var pow2,                                                                                                            // 10624
			bounce = 4;                                                                                                         // 10625
                                                                                                                       // 10626
		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}                                                     // 10627
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );                            // 10628
	}                                                                                                                     // 10629
});                                                                                                                    // 10630
                                                                                                                       // 10631
$.each( baseEasings, function( name, easeIn ) {                                                                        // 10632
	$.easing[ "easeIn" + name ] = easeIn;                                                                                 // 10633
	$.easing[ "easeOut" + name ] = function( p ) {                                                                        // 10634
		return 1 - easeIn( 1 - p );                                                                                          // 10635
	};                                                                                                                    // 10636
	$.easing[ "easeInOut" + name ] = function( p ) {                                                                      // 10637
		return p < 0.5 ?                                                                                                     // 10638
			easeIn( p * 2 ) / 2 :                                                                                               // 10639
			1 - easeIn( p * -2 + 2 ) / 2;                                                                                       // 10640
	};                                                                                                                    // 10641
});                                                                                                                    // 10642
                                                                                                                       // 10643
})();                                                                                                                  // 10644
                                                                                                                       // 10645
var effect = $.effects;                                                                                                // 10646
                                                                                                                       // 10647
                                                                                                                       // 10648
/*!                                                                                                                    // 10649
 * jQuery UI Effects Blind 1.11.2                                                                                      // 10650
 * http://jqueryui.com                                                                                                 // 10651
 *                                                                                                                     // 10652
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 10653
 * Released under the MIT license.                                                                                     // 10654
 * http://jquery.org/license                                                                                           // 10655
 *                                                                                                                     // 10656
 * http://api.jqueryui.com/blind-effect/                                                                               // 10657
 */                                                                                                                    // 10658
                                                                                                                       // 10659
                                                                                                                       // 10660
var effectBlind = $.effects.effect.blind = function( o, done ) {                                                       // 10661
	// Create element                                                                                                     // 10662
	var el = $( this ),                                                                                                   // 10663
		rvertical = /up|down|vertical/,                                                                                      // 10664
		rpositivemotion = /up|left|vertical|horizontal/,                                                                     // 10665
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 10666
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 10667
		direction = o.direction || "up",                                                                                     // 10668
		vertical = rvertical.test( direction ),                                                                              // 10669
		ref = vertical ? "height" : "width",                                                                                 // 10670
		ref2 = vertical ? "top" : "left",                                                                                    // 10671
		motion = rpositivemotion.test( direction ),                                                                          // 10672
		animation = {},                                                                                                      // 10673
		show = mode === "show",                                                                                              // 10674
		wrapper, distance, margin;                                                                                           // 10675
                                                                                                                       // 10676
	// if already wrapped, the wrapper's properties are my property. #6245                                                // 10677
	if ( el.parent().is( ".ui-effects-wrapper" ) ) {                                                                      // 10678
		$.effects.save( el.parent(), props );                                                                                // 10679
	} else {                                                                                                              // 10680
		$.effects.save( el, props );                                                                                         // 10681
	}                                                                                                                     // 10682
	el.show();                                                                                                            // 10683
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 10684
		overflow: "hidden"                                                                                                   // 10685
	});                                                                                                                   // 10686
                                                                                                                       // 10687
	distance = wrapper[ ref ]();                                                                                          // 10688
	margin = parseFloat( wrapper.css( ref2 ) ) || 0;                                                                      // 10689
                                                                                                                       // 10690
	animation[ ref ] = show ? distance : 0;                                                                               // 10691
	if ( !motion ) {                                                                                                      // 10692
		el                                                                                                                   // 10693
			.css( vertical ? "bottom" : "right", 0 )                                                                            // 10694
			.css( vertical ? "top" : "left", "auto" )                                                                           // 10695
			.css({ position: "absolute" });                                                                                     // 10696
                                                                                                                       // 10697
		animation[ ref2 ] = show ? margin : distance + margin;                                                               // 10698
	}                                                                                                                     // 10699
                                                                                                                       // 10700
	// start at 0 if we are showing                                                                                       // 10701
	if ( show ) {                                                                                                         // 10702
		wrapper.css( ref, 0 );                                                                                               // 10703
		if ( !motion ) {                                                                                                     // 10704
			wrapper.css( ref2, margin + distance );                                                                             // 10705
		}                                                                                                                    // 10706
	}                                                                                                                     // 10707
                                                                                                                       // 10708
	// Animate                                                                                                            // 10709
	wrapper.animate( animation, {                                                                                         // 10710
		duration: o.duration,                                                                                                // 10711
		easing: o.easing,                                                                                                    // 10712
		queue: false,                                                                                                        // 10713
		complete: function() {                                                                                               // 10714
			if ( mode === "hide" ) {                                                                                            // 10715
				el.hide();                                                                                                         // 10716
			}                                                                                                                   // 10717
			$.effects.restore( el, props );                                                                                     // 10718
			$.effects.removeWrapper( el );                                                                                      // 10719
			done();                                                                                                             // 10720
		}                                                                                                                    // 10721
	});                                                                                                                   // 10722
};                                                                                                                     // 10723
                                                                                                                       // 10724
                                                                                                                       // 10725
/*!                                                                                                                    // 10726
 * jQuery UI Effects Bounce 1.11.2                                                                                     // 10727
 * http://jqueryui.com                                                                                                 // 10728
 *                                                                                                                     // 10729
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 10730
 * Released under the MIT license.                                                                                     // 10731
 * http://jquery.org/license                                                                                           // 10732
 *                                                                                                                     // 10733
 * http://api.jqueryui.com/bounce-effect/                                                                              // 10734
 */                                                                                                                    // 10735
                                                                                                                       // 10736
                                                                                                                       // 10737
var effectBounce = $.effects.effect.bounce = function( o, done ) {                                                     // 10738
	var el = $( this ),                                                                                                   // 10739
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 10740
                                                                                                                       // 10741
		// defaults:                                                                                                         // 10742
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 10743
		hide = mode === "hide",                                                                                              // 10744
		show = mode === "show",                                                                                              // 10745
		direction = o.direction || "up",                                                                                     // 10746
		distance = o.distance,                                                                                               // 10747
		times = o.times || 5,                                                                                                // 10748
                                                                                                                       // 10749
		// number of internal animations                                                                                     // 10750
		anims = times * 2 + ( show || hide ? 1 : 0 ),                                                                        // 10751
		speed = o.duration / anims,                                                                                          // 10752
		easing = o.easing,                                                                                                   // 10753
                                                                                                                       // 10754
		// utility:                                                                                                          // 10755
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",                                               // 10756
		motion = ( direction === "up" || direction === "left" ),                                                             // 10757
		i,                                                                                                                   // 10758
		upAnim,                                                                                                              // 10759
		downAnim,                                                                                                            // 10760
                                                                                                                       // 10761
		// we will need to re-assemble the queue to stack our animations in place                                            // 10762
		queue = el.queue(),                                                                                                  // 10763
		queuelen = queue.length;                                                                                             // 10764
                                                                                                                       // 10765
	// Avoid touching opacity to prevent clearType and PNG issues in IE                                                   // 10766
	if ( show || hide ) {                                                                                                 // 10767
		props.push( "opacity" );                                                                                             // 10768
	}                                                                                                                     // 10769
                                                                                                                       // 10770
	$.effects.save( el, props );                                                                                          // 10771
	el.show();                                                                                                            // 10772
	$.effects.createWrapper( el ); // Create Wrapper                                                                      // 10773
                                                                                                                       // 10774
	// default distance for the BIGGEST bounce is the outer Distance / 3                                                  // 10775
	if ( !distance ) {                                                                                                    // 10776
		distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;                                                 // 10777
	}                                                                                                                     // 10778
                                                                                                                       // 10779
	if ( show ) {                                                                                                         // 10780
		downAnim = { opacity: 1 };                                                                                           // 10781
		downAnim[ ref ] = 0;                                                                                                 // 10782
                                                                                                                       // 10783
		// if we are showing, force opacity 0 and set the initial position                                                   // 10784
		// then do the "first" animation                                                                                     // 10785
		el.css( "opacity", 0 )                                                                                               // 10786
			.css( ref, motion ? -distance * 2 : distance * 2 )                                                                  // 10787
			.animate( downAnim, speed, easing );                                                                                // 10788
	}                                                                                                                     // 10789
                                                                                                                       // 10790
	// start at the smallest distance if we are hiding                                                                    // 10791
	if ( hide ) {                                                                                                         // 10792
		distance = distance / Math.pow( 2, times - 1 );                                                                      // 10793
	}                                                                                                                     // 10794
                                                                                                                       // 10795
	downAnim = {};                                                                                                        // 10796
	downAnim[ ref ] = 0;                                                                                                  // 10797
	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here                                      // 10798
	for ( i = 0; i < times; i++ ) {                                                                                       // 10799
		upAnim = {};                                                                                                         // 10800
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;                                                                 // 10801
                                                                                                                       // 10802
		el.animate( upAnim, speed, easing )                                                                                  // 10803
			.animate( downAnim, speed, easing );                                                                                // 10804
                                                                                                                       // 10805
		distance = hide ? distance * 2 : distance / 2;                                                                       // 10806
	}                                                                                                                     // 10807
                                                                                                                       // 10808
	// Last Bounce when Hiding                                                                                            // 10809
	if ( hide ) {                                                                                                         // 10810
		upAnim = { opacity: 0 };                                                                                             // 10811
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;                                                                 // 10812
                                                                                                                       // 10813
		el.animate( upAnim, speed, easing );                                                                                 // 10814
	}                                                                                                                     // 10815
                                                                                                                       // 10816
	el.queue(function() {                                                                                                 // 10817
		if ( hide ) {                                                                                                        // 10818
			el.hide();                                                                                                          // 10819
		}                                                                                                                    // 10820
		$.effects.restore( el, props );                                                                                      // 10821
		$.effects.removeWrapper( el );                                                                                       // 10822
		done();                                                                                                              // 10823
	});                                                                                                                   // 10824
                                                                                                                       // 10825
	// inject all the animations we just queued to be first in line (after "inprogress")                                  // 10826
	if ( queuelen > 1) {                                                                                                  // 10827
		queue.splice.apply( queue,                                                                                           // 10828
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 10829
	}                                                                                                                     // 10830
	el.dequeue();                                                                                                         // 10831
                                                                                                                       // 10832
};                                                                                                                     // 10833
                                                                                                                       // 10834
                                                                                                                       // 10835
/*!                                                                                                                    // 10836
 * jQuery UI Effects Clip 1.11.2                                                                                       // 10837
 * http://jqueryui.com                                                                                                 // 10838
 *                                                                                                                     // 10839
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 10840
 * Released under the MIT license.                                                                                     // 10841
 * http://jquery.org/license                                                                                           // 10842
 *                                                                                                                     // 10843
 * http://api.jqueryui.com/clip-effect/                                                                                // 10844
 */                                                                                                                    // 10845
                                                                                                                       // 10846
                                                                                                                       // 10847
var effectClip = $.effects.effect.clip = function( o, done ) {                                                         // 10848
	// Create element                                                                                                     // 10849
	var el = $( this ),                                                                                                   // 10850
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 10851
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 10852
		show = mode === "show",                                                                                              // 10853
		direction = o.direction || "vertical",                                                                               // 10854
		vert = direction === "vertical",                                                                                     // 10855
		size = vert ? "height" : "width",                                                                                    // 10856
		position = vert ? "top" : "left",                                                                                    // 10857
		animation = {},                                                                                                      // 10858
		wrapper, animate, distance;                                                                                          // 10859
                                                                                                                       // 10860
	// Save & Show                                                                                                        // 10861
	$.effects.save( el, props );                                                                                          // 10862
	el.show();                                                                                                            // 10863
                                                                                                                       // 10864
	// Create Wrapper                                                                                                     // 10865
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 10866
		overflow: "hidden"                                                                                                   // 10867
	});                                                                                                                   // 10868
	animate = ( el[0].tagName === "IMG" ) ? wrapper : el;                                                                 // 10869
	distance = animate[ size ]();                                                                                         // 10870
                                                                                                                       // 10871
	// Shift                                                                                                              // 10872
	if ( show ) {                                                                                                         // 10873
		animate.css( size, 0 );                                                                                              // 10874
		animate.css( position, distance / 2 );                                                                               // 10875
	}                                                                                                                     // 10876
                                                                                                                       // 10877
	// Create Animation Object:                                                                                           // 10878
	animation[ size ] = show ? distance : 0;                                                                              // 10879
	animation[ position ] = show ? 0 : distance / 2;                                                                      // 10880
                                                                                                                       // 10881
	// Animate                                                                                                            // 10882
	animate.animate( animation, {                                                                                         // 10883
		queue: false,                                                                                                        // 10884
		duration: o.duration,                                                                                                // 10885
		easing: o.easing,                                                                                                    // 10886
		complete: function() {                                                                                               // 10887
			if ( !show ) {                                                                                                      // 10888
				el.hide();                                                                                                         // 10889
			}                                                                                                                   // 10890
			$.effects.restore( el, props );                                                                                     // 10891
			$.effects.removeWrapper( el );                                                                                      // 10892
			done();                                                                                                             // 10893
		}                                                                                                                    // 10894
	});                                                                                                                   // 10895
                                                                                                                       // 10896
};                                                                                                                     // 10897
                                                                                                                       // 10898
                                                                                                                       // 10899
/*!                                                                                                                    // 10900
 * jQuery UI Effects Drop 1.11.2                                                                                       // 10901
 * http://jqueryui.com                                                                                                 // 10902
 *                                                                                                                     // 10903
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 10904
 * Released under the MIT license.                                                                                     // 10905
 * http://jquery.org/license                                                                                           // 10906
 *                                                                                                                     // 10907
 * http://api.jqueryui.com/drop-effect/                                                                                // 10908
 */                                                                                                                    // 10909
                                                                                                                       // 10910
                                                                                                                       // 10911
var effectDrop = $.effects.effect.drop = function( o, done ) {                                                         // 10912
                                                                                                                       // 10913
	var el = $( this ),                                                                                                   // 10914
		props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],                              // 10915
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 10916
		show = mode === "show",                                                                                              // 10917
		direction = o.direction || "left",                                                                                   // 10918
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",                                               // 10919
		motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",                                             // 10920
		animation = {                                                                                                        // 10921
			opacity: show ? 1 : 0                                                                                               // 10922
		},                                                                                                                   // 10923
		distance;                                                                                                            // 10924
                                                                                                                       // 10925
	// Adjust                                                                                                             // 10926
	$.effects.save( el, props );                                                                                          // 10927
	el.show();                                                                                                            // 10928
	$.effects.createWrapper( el );                                                                                        // 10929
                                                                                                                       // 10930
	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;                              // 10931
                                                                                                                       // 10932
	if ( show ) {                                                                                                         // 10933
		el                                                                                                                   // 10934
			.css( "opacity", 0 )                                                                                                // 10935
			.css( ref, motion === "pos" ? -distance : distance );                                                               // 10936
	}                                                                                                                     // 10937
                                                                                                                       // 10938
	// Animation                                                                                                          // 10939
	animation[ ref ] = ( show ?                                                                                           // 10940
		( motion === "pos" ? "+=" : "-=" ) :                                                                                 // 10941
		( motion === "pos" ? "-=" : "+=" ) ) +                                                                               // 10942
		distance;                                                                                                            // 10943
                                                                                                                       // 10944
	// Animate                                                                                                            // 10945
	el.animate( animation, {                                                                                              // 10946
		queue: false,                                                                                                        // 10947
		duration: o.duration,                                                                                                // 10948
		easing: o.easing,                                                                                                    // 10949
		complete: function() {                                                                                               // 10950
			if ( mode === "hide" ) {                                                                                            // 10951
				el.hide();                                                                                                         // 10952
			}                                                                                                                   // 10953
			$.effects.restore( el, props );                                                                                     // 10954
			$.effects.removeWrapper( el );                                                                                      // 10955
			done();                                                                                                             // 10956
		}                                                                                                                    // 10957
	});                                                                                                                   // 10958
};                                                                                                                     // 10959
                                                                                                                       // 10960
                                                                                                                       // 10961
/*!                                                                                                                    // 10962
 * jQuery UI Effects Explode 1.11.2                                                                                    // 10963
 * http://jqueryui.com                                                                                                 // 10964
 *                                                                                                                     // 10965
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 10966
 * Released under the MIT license.                                                                                     // 10967
 * http://jquery.org/license                                                                                           // 10968
 *                                                                                                                     // 10969
 * http://api.jqueryui.com/explode-effect/                                                                             // 10970
 */                                                                                                                    // 10971
                                                                                                                       // 10972
                                                                                                                       // 10973
var effectExplode = $.effects.effect.explode = function( o, done ) {                                                   // 10974
                                                                                                                       // 10975
	var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,                                                        // 10976
		cells = rows,                                                                                                        // 10977
		el = $( this ),                                                                                                      // 10978
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 10979
		show = mode === "show",                                                                                              // 10980
                                                                                                                       // 10981
		// show and then visibility:hidden the element before calculating offset                                             // 10982
		offset = el.show().css( "visibility", "hidden" ).offset(),                                                           // 10983
                                                                                                                       // 10984
		// width and height of a piece                                                                                       // 10985
		width = Math.ceil( el.outerWidth() / cells ),                                                                        // 10986
		height = Math.ceil( el.outerHeight() / rows ),                                                                       // 10987
		pieces = [],                                                                                                         // 10988
                                                                                                                       // 10989
		// loop                                                                                                              // 10990
		i, j, left, top, mx, my;                                                                                             // 10991
                                                                                                                       // 10992
	// children animate complete:                                                                                         // 10993
	function childComplete() {                                                                                            // 10994
		pieces.push( this );                                                                                                 // 10995
		if ( pieces.length === rows * cells ) {                                                                              // 10996
			animComplete();                                                                                                     // 10997
		}                                                                                                                    // 10998
	}                                                                                                                     // 10999
                                                                                                                       // 11000
	// clone the element for each row and cell.                                                                           // 11001
	for ( i = 0; i < rows ; i++ ) { // ===>                                                                               // 11002
		top = offset.top + i * height;                                                                                       // 11003
		my = i - ( rows - 1 ) / 2 ;                                                                                          // 11004
                                                                                                                       // 11005
		for ( j = 0; j < cells ; j++ ) { // |||                                                                              // 11006
			left = offset.left + j * width;                                                                                     // 11007
			mx = j - ( cells - 1 ) / 2 ;                                                                                        // 11008
                                                                                                                       // 11009
			// Create a clone of the now hidden main element that will be absolute positioned                                   // 11010
			// within a wrapper div off the -left and -top equal to size of our pieces                                          // 11011
			el                                                                                                                  // 11012
				.clone()                                                                                                           // 11013
				.appendTo( "body" )                                                                                                // 11014
				.wrap( "<div></div>" )                                                                                             // 11015
				.css({                                                                                                             // 11016
					position: "absolute",                                                                                             // 11017
					visibility: "visible",                                                                                            // 11018
					left: -j * width,                                                                                                 // 11019
					top: -i * height                                                                                                  // 11020
				})                                                                                                                 // 11021
                                                                                                                       // 11022
			// select the wrapper - make it overflow: hidden and absolute positioned based on                                   // 11023
			// where the original was located +left and +top equal to the size of pieces                                        // 11024
				.parent()                                                                                                          // 11025
				.addClass( "ui-effects-explode" )                                                                                  // 11026
				.css({                                                                                                             // 11027
					position: "absolute",                                                                                             // 11028
					overflow: "hidden",                                                                                               // 11029
					width: width,                                                                                                     // 11030
					height: height,                                                                                                   // 11031
					left: left + ( show ? mx * width : 0 ),                                                                           // 11032
					top: top + ( show ? my * height : 0 ),                                                                            // 11033
					opacity: show ? 0 : 1                                                                                             // 11034
				}).animate({                                                                                                       // 11035
					left: left + ( show ? 0 : mx * width ),                                                                           // 11036
					top: top + ( show ? 0 : my * height ),                                                                            // 11037
					opacity: show ? 1 : 0                                                                                             // 11038
				}, o.duration || 500, o.easing, childComplete );                                                                   // 11039
		}                                                                                                                    // 11040
	}                                                                                                                     // 11041
                                                                                                                       // 11042
	function animComplete() {                                                                                             // 11043
		el.css({                                                                                                             // 11044
			visibility: "visible"                                                                                               // 11045
		});                                                                                                                  // 11046
		$( pieces ).remove();                                                                                                // 11047
		if ( !show ) {                                                                                                       // 11048
			el.hide();                                                                                                          // 11049
		}                                                                                                                    // 11050
		done();                                                                                                              // 11051
	}                                                                                                                     // 11052
};                                                                                                                     // 11053
                                                                                                                       // 11054
                                                                                                                       // 11055
/*!                                                                                                                    // 11056
 * jQuery UI Effects Fade 1.11.2                                                                                       // 11057
 * http://jqueryui.com                                                                                                 // 11058
 *                                                                                                                     // 11059
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11060
 * Released under the MIT license.                                                                                     // 11061
 * http://jquery.org/license                                                                                           // 11062
 *                                                                                                                     // 11063
 * http://api.jqueryui.com/fade-effect/                                                                                // 11064
 */                                                                                                                    // 11065
                                                                                                                       // 11066
                                                                                                                       // 11067
var effectFade = $.effects.effect.fade = function( o, done ) {                                                         // 11068
	var el = $( this ),                                                                                                   // 11069
		mode = $.effects.setMode( el, o.mode || "toggle" );                                                                  // 11070
                                                                                                                       // 11071
	el.animate({                                                                                                          // 11072
		opacity: mode                                                                                                        // 11073
	}, {                                                                                                                  // 11074
		queue: false,                                                                                                        // 11075
		duration: o.duration,                                                                                                // 11076
		easing: o.easing,                                                                                                    // 11077
		complete: done                                                                                                       // 11078
	});                                                                                                                   // 11079
};                                                                                                                     // 11080
                                                                                                                       // 11081
                                                                                                                       // 11082
/*!                                                                                                                    // 11083
 * jQuery UI Effects Fold 1.11.2                                                                                       // 11084
 * http://jqueryui.com                                                                                                 // 11085
 *                                                                                                                     // 11086
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11087
 * Released under the MIT license.                                                                                     // 11088
 * http://jquery.org/license                                                                                           // 11089
 *                                                                                                                     // 11090
 * http://api.jqueryui.com/fold-effect/                                                                                // 11091
 */                                                                                                                    // 11092
                                                                                                                       // 11093
                                                                                                                       // 11094
var effectFold = $.effects.effect.fold = function( o, done ) {                                                         // 11095
                                                                                                                       // 11096
	// Create element                                                                                                     // 11097
	var el = $( this ),                                                                                                   // 11098
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 11099
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 11100
		show = mode === "show",                                                                                              // 11101
		hide = mode === "hide",                                                                                              // 11102
		size = o.size || 15,                                                                                                 // 11103
		percent = /([0-9]+)%/.exec( size ),                                                                                  // 11104
		horizFirst = !!o.horizFirst,                                                                                         // 11105
		widthFirst = show !== horizFirst,                                                                                    // 11106
		ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],                                                    // 11107
		duration = o.duration / 2,                                                                                           // 11108
		wrapper, distance,                                                                                                   // 11109
		animation1 = {},                                                                                                     // 11110
		animation2 = {};                                                                                                     // 11111
                                                                                                                       // 11112
	$.effects.save( el, props );                                                                                          // 11113
	el.show();                                                                                                            // 11114
                                                                                                                       // 11115
	// Create Wrapper                                                                                                     // 11116
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 11117
		overflow: "hidden"                                                                                                   // 11118
	});                                                                                                                   // 11119
	distance = widthFirst ?                                                                                               // 11120
		[ wrapper.width(), wrapper.height() ] :                                                                              // 11121
		[ wrapper.height(), wrapper.width() ];                                                                               // 11122
                                                                                                                       // 11123
	if ( percent ) {                                                                                                      // 11124
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];                                                // 11125
	}                                                                                                                     // 11126
	if ( show ) {                                                                                                         // 11127
		wrapper.css( horizFirst ? {                                                                                          // 11128
			height: 0,                                                                                                          // 11129
			width: size                                                                                                         // 11130
		} : {                                                                                                                // 11131
			height: size,                                                                                                       // 11132
			width: 0                                                                                                            // 11133
		});                                                                                                                  // 11134
	}                                                                                                                     // 11135
                                                                                                                       // 11136
	// Animation                                                                                                          // 11137
	animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;                                                                 // 11138
	animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;                                                                    // 11139
                                                                                                                       // 11140
	// Animate                                                                                                            // 11141
	wrapper                                                                                                               // 11142
		.animate( animation1, duration, o.easing )                                                                           // 11143
		.animate( animation2, duration, o.easing, function() {                                                               // 11144
			if ( hide ) {                                                                                                       // 11145
				el.hide();                                                                                                         // 11146
			}                                                                                                                   // 11147
			$.effects.restore( el, props );                                                                                     // 11148
			$.effects.removeWrapper( el );                                                                                      // 11149
			done();                                                                                                             // 11150
		});                                                                                                                  // 11151
                                                                                                                       // 11152
};                                                                                                                     // 11153
                                                                                                                       // 11154
                                                                                                                       // 11155
/*!                                                                                                                    // 11156
 * jQuery UI Effects Highlight 1.11.2                                                                                  // 11157
 * http://jqueryui.com                                                                                                 // 11158
 *                                                                                                                     // 11159
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11160
 * Released under the MIT license.                                                                                     // 11161
 * http://jquery.org/license                                                                                           // 11162
 *                                                                                                                     // 11163
 * http://api.jqueryui.com/highlight-effect/                                                                           // 11164
 */                                                                                                                    // 11165
                                                                                                                       // 11166
                                                                                                                       // 11167
var effectHighlight = $.effects.effect.highlight = function( o, done ) {                                               // 11168
	var elem = $( this ),                                                                                                 // 11169
		props = [ "backgroundImage", "backgroundColor", "opacity" ],                                                         // 11170
		mode = $.effects.setMode( elem, o.mode || "show" ),                                                                  // 11171
		animation = {                                                                                                        // 11172
			backgroundColor: elem.css( "backgroundColor" )                                                                      // 11173
		};                                                                                                                   // 11174
                                                                                                                       // 11175
	if (mode === "hide") {                                                                                                // 11176
		animation.opacity = 0;                                                                                               // 11177
	}                                                                                                                     // 11178
                                                                                                                       // 11179
	$.effects.save( elem, props );                                                                                        // 11180
                                                                                                                       // 11181
	elem                                                                                                                  // 11182
		.show()                                                                                                              // 11183
		.css({                                                                                                               // 11184
			backgroundImage: "none",                                                                                            // 11185
			backgroundColor: o.color || "#ffff99"                                                                               // 11186
		})                                                                                                                   // 11187
		.animate( animation, {                                                                                               // 11188
			queue: false,                                                                                                       // 11189
			duration: o.duration,                                                                                               // 11190
			easing: o.easing,                                                                                                   // 11191
			complete: function() {                                                                                              // 11192
				if ( mode === "hide" ) {                                                                                           // 11193
					elem.hide();                                                                                                      // 11194
				}                                                                                                                  // 11195
				$.effects.restore( elem, props );                                                                                  // 11196
				done();                                                                                                            // 11197
			}                                                                                                                   // 11198
		});                                                                                                                  // 11199
};                                                                                                                     // 11200
                                                                                                                       // 11201
                                                                                                                       // 11202
/*!                                                                                                                    // 11203
 * jQuery UI Effects Size 1.11.2                                                                                       // 11204
 * http://jqueryui.com                                                                                                 // 11205
 *                                                                                                                     // 11206
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11207
 * Released under the MIT license.                                                                                     // 11208
 * http://jquery.org/license                                                                                           // 11209
 *                                                                                                                     // 11210
 * http://api.jqueryui.com/size-effect/                                                                                // 11211
 */                                                                                                                    // 11212
                                                                                                                       // 11213
                                                                                                                       // 11214
var effectSize = $.effects.effect.size = function( o, done ) {                                                         // 11215
                                                                                                                       // 11216
	// Create element                                                                                                     // 11217
	var original, baseline, factor,                                                                                       // 11218
		el = $( this ),                                                                                                      // 11219
		props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],                 // 11220
                                                                                                                       // 11221
		// Always restore                                                                                                    // 11222
		props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],                                    // 11223
                                                                                                                       // 11224
		// Copy for children                                                                                                 // 11225
		props2 = [ "width", "height", "overflow" ],                                                                          // 11226
		cProps = [ "fontSize" ],                                                                                             // 11227
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],                                   // 11228
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],                                   // 11229
                                                                                                                       // 11230
		// Set options                                                                                                       // 11231
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 11232
		restore = o.restore || mode !== "effect",                                                                            // 11233
		scale = o.scale || "both",                                                                                           // 11234
		origin = o.origin || [ "middle", "center" ],                                                                         // 11235
		position = el.css( "position" ),                                                                                     // 11236
		props = restore ? props0 : props1,                                                                                   // 11237
		zero = {                                                                                                             // 11238
			height: 0,                                                                                                          // 11239
			width: 0,                                                                                                           // 11240
			outerHeight: 0,                                                                                                     // 11241
			outerWidth: 0                                                                                                       // 11242
		};                                                                                                                   // 11243
                                                                                                                       // 11244
	if ( mode === "show" ) {                                                                                              // 11245
		el.show();                                                                                                           // 11246
	}                                                                                                                     // 11247
	original = {                                                                                                          // 11248
		height: el.height(),                                                                                                 // 11249
		width: el.width(),                                                                                                   // 11250
		outerHeight: el.outerHeight(),                                                                                       // 11251
		outerWidth: el.outerWidth()                                                                                          // 11252
	};                                                                                                                    // 11253
                                                                                                                       // 11254
	if ( o.mode === "toggle" && mode === "show" ) {                                                                       // 11255
		el.from = o.to || zero;                                                                                              // 11256
		el.to = o.from || original;                                                                                          // 11257
	} else {                                                                                                              // 11258
		el.from = o.from || ( mode === "show" ? zero : original );                                                           // 11259
		el.to = o.to || ( mode === "hide" ? zero : original );                                                               // 11260
	}                                                                                                                     // 11261
                                                                                                                       // 11262
	// Set scaling factor                                                                                                 // 11263
	factor = {                                                                                                            // 11264
		from: {                                                                                                              // 11265
			y: el.from.height / original.height,                                                                                // 11266
			x: el.from.width / original.width                                                                                   // 11267
		},                                                                                                                   // 11268
		to: {                                                                                                                // 11269
			y: el.to.height / original.height,                                                                                  // 11270
			x: el.to.width / original.width                                                                                     // 11271
		}                                                                                                                    // 11272
	};                                                                                                                    // 11273
                                                                                                                       // 11274
	// Scale the css box                                                                                                  // 11275
	if ( scale === "box" || scale === "both" ) {                                                                          // 11276
                                                                                                                       // 11277
		// Vertical props scaling                                                                                            // 11278
		if ( factor.from.y !== factor.to.y ) {                                                                               // 11279
			props = props.concat( vProps );                                                                                     // 11280
			el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );                                            // 11281
			el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );                                                  // 11282
		}                                                                                                                    // 11283
                                                                                                                       // 11284
		// Horizontal props scaling                                                                                          // 11285
		if ( factor.from.x !== factor.to.x ) {                                                                               // 11286
			props = props.concat( hProps );                                                                                     // 11287
			el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );                                            // 11288
			el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );                                                  // 11289
		}                                                                                                                    // 11290
	}                                                                                                                     // 11291
                                                                                                                       // 11292
	// Scale the content                                                                                                  // 11293
	if ( scale === "content" || scale === "both" ) {                                                                      // 11294
                                                                                                                       // 11295
		// Vertical props scaling                                                                                            // 11296
		if ( factor.from.y !== factor.to.y ) {                                                                               // 11297
			props = props.concat( cProps ).concat( props2 );                                                                    // 11298
			el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );                                            // 11299
			el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );                                                  // 11300
		}                                                                                                                    // 11301
	}                                                                                                                     // 11302
                                                                                                                       // 11303
	$.effects.save( el, props );                                                                                          // 11304
	el.show();                                                                                                            // 11305
	$.effects.createWrapper( el );                                                                                        // 11306
	el.css( "overflow", "hidden" ).css( el.from );                                                                        // 11307
                                                                                                                       // 11308
	// Adjust                                                                                                             // 11309
	if (origin) { // Calculate baseline shifts                                                                            // 11310
		baseline = $.effects.getBaseline( origin, original );                                                                // 11311
		el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;                                              // 11312
		el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;                                               // 11313
		el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;                                               // 11314
		el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;                                                // 11315
	}                                                                                                                     // 11316
	el.css( el.from ); // set top & left                                                                                  // 11317
                                                                                                                       // 11318
	// Animate                                                                                                            // 11319
	if ( scale === "content" || scale === "both" ) { // Scale the children                                                // 11320
                                                                                                                       // 11321
		// Add margins/font-size                                                                                             // 11322
		vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);                                              // 11323
		hProps = hProps.concat([ "marginLeft", "marginRight" ]);                                                             // 11324
		props2 = props0.concat(vProps).concat(hProps);                                                                       // 11325
                                                                                                                       // 11326
		el.find( "*[width]" ).each( function() {                                                                             // 11327
			var child = $( this ),                                                                                              // 11328
				c_original = {                                                                                                     // 11329
					height: child.height(),                                                                                           // 11330
					width: child.width(),                                                                                             // 11331
					outerHeight: child.outerHeight(),                                                                                 // 11332
					outerWidth: child.outerWidth()                                                                                    // 11333
				};                                                                                                                 // 11334
			if (restore) {                                                                                                      // 11335
				$.effects.save(child, props2);                                                                                     // 11336
			}                                                                                                                   // 11337
                                                                                                                       // 11338
			child.from = {                                                                                                      // 11339
				height: c_original.height * factor.from.y,                                                                         // 11340
				width: c_original.width * factor.from.x,                                                                           // 11341
				outerHeight: c_original.outerHeight * factor.from.y,                                                               // 11342
				outerWidth: c_original.outerWidth * factor.from.x                                                                  // 11343
			};                                                                                                                  // 11344
			child.to = {                                                                                                        // 11345
				height: c_original.height * factor.to.y,                                                                           // 11346
				width: c_original.width * factor.to.x,                                                                             // 11347
				outerHeight: c_original.height * factor.to.y,                                                                      // 11348
				outerWidth: c_original.width * factor.to.x                                                                         // 11349
			};                                                                                                                  // 11350
                                                                                                                       // 11351
			// Vertical props scaling                                                                                           // 11352
			if ( factor.from.y !== factor.to.y ) {                                                                              // 11353
				child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );                                  // 11354
				child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );                                        // 11355
			}                                                                                                                   // 11356
                                                                                                                       // 11357
			// Horizontal props scaling                                                                                         // 11358
			if ( factor.from.x !== factor.to.x ) {                                                                              // 11359
				child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );                                  // 11360
				child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );                                        // 11361
			}                                                                                                                   // 11362
                                                                                                                       // 11363
			// Animate children                                                                                                 // 11364
			child.css( child.from );                                                                                            // 11365
			child.animate( child.to, o.duration, o.easing, function() {                                                         // 11366
                                                                                                                       // 11367
				// Restore children                                                                                                // 11368
				if ( restore ) {                                                                                                   // 11369
					$.effects.restore( child, props2 );                                                                               // 11370
				}                                                                                                                  // 11371
			});                                                                                                                 // 11372
		});                                                                                                                  // 11373
	}                                                                                                                     // 11374
                                                                                                                       // 11375
	// Animate                                                                                                            // 11376
	el.animate( el.to, {                                                                                                  // 11377
		queue: false,                                                                                                        // 11378
		duration: o.duration,                                                                                                // 11379
		easing: o.easing,                                                                                                    // 11380
		complete: function() {                                                                                               // 11381
			if ( el.to.opacity === 0 ) {                                                                                        // 11382
				el.css( "opacity", el.from.opacity );                                                                              // 11383
			}                                                                                                                   // 11384
			if ( mode === "hide" ) {                                                                                            // 11385
				el.hide();                                                                                                         // 11386
			}                                                                                                                   // 11387
			$.effects.restore( el, props );                                                                                     // 11388
			if ( !restore ) {                                                                                                   // 11389
                                                                                                                       // 11390
				// we need to calculate our new positioning based on the scaling                                                   // 11391
				if ( position === "static" ) {                                                                                     // 11392
					el.css({                                                                                                          // 11393
						position: "relative",                                                                                            // 11394
						top: el.to.top,                                                                                                  // 11395
						left: el.to.left                                                                                                 // 11396
					});                                                                                                               // 11397
				} else {                                                                                                           // 11398
					$.each([ "top", "left" ], function( idx, pos ) {                                                                  // 11399
						el.css( pos, function( _, str ) {                                                                                // 11400
							var val = parseInt( str, 10 ),                                                                                  // 11401
								toRef = idx ? el.to.left : el.to.top;                                                                          // 11402
                                                                                                                       // 11403
							// if original was "auto", recalculate the new value from wrapper                                               // 11404
							if ( str === "auto" ) {                                                                                         // 11405
								return toRef + "px";                                                                                           // 11406
							}                                                                                                               // 11407
                                                                                                                       // 11408
							return val + toRef + "px";                                                                                      // 11409
						});                                                                                                              // 11410
					});                                                                                                               // 11411
				}                                                                                                                  // 11412
			}                                                                                                                   // 11413
                                                                                                                       // 11414
			$.effects.removeWrapper( el );                                                                                      // 11415
			done();                                                                                                             // 11416
		}                                                                                                                    // 11417
	});                                                                                                                   // 11418
                                                                                                                       // 11419
};                                                                                                                     // 11420
                                                                                                                       // 11421
                                                                                                                       // 11422
/*!                                                                                                                    // 11423
 * jQuery UI Effects Scale 1.11.2                                                                                      // 11424
 * http://jqueryui.com                                                                                                 // 11425
 *                                                                                                                     // 11426
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11427
 * Released under the MIT license.                                                                                     // 11428
 * http://jquery.org/license                                                                                           // 11429
 *                                                                                                                     // 11430
 * http://api.jqueryui.com/scale-effect/                                                                               // 11431
 */                                                                                                                    // 11432
                                                                                                                       // 11433
                                                                                                                       // 11434
var effectScale = $.effects.effect.scale = function( o, done ) {                                                       // 11435
                                                                                                                       // 11436
	// Create element                                                                                                     // 11437
	var el = $( this ),                                                                                                   // 11438
		options = $.extend( true, {}, o ),                                                                                   // 11439
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 11440
		percent = parseInt( o.percent, 10 ) ||                                                                               // 11441
			( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),                                            // 11442
		direction = o.direction || "both",                                                                                   // 11443
		origin = o.origin,                                                                                                   // 11444
		original = {                                                                                                         // 11445
			height: el.height(),                                                                                                // 11446
			width: el.width(),                                                                                                  // 11447
			outerHeight: el.outerHeight(),                                                                                      // 11448
			outerWidth: el.outerWidth()                                                                                         // 11449
		},                                                                                                                   // 11450
		factor = {                                                                                                           // 11451
			y: direction !== "horizontal" ? (percent / 100) : 1,                                                                // 11452
			x: direction !== "vertical" ? (percent / 100) : 1                                                                   // 11453
		};                                                                                                                   // 11454
                                                                                                                       // 11455
	// We are going to pass this effect to the size effect:                                                               // 11456
	options.effect = "size";                                                                                              // 11457
	options.queue = false;                                                                                                // 11458
	options.complete = done;                                                                                              // 11459
                                                                                                                       // 11460
	// Set default origin and restore for show/hide                                                                       // 11461
	if ( mode !== "effect" ) {                                                                                            // 11462
		options.origin = origin || [ "middle", "center" ];                                                                   // 11463
		options.restore = true;                                                                                              // 11464
	}                                                                                                                     // 11465
                                                                                                                       // 11466
	options.from = o.from || ( mode === "show" ? {                                                                        // 11467
		height: 0,                                                                                                           // 11468
		width: 0,                                                                                                            // 11469
		outerHeight: 0,                                                                                                      // 11470
		outerWidth: 0                                                                                                        // 11471
	} : original );                                                                                                       // 11472
	options.to = {                                                                                                        // 11473
		height: original.height * factor.y,                                                                                  // 11474
		width: original.width * factor.x,                                                                                    // 11475
		outerHeight: original.outerHeight * factor.y,                                                                        // 11476
		outerWidth: original.outerWidth * factor.x                                                                           // 11477
	};                                                                                                                    // 11478
                                                                                                                       // 11479
	// Fade option to support puff                                                                                        // 11480
	if ( options.fade ) {                                                                                                 // 11481
		if ( mode === "show" ) {                                                                                             // 11482
			options.from.opacity = 0;                                                                                           // 11483
			options.to.opacity = 1;                                                                                             // 11484
		}                                                                                                                    // 11485
		if ( mode === "hide" ) {                                                                                             // 11486
			options.from.opacity = 1;                                                                                           // 11487
			options.to.opacity = 0;                                                                                             // 11488
		}                                                                                                                    // 11489
	}                                                                                                                     // 11490
                                                                                                                       // 11491
	// Animate                                                                                                            // 11492
	el.effect( options );                                                                                                 // 11493
                                                                                                                       // 11494
};                                                                                                                     // 11495
                                                                                                                       // 11496
                                                                                                                       // 11497
/*!                                                                                                                    // 11498
 * jQuery UI Effects Puff 1.11.2                                                                                       // 11499
 * http://jqueryui.com                                                                                                 // 11500
 *                                                                                                                     // 11501
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11502
 * Released under the MIT license.                                                                                     // 11503
 * http://jquery.org/license                                                                                           // 11504
 *                                                                                                                     // 11505
 * http://api.jqueryui.com/puff-effect/                                                                                // 11506
 */                                                                                                                    // 11507
                                                                                                                       // 11508
                                                                                                                       // 11509
var effectPuff = $.effects.effect.puff = function( o, done ) {                                                         // 11510
	var elem = $( this ),                                                                                                 // 11511
		mode = $.effects.setMode( elem, o.mode || "hide" ),                                                                  // 11512
		hide = mode === "hide",                                                                                              // 11513
		percent = parseInt( o.percent, 10 ) || 150,                                                                          // 11514
		factor = percent / 100,                                                                                              // 11515
		original = {                                                                                                         // 11516
			height: elem.height(),                                                                                              // 11517
			width: elem.width(),                                                                                                // 11518
			outerHeight: elem.outerHeight(),                                                                                    // 11519
			outerWidth: elem.outerWidth()                                                                                       // 11520
		};                                                                                                                   // 11521
                                                                                                                       // 11522
	$.extend( o, {                                                                                                        // 11523
		effect: "scale",                                                                                                     // 11524
		queue: false,                                                                                                        // 11525
		fade: true,                                                                                                          // 11526
		mode: mode,                                                                                                          // 11527
		complete: done,                                                                                                      // 11528
		percent: hide ? percent : 100,                                                                                       // 11529
		from: hide ?                                                                                                         // 11530
			original :                                                                                                          // 11531
			{                                                                                                                   // 11532
				height: original.height * factor,                                                                                  // 11533
				width: original.width * factor,                                                                                    // 11534
				outerHeight: original.outerHeight * factor,                                                                        // 11535
				outerWidth: original.outerWidth * factor                                                                           // 11536
			}                                                                                                                   // 11537
	});                                                                                                                   // 11538
                                                                                                                       // 11539
	elem.effect( o );                                                                                                     // 11540
};                                                                                                                     // 11541
                                                                                                                       // 11542
                                                                                                                       // 11543
/*!                                                                                                                    // 11544
 * jQuery UI Effects Pulsate 1.11.2                                                                                    // 11545
 * http://jqueryui.com                                                                                                 // 11546
 *                                                                                                                     // 11547
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11548
 * Released under the MIT license.                                                                                     // 11549
 * http://jquery.org/license                                                                                           // 11550
 *                                                                                                                     // 11551
 * http://api.jqueryui.com/pulsate-effect/                                                                             // 11552
 */                                                                                                                    // 11553
                                                                                                                       // 11554
                                                                                                                       // 11555
var effectPulsate = $.effects.effect.pulsate = function( o, done ) {                                                   // 11556
	var elem = $( this ),                                                                                                 // 11557
		mode = $.effects.setMode( elem, o.mode || "show" ),                                                                  // 11558
		show = mode === "show",                                                                                              // 11559
		hide = mode === "hide",                                                                                              // 11560
		showhide = ( show || mode === "hide" ),                                                                              // 11561
                                                                                                                       // 11562
		// showing or hiding leaves of the "last" animation                                                                  // 11563
		anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),                                                             // 11564
		duration = o.duration / anims,                                                                                       // 11565
		animateTo = 0,                                                                                                       // 11566
		queue = elem.queue(),                                                                                                // 11567
		queuelen = queue.length,                                                                                             // 11568
		i;                                                                                                                   // 11569
                                                                                                                       // 11570
	if ( show || !elem.is(":visible")) {                                                                                  // 11571
		elem.css( "opacity", 0 ).show();                                                                                     // 11572
		animateTo = 1;                                                                                                       // 11573
	}                                                                                                                     // 11574
                                                                                                                       // 11575
	// anims - 1 opacity "toggles"                                                                                        // 11576
	for ( i = 1; i < anims; i++ ) {                                                                                       // 11577
		elem.animate({                                                                                                       // 11578
			opacity: animateTo                                                                                                  // 11579
		}, duration, o.easing );                                                                                             // 11580
		animateTo = 1 - animateTo;                                                                                           // 11581
	}                                                                                                                     // 11582
                                                                                                                       // 11583
	elem.animate({                                                                                                        // 11584
		opacity: animateTo                                                                                                   // 11585
	}, duration, o.easing);                                                                                               // 11586
                                                                                                                       // 11587
	elem.queue(function() {                                                                                               // 11588
		if ( hide ) {                                                                                                        // 11589
			elem.hide();                                                                                                        // 11590
		}                                                                                                                    // 11591
		done();                                                                                                              // 11592
	});                                                                                                                   // 11593
                                                                                                                       // 11594
	// We just queued up "anims" animations, we need to put them next in the queue                                        // 11595
	if ( queuelen > 1 ) {                                                                                                 // 11596
		queue.splice.apply( queue,                                                                                           // 11597
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 11598
	}                                                                                                                     // 11599
	elem.dequeue();                                                                                                       // 11600
};                                                                                                                     // 11601
                                                                                                                       // 11602
                                                                                                                       // 11603
/*!                                                                                                                    // 11604
 * jQuery UI Effects Shake 1.11.2                                                                                      // 11605
 * http://jqueryui.com                                                                                                 // 11606
 *                                                                                                                     // 11607
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11608
 * Released under the MIT license.                                                                                     // 11609
 * http://jquery.org/license                                                                                           // 11610
 *                                                                                                                     // 11611
 * http://api.jqueryui.com/shake-effect/                                                                               // 11612
 */                                                                                                                    // 11613
                                                                                                                       // 11614
                                                                                                                       // 11615
var effectShake = $.effects.effect.shake = function( o, done ) {                                                       // 11616
                                                                                                                       // 11617
	var el = $( this ),                                                                                                   // 11618
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 11619
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 11620
		direction = o.direction || "left",                                                                                   // 11621
		distance = o.distance || 20,                                                                                         // 11622
		times = o.times || 3,                                                                                                // 11623
		anims = times * 2 + 1,                                                                                               // 11624
		speed = Math.round( o.duration / anims ),                                                                            // 11625
		ref = (direction === "up" || direction === "down") ? "top" : "left",                                                 // 11626
		positiveMotion = (direction === "up" || direction === "left"),                                                       // 11627
		animation = {},                                                                                                      // 11628
		animation1 = {},                                                                                                     // 11629
		animation2 = {},                                                                                                     // 11630
		i,                                                                                                                   // 11631
                                                                                                                       // 11632
		// we will need to re-assemble the queue to stack our animations in place                                            // 11633
		queue = el.queue(),                                                                                                  // 11634
		queuelen = queue.length;                                                                                             // 11635
                                                                                                                       // 11636
	$.effects.save( el, props );                                                                                          // 11637
	el.show();                                                                                                            // 11638
	$.effects.createWrapper( el );                                                                                        // 11639
                                                                                                                       // 11640
	// Animation                                                                                                          // 11641
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;                                                       // 11642
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;                                                  // 11643
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;                                                  // 11644
                                                                                                                       // 11645
	// Animate                                                                                                            // 11646
	el.animate( animation, speed, o.easing );                                                                             // 11647
                                                                                                                       // 11648
	// Shakes                                                                                                             // 11649
	for ( i = 1; i < times; i++ ) {                                                                                       // 11650
		el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );                                    // 11651
	}                                                                                                                     // 11652
	el                                                                                                                    // 11653
		.animate( animation1, speed, o.easing )                                                                              // 11654
		.animate( animation, speed / 2, o.easing )                                                                           // 11655
		.queue(function() {                                                                                                  // 11656
			if ( mode === "hide" ) {                                                                                            // 11657
				el.hide();                                                                                                         // 11658
			}                                                                                                                   // 11659
			$.effects.restore( el, props );                                                                                     // 11660
			$.effects.removeWrapper( el );                                                                                      // 11661
			done();                                                                                                             // 11662
		});                                                                                                                  // 11663
                                                                                                                       // 11664
	// inject all the animations we just queued to be first in line (after "inprogress")                                  // 11665
	if ( queuelen > 1) {                                                                                                  // 11666
		queue.splice.apply( queue,                                                                                           // 11667
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 11668
	}                                                                                                                     // 11669
	el.dequeue();                                                                                                         // 11670
                                                                                                                       // 11671
};                                                                                                                     // 11672
                                                                                                                       // 11673
                                                                                                                       // 11674
/*!                                                                                                                    // 11675
 * jQuery UI Effects Slide 1.11.2                                                                                      // 11676
 * http://jqueryui.com                                                                                                 // 11677
 *                                                                                                                     // 11678
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11679
 * Released under the MIT license.                                                                                     // 11680
 * http://jquery.org/license                                                                                           // 11681
 *                                                                                                                     // 11682
 * http://api.jqueryui.com/slide-effect/                                                                               // 11683
 */                                                                                                                    // 11684
                                                                                                                       // 11685
                                                                                                                       // 11686
var effectSlide = $.effects.effect.slide = function( o, done ) {                                                       // 11687
                                                                                                                       // 11688
	// Create element                                                                                                     // 11689
	var el = $( this ),                                                                                                   // 11690
		props = [ "position", "top", "bottom", "left", "right", "width", "height" ],                                         // 11691
		mode = $.effects.setMode( el, o.mode || "show" ),                                                                    // 11692
		show = mode === "show",                                                                                              // 11693
		direction = o.direction || "left",                                                                                   // 11694
		ref = (direction === "up" || direction === "down") ? "top" : "left",                                                 // 11695
		positiveMotion = (direction === "up" || direction === "left"),                                                       // 11696
		distance,                                                                                                            // 11697
		animation = {};                                                                                                      // 11698
                                                                                                                       // 11699
	// Adjust                                                                                                             // 11700
	$.effects.save( el, props );                                                                                          // 11701
	el.show();                                                                                                            // 11702
	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );                                  // 11703
                                                                                                                       // 11704
	$.effects.createWrapper( el ).css({                                                                                   // 11705
		overflow: "hidden"                                                                                                   // 11706
	});                                                                                                                   // 11707
                                                                                                                       // 11708
	if ( show ) {                                                                                                         // 11709
		el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );                           // 11710
	}                                                                                                                     // 11711
                                                                                                                       // 11712
	// Animation                                                                                                          // 11713
	animation[ ref ] = ( show ?                                                                                           // 11714
		( positiveMotion ? "+=" : "-=") :                                                                                    // 11715
		( positiveMotion ? "-=" : "+=")) +                                                                                   // 11716
		distance;                                                                                                            // 11717
                                                                                                                       // 11718
	// Animate                                                                                                            // 11719
	el.animate( animation, {                                                                                              // 11720
		queue: false,                                                                                                        // 11721
		duration: o.duration,                                                                                                // 11722
		easing: o.easing,                                                                                                    // 11723
		complete: function() {                                                                                               // 11724
			if ( mode === "hide" ) {                                                                                            // 11725
				el.hide();                                                                                                         // 11726
			}                                                                                                                   // 11727
			$.effects.restore( el, props );                                                                                     // 11728
			$.effects.removeWrapper( el );                                                                                      // 11729
			done();                                                                                                             // 11730
		}                                                                                                                    // 11731
	});                                                                                                                   // 11732
};                                                                                                                     // 11733
                                                                                                                       // 11734
                                                                                                                       // 11735
/*!                                                                                                                    // 11736
 * jQuery UI Effects Transfer 1.11.2                                                                                   // 11737
 * http://jqueryui.com                                                                                                 // 11738
 *                                                                                                                     // 11739
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11740
 * Released under the MIT license.                                                                                     // 11741
 * http://jquery.org/license                                                                                           // 11742
 *                                                                                                                     // 11743
 * http://api.jqueryui.com/transfer-effect/                                                                            // 11744
 */                                                                                                                    // 11745
                                                                                                                       // 11746
                                                                                                                       // 11747
var effectTransfer = $.effects.effect.transfer = function( o, done ) {                                                 // 11748
	var elem = $( this ),                                                                                                 // 11749
		target = $( o.to ),                                                                                                  // 11750
		targetFixed = target.css( "position" ) === "fixed",                                                                  // 11751
		body = $("body"),                                                                                                    // 11752
		fixTop = targetFixed ? body.scrollTop() : 0,                                                                         // 11753
		fixLeft = targetFixed ? body.scrollLeft() : 0,                                                                       // 11754
		endPosition = target.offset(),                                                                                       // 11755
		animation = {                                                                                                        // 11756
			top: endPosition.top - fixTop,                                                                                      // 11757
			left: endPosition.left - fixLeft,                                                                                   // 11758
			height: target.innerHeight(),                                                                                       // 11759
			width: target.innerWidth()                                                                                          // 11760
		},                                                                                                                   // 11761
		startPosition = elem.offset(),                                                                                       // 11762
		transfer = $( "<div class='ui-effects-transfer'></div>" )                                                            // 11763
			.appendTo( document.body )                                                                                          // 11764
			.addClass( o.className )                                                                                            // 11765
			.css({                                                                                                              // 11766
				top: startPosition.top - fixTop,                                                                                   // 11767
				left: startPosition.left - fixLeft,                                                                                // 11768
				height: elem.innerHeight(),                                                                                        // 11769
				width: elem.innerWidth(),                                                                                          // 11770
				position: targetFixed ? "fixed" : "absolute"                                                                       // 11771
			})                                                                                                                  // 11772
			.animate( animation, o.duration, o.easing, function() {                                                             // 11773
				transfer.remove();                                                                                                 // 11774
				done();                                                                                                            // 11775
			});                                                                                                                 // 11776
};                                                                                                                     // 11777
                                                                                                                       // 11778
                                                                                                                       // 11779
/*!                                                                                                                    // 11780
 * jQuery UI Progressbar 1.11.2                                                                                        // 11781
 * http://jqueryui.com                                                                                                 // 11782
 *                                                                                                                     // 11783
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11784
 * Released under the MIT license.                                                                                     // 11785
 * http://jquery.org/license                                                                                           // 11786
 *                                                                                                                     // 11787
 * http://api.jqueryui.com/progressbar/                                                                                // 11788
 */                                                                                                                    // 11789
                                                                                                                       // 11790
                                                                                                                       // 11791
var progressbar = $.widget( "ui.progressbar", {                                                                        // 11792
	version: "1.11.2",                                                                                                    // 11793
	options: {                                                                                                            // 11794
		max: 100,                                                                                                            // 11795
		value: 0,                                                                                                            // 11796
                                                                                                                       // 11797
		change: null,                                                                                                        // 11798
		complete: null                                                                                                       // 11799
	},                                                                                                                    // 11800
                                                                                                                       // 11801
	min: 0,                                                                                                               // 11802
                                                                                                                       // 11803
	_create: function() {                                                                                                 // 11804
		// Constrain initial value                                                                                           // 11805
		this.oldValue = this.options.value = this._constrainedValue();                                                       // 11806
                                                                                                                       // 11807
		this.element                                                                                                         // 11808
			.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )                                             // 11809
			.attr({                                                                                                             // 11810
				// Only set static values, aria-valuenow and aria-valuemax are                                                     // 11811
				// set inside _refreshValue()                                                                                      // 11812
				role: "progressbar",                                                                                               // 11813
				"aria-valuemin": this.min                                                                                          // 11814
			});                                                                                                                 // 11815
                                                                                                                       // 11816
		this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )                      // 11817
			.appendTo( this.element );                                                                                          // 11818
                                                                                                                       // 11819
		this._refreshValue();                                                                                                // 11820
	},                                                                                                                    // 11821
                                                                                                                       // 11822
	_destroy: function() {                                                                                                // 11823
		this.element                                                                                                         // 11824
			.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )                                          // 11825
			.removeAttr( "role" )                                                                                               // 11826
			.removeAttr( "aria-valuemin" )                                                                                      // 11827
			.removeAttr( "aria-valuemax" )                                                                                      // 11828
			.removeAttr( "aria-valuenow" );                                                                                     // 11829
                                                                                                                       // 11830
		this.valueDiv.remove();                                                                                              // 11831
	},                                                                                                                    // 11832
                                                                                                                       // 11833
	value: function( newValue ) {                                                                                         // 11834
		if ( newValue === undefined ) {                                                                                      // 11835
			return this.options.value;                                                                                          // 11836
		}                                                                                                                    // 11837
                                                                                                                       // 11838
		this.options.value = this._constrainedValue( newValue );                                                             // 11839
		this._refreshValue();                                                                                                // 11840
	},                                                                                                                    // 11841
                                                                                                                       // 11842
	_constrainedValue: function( newValue ) {                                                                             // 11843
		if ( newValue === undefined ) {                                                                                      // 11844
			newValue = this.options.value;                                                                                      // 11845
		}                                                                                                                    // 11846
                                                                                                                       // 11847
		this.indeterminate = newValue === false;                                                                             // 11848
                                                                                                                       // 11849
		// sanitize value                                                                                                    // 11850
		if ( typeof newValue !== "number" ) {                                                                                // 11851
			newValue = 0;                                                                                                       // 11852
		}                                                                                                                    // 11853
                                                                                                                       // 11854
		return this.indeterminate ? false :                                                                                  // 11855
			Math.min( this.options.max, Math.max( this.min, newValue ) );                                                       // 11856
	},                                                                                                                    // 11857
                                                                                                                       // 11858
	_setOptions: function( options ) {                                                                                    // 11859
		// Ensure "value" option is set after other values (like max)                                                        // 11860
		var value = options.value;                                                                                           // 11861
		delete options.value;                                                                                                // 11862
                                                                                                                       // 11863
		this._super( options );                                                                                              // 11864
                                                                                                                       // 11865
		this.options.value = this._constrainedValue( value );                                                                // 11866
		this._refreshValue();                                                                                                // 11867
	},                                                                                                                    // 11868
                                                                                                                       // 11869
	_setOption: function( key, value ) {                                                                                  // 11870
		if ( key === "max" ) {                                                                                               // 11871
			// Don't allow a max less than min                                                                                  // 11872
			value = Math.max( this.min, value );                                                                                // 11873
		}                                                                                                                    // 11874
		if ( key === "disabled" ) {                                                                                          // 11875
			this.element                                                                                                        // 11876
				.toggleClass( "ui-state-disabled", !!value )                                                                       // 11877
				.attr( "aria-disabled", value );                                                                                   // 11878
		}                                                                                                                    // 11879
		this._super( key, value );                                                                                           // 11880
	},                                                                                                                    // 11881
                                                                                                                       // 11882
	_percentage: function() {                                                                                             // 11883
		return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );         // 11884
	},                                                                                                                    // 11885
                                                                                                                       // 11886
	_refreshValue: function() {                                                                                           // 11887
		var value = this.options.value,                                                                                      // 11888
			percentage = this._percentage();                                                                                    // 11889
                                                                                                                       // 11890
		this.valueDiv                                                                                                        // 11891
			.toggle( this.indeterminate || value > this.min )                                                                   // 11892
			.toggleClass( "ui-corner-right", value === this.options.max )                                                       // 11893
			.width( percentage.toFixed(0) + "%" );                                                                              // 11894
                                                                                                                       // 11895
		this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );                                      // 11896
                                                                                                                       // 11897
		if ( this.indeterminate ) {                                                                                          // 11898
			this.element.removeAttr( "aria-valuenow" );                                                                         // 11899
			if ( !this.overlayDiv ) {                                                                                           // 11900
				this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );                     // 11901
			}                                                                                                                   // 11902
		} else {                                                                                                             // 11903
			this.element.attr({                                                                                                 // 11904
				"aria-valuemax": this.options.max,                                                                                 // 11905
				"aria-valuenow": value                                                                                             // 11906
			});                                                                                                                 // 11907
			if ( this.overlayDiv ) {                                                                                            // 11908
				this.overlayDiv.remove();                                                                                          // 11909
				this.overlayDiv = null;                                                                                            // 11910
			}                                                                                                                   // 11911
		}                                                                                                                    // 11912
                                                                                                                       // 11913
		if ( this.oldValue !== value ) {                                                                                     // 11914
			this.oldValue = value;                                                                                              // 11915
			this._trigger( "change" );                                                                                          // 11916
		}                                                                                                                    // 11917
		if ( value === this.options.max ) {                                                                                  // 11918
			this._trigger( "complete" );                                                                                        // 11919
		}                                                                                                                    // 11920
	}                                                                                                                     // 11921
});                                                                                                                    // 11922
                                                                                                                       // 11923
                                                                                                                       // 11924
/*!                                                                                                                    // 11925
 * jQuery UI Selectable 1.11.2                                                                                         // 11926
 * http://jqueryui.com                                                                                                 // 11927
 *                                                                                                                     // 11928
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 11929
 * Released under the MIT license.                                                                                     // 11930
 * http://jquery.org/license                                                                                           // 11931
 *                                                                                                                     // 11932
 * http://api.jqueryui.com/selectable/                                                                                 // 11933
 */                                                                                                                    // 11934
                                                                                                                       // 11935
                                                                                                                       // 11936
var selectable = $.widget("ui.selectable", $.ui.mouse, {                                                               // 11937
	version: "1.11.2",                                                                                                    // 11938
	options: {                                                                                                            // 11939
		appendTo: "body",                                                                                                    // 11940
		autoRefresh: true,                                                                                                   // 11941
		distance: 0,                                                                                                         // 11942
		filter: "*",                                                                                                         // 11943
		tolerance: "touch",                                                                                                  // 11944
                                                                                                                       // 11945
		// callbacks                                                                                                         // 11946
		selected: null,                                                                                                      // 11947
		selecting: null,                                                                                                     // 11948
		start: null,                                                                                                         // 11949
		stop: null,                                                                                                          // 11950
		unselected: null,                                                                                                    // 11951
		unselecting: null                                                                                                    // 11952
	},                                                                                                                    // 11953
	_create: function() {                                                                                                 // 11954
		var selectees,                                                                                                       // 11955
			that = this;                                                                                                        // 11956
                                                                                                                       // 11957
		this.element.addClass("ui-selectable");                                                                              // 11958
                                                                                                                       // 11959
		this.dragged = false;                                                                                                // 11960
                                                                                                                       // 11961
		// cache selectee children based on filter                                                                           // 11962
		this.refresh = function() {                                                                                          // 11963
			selectees = $(that.options.filter, that.element[0]);                                                                // 11964
			selectees.addClass("ui-selectee");                                                                                  // 11965
			selectees.each(function() {                                                                                         // 11966
				var $this = $(this),                                                                                               // 11967
					pos = $this.offset();                                                                                             // 11968
				$.data(this, "selectable-item", {                                                                                  // 11969
					element: this,                                                                                                    // 11970
					$element: $this,                                                                                                  // 11971
					left: pos.left,                                                                                                   // 11972
					top: pos.top,                                                                                                     // 11973
					right: pos.left + $this.outerWidth(),                                                                             // 11974
					bottom: pos.top + $this.outerHeight(),                                                                            // 11975
					startselected: false,                                                                                             // 11976
					selected: $this.hasClass("ui-selected"),                                                                          // 11977
					selecting: $this.hasClass("ui-selecting"),                                                                        // 11978
					unselecting: $this.hasClass("ui-unselecting")                                                                     // 11979
				});                                                                                                                // 11980
			});                                                                                                                 // 11981
		};                                                                                                                   // 11982
		this.refresh();                                                                                                      // 11983
                                                                                                                       // 11984
		this.selectees = selectees.addClass("ui-selectee");                                                                  // 11985
                                                                                                                       // 11986
		this._mouseInit();                                                                                                   // 11987
                                                                                                                       // 11988
		this.helper = $("<div class='ui-selectable-helper'></div>");                                                         // 11989
	},                                                                                                                    // 11990
                                                                                                                       // 11991
	_destroy: function() {                                                                                                // 11992
		this.selectees                                                                                                       // 11993
			.removeClass("ui-selectee")                                                                                         // 11994
			.removeData("selectable-item");                                                                                     // 11995
		this.element                                                                                                         // 11996
			.removeClass("ui-selectable ui-selectable-disabled");                                                               // 11997
		this._mouseDestroy();                                                                                                // 11998
	},                                                                                                                    // 11999
                                                                                                                       // 12000
	_mouseStart: function(event) {                                                                                        // 12001
		var that = this,                                                                                                     // 12002
			options = this.options;                                                                                             // 12003
                                                                                                                       // 12004
		this.opos = [ event.pageX, event.pageY ];                                                                            // 12005
                                                                                                                       // 12006
		if (this.options.disabled) {                                                                                         // 12007
			return;                                                                                                             // 12008
		}                                                                                                                    // 12009
                                                                                                                       // 12010
		this.selectees = $(options.filter, this.element[0]);                                                                 // 12011
                                                                                                                       // 12012
		this._trigger("start", event);                                                                                       // 12013
                                                                                                                       // 12014
		$(options.appendTo).append(this.helper);                                                                             // 12015
		// position helper (lasso)                                                                                           // 12016
		this.helper.css({                                                                                                    // 12017
			"left": event.pageX,                                                                                                // 12018
			"top": event.pageY,                                                                                                 // 12019
			"width": 0,                                                                                                         // 12020
			"height": 0                                                                                                         // 12021
		});                                                                                                                  // 12022
                                                                                                                       // 12023
		if (options.autoRefresh) {                                                                                           // 12024
			this.refresh();                                                                                                     // 12025
		}                                                                                                                    // 12026
                                                                                                                       // 12027
		this.selectees.filter(".ui-selected").each(function() {                                                              // 12028
			var selectee = $.data(this, "selectable-item");                                                                     // 12029
			selectee.startselected = true;                                                                                      // 12030
			if (!event.metaKey && !event.ctrlKey) {                                                                             // 12031
				selectee.$element.removeClass("ui-selected");                                                                      // 12032
				selectee.selected = false;                                                                                         // 12033
				selectee.$element.addClass("ui-unselecting");                                                                      // 12034
				selectee.unselecting = true;                                                                                       // 12035
				// selectable UNSELECTING callback                                                                                 // 12036
				that._trigger("unselecting", event, {                                                                              // 12037
					unselecting: selectee.element                                                                                     // 12038
				});                                                                                                                // 12039
			}                                                                                                                   // 12040
		});                                                                                                                  // 12041
                                                                                                                       // 12042
		$(event.target).parents().addBack().each(function() {                                                                // 12043
			var doSelect,                                                                                                       // 12044
				selectee = $.data(this, "selectable-item");                                                                        // 12045
			if (selectee) {                                                                                                     // 12046
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");                       // 12047
				selectee.$element                                                                                                  // 12048
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")                                                         // 12049
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");                                                          // 12050
				selectee.unselecting = !doSelect;                                                                                  // 12051
				selectee.selecting = doSelect;                                                                                     // 12052
				selectee.selected = doSelect;                                                                                      // 12053
				// selectable (UN)SELECTING callback                                                                               // 12054
				if (doSelect) {                                                                                                    // 12055
					that._trigger("selecting", event, {                                                                               // 12056
						selecting: selectee.element                                                                                      // 12057
					});                                                                                                               // 12058
				} else {                                                                                                           // 12059
					that._trigger("unselecting", event, {                                                                             // 12060
						unselecting: selectee.element                                                                                    // 12061
					});                                                                                                               // 12062
				}                                                                                                                  // 12063
				return false;                                                                                                      // 12064
			}                                                                                                                   // 12065
		});                                                                                                                  // 12066
                                                                                                                       // 12067
	},                                                                                                                    // 12068
                                                                                                                       // 12069
	_mouseDrag: function(event) {                                                                                         // 12070
                                                                                                                       // 12071
		this.dragged = true;                                                                                                 // 12072
                                                                                                                       // 12073
		if (this.options.disabled) {                                                                                         // 12074
			return;                                                                                                             // 12075
		}                                                                                                                    // 12076
                                                                                                                       // 12077
		var tmp,                                                                                                             // 12078
			that = this,                                                                                                        // 12079
			options = this.options,                                                                                             // 12080
			x1 = this.opos[0],                                                                                                  // 12081
			y1 = this.opos[1],                                                                                                  // 12082
			x2 = event.pageX,                                                                                                   // 12083
			y2 = event.pageY;                                                                                                   // 12084
                                                                                                                       // 12085
		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }                                                                        // 12086
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }                                                                        // 12087
		this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });                                             // 12088
                                                                                                                       // 12089
		this.selectees.each(function() {                                                                                     // 12090
			var selectee = $.data(this, "selectable-item"),                                                                     // 12091
				hit = false;                                                                                                       // 12092
                                                                                                                       // 12093
			//prevent helper from being selected if appendTo: selectable                                                        // 12094
			if (!selectee || selectee.element === that.element[0]) {                                                            // 12095
				return;                                                                                                            // 12096
			}                                                                                                                   // 12097
                                                                                                                       // 12098
			if (options.tolerance === "touch") {                                                                                // 12099
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );               // 12100
			} else if (options.tolerance === "fit") {                                                                           // 12101
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);                    // 12102
			}                                                                                                                   // 12103
                                                                                                                       // 12104
			if (hit) {                                                                                                          // 12105
				// SELECT                                                                                                          // 12106
				if (selectee.selected) {                                                                                           // 12107
					selectee.$element.removeClass("ui-selected");                                                                     // 12108
					selectee.selected = false;                                                                                        // 12109
				}                                                                                                                  // 12110
				if (selectee.unselecting) {                                                                                        // 12111
					selectee.$element.removeClass("ui-unselecting");                                                                  // 12112
					selectee.unselecting = false;                                                                                     // 12113
				}                                                                                                                  // 12114
				if (!selectee.selecting) {                                                                                         // 12115
					selectee.$element.addClass("ui-selecting");                                                                       // 12116
					selectee.selecting = true;                                                                                        // 12117
					// selectable SELECTING callback                                                                                  // 12118
					that._trigger("selecting", event, {                                                                               // 12119
						selecting: selectee.element                                                                                      // 12120
					});                                                                                                               // 12121
				}                                                                                                                  // 12122
			} else {                                                                                                            // 12123
				// UNSELECT                                                                                                        // 12124
				if (selectee.selecting) {                                                                                          // 12125
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {                                                 // 12126
						selectee.$element.removeClass("ui-selecting");                                                                   // 12127
						selectee.selecting = false;                                                                                      // 12128
						selectee.$element.addClass("ui-selected");                                                                       // 12129
						selectee.selected = true;                                                                                        // 12130
					} else {                                                                                                          // 12131
						selectee.$element.removeClass("ui-selecting");                                                                   // 12132
						selectee.selecting = false;                                                                                      // 12133
						if (selectee.startselected) {                                                                                    // 12134
							selectee.$element.addClass("ui-unselecting");                                                                   // 12135
							selectee.unselecting = true;                                                                                    // 12136
						}                                                                                                                // 12137
						// selectable UNSELECTING callback                                                                               // 12138
						that._trigger("unselecting", event, {                                                                            // 12139
							unselecting: selectee.element                                                                                   // 12140
						});                                                                                                              // 12141
					}                                                                                                                 // 12142
				}                                                                                                                  // 12143
				if (selectee.selected) {                                                                                           // 12144
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {                                                // 12145
						selectee.$element.removeClass("ui-selected");                                                                    // 12146
						selectee.selected = false;                                                                                       // 12147
                                                                                                                       // 12148
						selectee.$element.addClass("ui-unselecting");                                                                    // 12149
						selectee.unselecting = true;                                                                                     // 12150
						// selectable UNSELECTING callback                                                                               // 12151
						that._trigger("unselecting", event, {                                                                            // 12152
							unselecting: selectee.element                                                                                   // 12153
						});                                                                                                              // 12154
					}                                                                                                                 // 12155
				}                                                                                                                  // 12156
			}                                                                                                                   // 12157
		});                                                                                                                  // 12158
                                                                                                                       // 12159
		return false;                                                                                                        // 12160
	},                                                                                                                    // 12161
                                                                                                                       // 12162
	_mouseStop: function(event) {                                                                                         // 12163
		var that = this;                                                                                                     // 12164
                                                                                                                       // 12165
		this.dragged = false;                                                                                                // 12166
                                                                                                                       // 12167
		$(".ui-unselecting", this.element[0]).each(function() {                                                              // 12168
			var selectee = $.data(this, "selectable-item");                                                                     // 12169
			selectee.$element.removeClass("ui-unselecting");                                                                    // 12170
			selectee.unselecting = false;                                                                                       // 12171
			selectee.startselected = false;                                                                                     // 12172
			that._trigger("unselected", event, {                                                                                // 12173
				unselected: selectee.element                                                                                       // 12174
			});                                                                                                                 // 12175
		});                                                                                                                  // 12176
		$(".ui-selecting", this.element[0]).each(function() {                                                                // 12177
			var selectee = $.data(this, "selectable-item");                                                                     // 12178
			selectee.$element.removeClass("ui-selecting").addClass("ui-selected");                                              // 12179
			selectee.selecting = false;                                                                                         // 12180
			selectee.selected = true;                                                                                           // 12181
			selectee.startselected = true;                                                                                      // 12182
			that._trigger("selected", event, {                                                                                  // 12183
				selected: selectee.element                                                                                         // 12184
			});                                                                                                                 // 12185
		});                                                                                                                  // 12186
		this._trigger("stop", event);                                                                                        // 12187
                                                                                                                       // 12188
		this.helper.remove();                                                                                                // 12189
                                                                                                                       // 12190
		return false;                                                                                                        // 12191
	}                                                                                                                     // 12192
                                                                                                                       // 12193
});                                                                                                                    // 12194
                                                                                                                       // 12195
                                                                                                                       // 12196
/*!                                                                                                                    // 12197
 * jQuery UI Selectmenu 1.11.2                                                                                         // 12198
 * http://jqueryui.com                                                                                                 // 12199
 *                                                                                                                     // 12200
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 12201
 * Released under the MIT license.                                                                                     // 12202
 * http://jquery.org/license                                                                                           // 12203
 *                                                                                                                     // 12204
 * http://api.jqueryui.com/selectmenu                                                                                  // 12205
 */                                                                                                                    // 12206
                                                                                                                       // 12207
                                                                                                                       // 12208
var selectmenu = $.widget( "ui.selectmenu", {                                                                          // 12209
	version: "1.11.2",                                                                                                    // 12210
	defaultElement: "<select>",                                                                                           // 12211
	options: {                                                                                                            // 12212
		appendTo: null,                                                                                                      // 12213
		disabled: null,                                                                                                      // 12214
		icons: {                                                                                                             // 12215
			button: "ui-icon-triangle-1-s"                                                                                      // 12216
		},                                                                                                                   // 12217
		position: {                                                                                                          // 12218
			my: "left top",                                                                                                     // 12219
			at: "left bottom",                                                                                                  // 12220
			collision: "none"                                                                                                   // 12221
		},                                                                                                                   // 12222
		width: null,                                                                                                         // 12223
                                                                                                                       // 12224
		// callbacks                                                                                                         // 12225
		change: null,                                                                                                        // 12226
		close: null,                                                                                                         // 12227
		focus: null,                                                                                                         // 12228
		open: null,                                                                                                          // 12229
		select: null                                                                                                         // 12230
	},                                                                                                                    // 12231
                                                                                                                       // 12232
	_create: function() {                                                                                                 // 12233
		var selectmenuId = this.element.uniqueId().attr( "id" );                                                             // 12234
		this.ids = {                                                                                                         // 12235
			element: selectmenuId,                                                                                              // 12236
			button: selectmenuId + "-button",                                                                                   // 12237
			menu: selectmenuId + "-menu"                                                                                        // 12238
		};                                                                                                                   // 12239
                                                                                                                       // 12240
		this._drawButton();                                                                                                  // 12241
		this._drawMenu();                                                                                                    // 12242
                                                                                                                       // 12243
		if ( this.options.disabled ) {                                                                                       // 12244
			this.disable();                                                                                                     // 12245
		}                                                                                                                    // 12246
	},                                                                                                                    // 12247
                                                                                                                       // 12248
	_drawButton: function() {                                                                                             // 12249
		var that = this,                                                                                                     // 12250
			tabindex = this.element.attr( "tabindex" );                                                                         // 12251
                                                                                                                       // 12252
		// Associate existing label with the new button                                                                      // 12253
		this.label = $( "label[for='" + this.ids.element + "']" ).attr( "for", this.ids.button );                            // 12254
		this._on( this.label, {                                                                                              // 12255
			click: function( event ) {                                                                                          // 12256
				this.button.focus();                                                                                               // 12257
				event.preventDefault();                                                                                            // 12258
			}                                                                                                                   // 12259
		});                                                                                                                  // 12260
                                                                                                                       // 12261
		// Hide original select element                                                                                      // 12262
		this.element.hide();                                                                                                 // 12263
                                                                                                                       // 12264
		// Create button                                                                                                     // 12265
		this.button = $( "<span>", {                                                                                         // 12266
			"class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",                                           // 12267
			tabindex: tabindex || this.options.disabled ? -1 : 0,                                                               // 12268
			id: this.ids.button,                                                                                                // 12269
			role: "combobox",                                                                                                   // 12270
			"aria-expanded": "false",                                                                                           // 12271
			"aria-autocomplete": "list",                                                                                        // 12272
			"aria-owns": this.ids.menu,                                                                                         // 12273
			"aria-haspopup": "true"                                                                                             // 12274
		})                                                                                                                   // 12275
			.insertAfter( this.element );                                                                                       // 12276
                                                                                                                       // 12277
		$( "<span>", {                                                                                                       // 12278
			"class": "ui-icon " + this.options.icons.button                                                                     // 12279
		})                                                                                                                   // 12280
			.prependTo( this.button );                                                                                          // 12281
                                                                                                                       // 12282
		this.buttonText = $( "<span>", {                                                                                     // 12283
			"class": "ui-selectmenu-text"                                                                                       // 12284
		})                                                                                                                   // 12285
			.appendTo( this.button );                                                                                           // 12286
                                                                                                                       // 12287
		this._setText( this.buttonText, this.element.find( "option:selected" ).text() );                                     // 12288
		this._resizeButton();                                                                                                // 12289
                                                                                                                       // 12290
		this._on( this.button, this._buttonEvents );                                                                         // 12291
		this.button.one( "focusin", function() {                                                                             // 12292
                                                                                                                       // 12293
			// Delay rendering the menu items until the button receives focus.                                                  // 12294
			// The menu may have already been rendered via a programmatic open.                                                 // 12295
			if ( !that.menuItems ) {                                                                                            // 12296
				that._refreshMenu();                                                                                               // 12297
			}                                                                                                                   // 12298
		});                                                                                                                  // 12299
		this._hoverable( this.button );                                                                                      // 12300
		this._focusable( this.button );                                                                                      // 12301
	},                                                                                                                    // 12302
                                                                                                                       // 12303
	_drawMenu: function() {                                                                                               // 12304
		var that = this;                                                                                                     // 12305
                                                                                                                       // 12306
		// Create menu                                                                                                       // 12307
		this.menu = $( "<ul>", {                                                                                             // 12308
			"aria-hidden": "true",                                                                                              // 12309
			"aria-labelledby": this.ids.button,                                                                                 // 12310
			id: this.ids.menu                                                                                                   // 12311
		});                                                                                                                  // 12312
                                                                                                                       // 12313
		// Wrap menu                                                                                                         // 12314
		this.menuWrap = $( "<div>", {                                                                                        // 12315
			"class": "ui-selectmenu-menu ui-front"                                                                              // 12316
		})                                                                                                                   // 12317
			.append( this.menu )                                                                                                // 12318
			.appendTo( this._appendTo() );                                                                                      // 12319
                                                                                                                       // 12320
		// Initialize menu widget                                                                                            // 12321
		this.menuInstance = this.menu                                                                                        // 12322
			.menu({                                                                                                             // 12323
				role: "listbox",                                                                                                   // 12324
				select: function( event, ui ) {                                                                                    // 12325
					event.preventDefault();                                                                                           // 12326
                                                                                                                       // 12327
					// support: IE8                                                                                                   // 12328
					// If the item was selected via a click, the text selection                                                       // 12329
					// will be destroyed in IE                                                                                        // 12330
					that._setSelection();                                                                                             // 12331
                                                                                                                       // 12332
					that._select( ui.item.data( "ui-selectmenu-item" ), event );                                                      // 12333
				},                                                                                                                 // 12334
				focus: function( event, ui ) {                                                                                     // 12335
					var item = ui.item.data( "ui-selectmenu-item" );                                                                  // 12336
                                                                                                                       // 12337
					// Prevent inital focus from firing and check if its a newly focused item                                         // 12338
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {                                                // 12339
						that._trigger( "focus", event, { item: item } );                                                                 // 12340
						if ( !that.isOpen ) {                                                                                            // 12341
							that._select( item, event );                                                                                    // 12342
						}                                                                                                                // 12343
					}                                                                                                                 // 12344
					that.focusIndex = item.index;                                                                                     // 12345
                                                                                                                       // 12346
					that.button.attr( "aria-activedescendant",                                                                        // 12347
						that.menuItems.eq( item.index ).attr( "id" ) );                                                                  // 12348
				}                                                                                                                  // 12349
			})                                                                                                                  // 12350
			.menu( "instance" );                                                                                                // 12351
                                                                                                                       // 12352
		// Adjust menu styles to dropdown                                                                                    // 12353
		this.menu                                                                                                            // 12354
			.addClass( "ui-corner-bottom" )                                                                                     // 12355
			.removeClass( "ui-corner-all" );                                                                                    // 12356
                                                                                                                       // 12357
		// Don't close the menu on mouseleave                                                                                // 12358
		this.menuInstance._off( this.menu, "mouseleave" );                                                                   // 12359
                                                                                                                       // 12360
		// Cancel the menu's collapseAll on document click                                                                   // 12361
		this.menuInstance._closeOnDocumentClick = function() {                                                               // 12362
			return false;                                                                                                       // 12363
		};                                                                                                                   // 12364
                                                                                                                       // 12365
		// Selects often contain empty items, but never contain dividers                                                     // 12366
		this.menuInstance._isDivider = function() {                                                                          // 12367
			return false;                                                                                                       // 12368
		};                                                                                                                   // 12369
	},                                                                                                                    // 12370
                                                                                                                       // 12371
	refresh: function() {                                                                                                 // 12372
		this._refreshMenu();                                                                                                 // 12373
		this._setText( this.buttonText, this._getSelectedItem().text() );                                                    // 12374
		if ( !this.options.width ) {                                                                                         // 12375
			this._resizeButton();                                                                                               // 12376
		}                                                                                                                    // 12377
	},                                                                                                                    // 12378
                                                                                                                       // 12379
	_refreshMenu: function() {                                                                                            // 12380
		this.menu.empty();                                                                                                   // 12381
                                                                                                                       // 12382
		var item,                                                                                                            // 12383
			options = this.element.find( "option" );                                                                            // 12384
                                                                                                                       // 12385
		if ( !options.length ) {                                                                                             // 12386
			return;                                                                                                             // 12387
		}                                                                                                                    // 12388
                                                                                                                       // 12389
		this._parseOptions( options );                                                                                       // 12390
		this._renderMenu( this.menu, this.items );                                                                           // 12391
                                                                                                                       // 12392
		this.menuInstance.refresh();                                                                                         // 12393
		this.menuItems = this.menu.find( "li" ).not( ".ui-selectmenu-optgroup" );                                            // 12394
                                                                                                                       // 12395
		item = this._getSelectedItem();                                                                                      // 12396
                                                                                                                       // 12397
		// Update the menu to have the correct item focused                                                                  // 12398
		this.menuInstance.focus( null, item );                                                                               // 12399
		this._setAria( item.data( "ui-selectmenu-item" ) );                                                                  // 12400
                                                                                                                       // 12401
		// Set disabled state                                                                                                // 12402
		this._setOption( "disabled", this.element.prop( "disabled" ) );                                                      // 12403
	},                                                                                                                    // 12404
                                                                                                                       // 12405
	open: function( event ) {                                                                                             // 12406
		if ( this.options.disabled ) {                                                                                       // 12407
			return;                                                                                                             // 12408
		}                                                                                                                    // 12409
                                                                                                                       // 12410
		// If this is the first time the menu is being opened, render the items                                              // 12411
		if ( !this.menuItems ) {                                                                                             // 12412
			this._refreshMenu();                                                                                                // 12413
		} else {                                                                                                             // 12414
                                                                                                                       // 12415
			// Menu clears focus on close, reset focus to selected item                                                         // 12416
			this.menu.find( ".ui-state-focus" ).removeClass( "ui-state-focus" );                                                // 12417
			this.menuInstance.focus( null, this._getSelectedItem() );                                                           // 12418
		}                                                                                                                    // 12419
                                                                                                                       // 12420
		this.isOpen = true;                                                                                                  // 12421
		this._toggleAttr();                                                                                                  // 12422
		this._resizeMenu();                                                                                                  // 12423
		this._position();                                                                                                    // 12424
                                                                                                                       // 12425
		this._on( this.document, this._documentClick );                                                                      // 12426
                                                                                                                       // 12427
		this._trigger( "open", event );                                                                                      // 12428
	},                                                                                                                    // 12429
                                                                                                                       // 12430
	_position: function() {                                                                                               // 12431
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );                                    // 12432
	},                                                                                                                    // 12433
                                                                                                                       // 12434
	close: function( event ) {                                                                                            // 12435
		if ( !this.isOpen ) {                                                                                                // 12436
			return;                                                                                                             // 12437
		}                                                                                                                    // 12438
                                                                                                                       // 12439
		this.isOpen = false;                                                                                                 // 12440
		this._toggleAttr();                                                                                                  // 12441
                                                                                                                       // 12442
		this.range = null;                                                                                                   // 12443
		this._off( this.document );                                                                                          // 12444
                                                                                                                       // 12445
		this._trigger( "close", event );                                                                                     // 12446
	},                                                                                                                    // 12447
                                                                                                                       // 12448
	widget: function() {                                                                                                  // 12449
		return this.button;                                                                                                  // 12450
	},                                                                                                                    // 12451
                                                                                                                       // 12452
	menuWidget: function() {                                                                                              // 12453
		return this.menu;                                                                                                    // 12454
	},                                                                                                                    // 12455
                                                                                                                       // 12456
	_renderMenu: function( ul, items ) {                                                                                  // 12457
		var that = this,                                                                                                     // 12458
			currentOptgroup = "";                                                                                               // 12459
                                                                                                                       // 12460
		$.each( items, function( index, item ) {                                                                             // 12461
			if ( item.optgroup !== currentOptgroup ) {                                                                          // 12462
				$( "<li>", {                                                                                                       // 12463
					"class": "ui-selectmenu-optgroup ui-menu-divider" +                                                               // 12464
						( item.element.parent( "optgroup" ).prop( "disabled" ) ?                                                         // 12465
							" ui-state-disabled" :                                                                                          // 12466
							"" ),                                                                                                           // 12467
					text: item.optgroup                                                                                               // 12468
				})                                                                                                                 // 12469
					.appendTo( ul );                                                                                                  // 12470
                                                                                                                       // 12471
				currentOptgroup = item.optgroup;                                                                                   // 12472
			}                                                                                                                   // 12473
                                                                                                                       // 12474
			that._renderItemData( ul, item );                                                                                   // 12475
		});                                                                                                                  // 12476
	},                                                                                                                    // 12477
                                                                                                                       // 12478
	_renderItemData: function( ul, item ) {                                                                               // 12479
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );                                              // 12480
	},                                                                                                                    // 12481
                                                                                                                       // 12482
	_renderItem: function( ul, item ) {                                                                                   // 12483
		var li = $( "<li>" );                                                                                                // 12484
                                                                                                                       // 12485
		if ( item.disabled ) {                                                                                               // 12486
			li.addClass( "ui-state-disabled" );                                                                                 // 12487
		}                                                                                                                    // 12488
		this._setText( li, item.label );                                                                                     // 12489
                                                                                                                       // 12490
		return li.appendTo( ul );                                                                                            // 12491
	},                                                                                                                    // 12492
                                                                                                                       // 12493
	_setText: function( element, value ) {                                                                                // 12494
		if ( value ) {                                                                                                       // 12495
			element.text( value );                                                                                              // 12496
		} else {                                                                                                             // 12497
			element.html( "&#160;" );                                                                                           // 12498
		}                                                                                                                    // 12499
	},                                                                                                                    // 12500
                                                                                                                       // 12501
	_move: function( direction, event ) {                                                                                 // 12502
		var item, next,                                                                                                      // 12503
			filter = ".ui-menu-item";                                                                                           // 12504
                                                                                                                       // 12505
		if ( this.isOpen ) {                                                                                                 // 12506
			item = this.menuItems.eq( this.focusIndex );                                                                        // 12507
		} else {                                                                                                             // 12508
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex );                                                        // 12509
			filter += ":not(.ui-state-disabled)";                                                                               // 12510
		}                                                                                                                    // 12511
                                                                                                                       // 12512
		if ( direction === "first" || direction === "last" ) {                                                               // 12513
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );                                    // 12514
		} else {                                                                                                             // 12515
			next = item[ direction + "All" ]( filter ).eq( 0 );                                                                 // 12516
		}                                                                                                                    // 12517
                                                                                                                       // 12518
		if ( next.length ) {                                                                                                 // 12519
			this.menuInstance.focus( event, next );                                                                             // 12520
		}                                                                                                                    // 12521
	},                                                                                                                    // 12522
                                                                                                                       // 12523
	_getSelectedItem: function() {                                                                                        // 12524
		return this.menuItems.eq( this.element[ 0 ].selectedIndex );                                                         // 12525
	},                                                                                                                    // 12526
                                                                                                                       // 12527
	_toggle: function( event ) {                                                                                          // 12528
		this[ this.isOpen ? "close" : "open" ]( event );                                                                     // 12529
	},                                                                                                                    // 12530
                                                                                                                       // 12531
	_setSelection: function() {                                                                                           // 12532
		var selection;                                                                                                       // 12533
                                                                                                                       // 12534
		if ( !this.range ) {                                                                                                 // 12535
			return;                                                                                                             // 12536
		}                                                                                                                    // 12537
                                                                                                                       // 12538
		if ( window.getSelection ) {                                                                                         // 12539
			selection = window.getSelection();                                                                                  // 12540
			selection.removeAllRanges();                                                                                        // 12541
			selection.addRange( this.range );                                                                                   // 12542
                                                                                                                       // 12543
		// support: IE8                                                                                                      // 12544
		} else {                                                                                                             // 12545
			this.range.select();                                                                                                // 12546
		}                                                                                                                    // 12547
                                                                                                                       // 12548
		// support: IE                                                                                                       // 12549
		// Setting the text selection kills the button focus in IE, but                                                      // 12550
		// restoring the focus doesn't kill the selection.                                                                   // 12551
		this.button.focus();                                                                                                 // 12552
	},                                                                                                                    // 12553
                                                                                                                       // 12554
	_documentClick: {                                                                                                     // 12555
		mousedown: function( event ) {                                                                                       // 12556
			if ( !this.isOpen ) {                                                                                               // 12557
				return;                                                                                                            // 12558
			}                                                                                                                   // 12559
                                                                                                                       // 12560
			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" + this.ids.button ).length ) {                            // 12561
				this.close( event );                                                                                               // 12562
			}                                                                                                                   // 12563
		}                                                                                                                    // 12564
	},                                                                                                                    // 12565
                                                                                                                       // 12566
	_buttonEvents: {                                                                                                      // 12567
                                                                                                                       // 12568
		// Prevent text selection from being reset when interacting with the selectmenu (#10144)                             // 12569
		mousedown: function() {                                                                                              // 12570
			var selection;                                                                                                      // 12571
                                                                                                                       // 12572
			if ( window.getSelection ) {                                                                                        // 12573
				selection = window.getSelection();                                                                                 // 12574
				if ( selection.rangeCount ) {                                                                                      // 12575
					this.range = selection.getRangeAt( 0 );                                                                           // 12576
				}                                                                                                                  // 12577
                                                                                                                       // 12578
			// support: IE8                                                                                                     // 12579
			} else {                                                                                                            // 12580
				this.range = document.selection.createRange();                                                                     // 12581
			}                                                                                                                   // 12582
		},                                                                                                                   // 12583
                                                                                                                       // 12584
		click: function( event ) {                                                                                           // 12585
			this._setSelection();                                                                                               // 12586
			this._toggle( event );                                                                                              // 12587
		},                                                                                                                   // 12588
                                                                                                                       // 12589
		keydown: function( event ) {                                                                                         // 12590
			var preventDefault = true;                                                                                          // 12591
			switch ( event.keyCode ) {                                                                                          // 12592
				case $.ui.keyCode.TAB:                                                                                             // 12593
				case $.ui.keyCode.ESCAPE:                                                                                          // 12594
					this.close( event );                                                                                              // 12595
					preventDefault = false;                                                                                           // 12596
					break;                                                                                                            // 12597
				case $.ui.keyCode.ENTER:                                                                                           // 12598
					if ( this.isOpen ) {                                                                                              // 12599
						this._selectFocusedItem( event );                                                                                // 12600
					}                                                                                                                 // 12601
					break;                                                                                                            // 12602
				case $.ui.keyCode.UP:                                                                                              // 12603
					if ( event.altKey ) {                                                                                             // 12604
						this._toggle( event );                                                                                           // 12605
					} else {                                                                                                          // 12606
						this._move( "prev", event );                                                                                     // 12607
					}                                                                                                                 // 12608
					break;                                                                                                            // 12609
				case $.ui.keyCode.DOWN:                                                                                            // 12610
					if ( event.altKey ) {                                                                                             // 12611
						this._toggle( event );                                                                                           // 12612
					} else {                                                                                                          // 12613
						this._move( "next", event );                                                                                     // 12614
					}                                                                                                                 // 12615
					break;                                                                                                            // 12616
				case $.ui.keyCode.SPACE:                                                                                           // 12617
					if ( this.isOpen ) {                                                                                              // 12618
						this._selectFocusedItem( event );                                                                                // 12619
					} else {                                                                                                          // 12620
						this._toggle( event );                                                                                           // 12621
					}                                                                                                                 // 12622
					break;                                                                                                            // 12623
				case $.ui.keyCode.LEFT:                                                                                            // 12624
					this._move( "prev", event );                                                                                      // 12625
					break;                                                                                                            // 12626
				case $.ui.keyCode.RIGHT:                                                                                           // 12627
					this._move( "next", event );                                                                                      // 12628
					break;                                                                                                            // 12629
				case $.ui.keyCode.HOME:                                                                                            // 12630
				case $.ui.keyCode.PAGE_UP:                                                                                         // 12631
					this._move( "first", event );                                                                                     // 12632
					break;                                                                                                            // 12633
				case $.ui.keyCode.END:                                                                                             // 12634
				case $.ui.keyCode.PAGE_DOWN:                                                                                       // 12635
					this._move( "last", event );                                                                                      // 12636
					break;                                                                                                            // 12637
				default:                                                                                                           // 12638
					this.menu.trigger( event );                                                                                       // 12639
					preventDefault = false;                                                                                           // 12640
			}                                                                                                                   // 12641
                                                                                                                       // 12642
			if ( preventDefault ) {                                                                                             // 12643
				event.preventDefault();                                                                                            // 12644
			}                                                                                                                   // 12645
		}                                                                                                                    // 12646
	},                                                                                                                    // 12647
                                                                                                                       // 12648
	_selectFocusedItem: function( event ) {                                                                               // 12649
		var item = this.menuItems.eq( this.focusIndex );                                                                     // 12650
		if ( !item.hasClass( "ui-state-disabled" ) ) {                                                                       // 12651
			this._select( item.data( "ui-selectmenu-item" ), event );                                                           // 12652
		}                                                                                                                    // 12653
	},                                                                                                                    // 12654
                                                                                                                       // 12655
	_select: function( item, event ) {                                                                                    // 12656
		var oldIndex = this.element[ 0 ].selectedIndex;                                                                      // 12657
                                                                                                                       // 12658
		// Change native select element                                                                                      // 12659
		this.element[ 0 ].selectedIndex = item.index;                                                                        // 12660
		this._setText( this.buttonText, item.label );                                                                        // 12661
		this._setAria( item );                                                                                               // 12662
		this._trigger( "select", event, { item: item } );                                                                    // 12663
                                                                                                                       // 12664
		if ( item.index !== oldIndex ) {                                                                                     // 12665
			this._trigger( "change", event, { item: item } );                                                                   // 12666
		}                                                                                                                    // 12667
                                                                                                                       // 12668
		this.close( event );                                                                                                 // 12669
	},                                                                                                                    // 12670
                                                                                                                       // 12671
	_setAria: function( item ) {                                                                                          // 12672
		var id = this.menuItems.eq( item.index ).attr( "id" );                                                               // 12673
                                                                                                                       // 12674
		this.button.attr({                                                                                                   // 12675
			"aria-labelledby": id,                                                                                              // 12676
			"aria-activedescendant": id                                                                                         // 12677
		});                                                                                                                  // 12678
		this.menu.attr( "aria-activedescendant", id );                                                                       // 12679
	},                                                                                                                    // 12680
                                                                                                                       // 12681
	_setOption: function( key, value ) {                                                                                  // 12682
		if ( key === "icons" ) {                                                                                             // 12683
			this.button.find( "span.ui-icon" )                                                                                  // 12684
				.removeClass( this.options.icons.button )                                                                          // 12685
				.addClass( value.button );                                                                                         // 12686
		}                                                                                                                    // 12687
                                                                                                                       // 12688
		this._super( key, value );                                                                                           // 12689
                                                                                                                       // 12690
		if ( key === "appendTo" ) {                                                                                          // 12691
			this.menuWrap.appendTo( this._appendTo() );                                                                         // 12692
		}                                                                                                                    // 12693
                                                                                                                       // 12694
		if ( key === "disabled" ) {                                                                                          // 12695
			this.menuInstance.option( "disabled", value );                                                                      // 12696
			this.button                                                                                                         // 12697
				.toggleClass( "ui-state-disabled", value )                                                                         // 12698
				.attr( "aria-disabled", value );                                                                                   // 12699
                                                                                                                       // 12700
			this.element.prop( "disabled", value );                                                                             // 12701
			if ( value ) {                                                                                                      // 12702
				this.button.attr( "tabindex", -1 );                                                                                // 12703
				this.close();                                                                                                      // 12704
			} else {                                                                                                            // 12705
				this.button.attr( "tabindex", 0 );                                                                                 // 12706
			}                                                                                                                   // 12707
		}                                                                                                                    // 12708
                                                                                                                       // 12709
		if ( key === "width" ) {                                                                                             // 12710
			this._resizeButton();                                                                                               // 12711
		}                                                                                                                    // 12712
	},                                                                                                                    // 12713
                                                                                                                       // 12714
	_appendTo: function() {                                                                                               // 12715
		var element = this.options.appendTo;                                                                                 // 12716
                                                                                                                       // 12717
		if ( element ) {                                                                                                     // 12718
			element = element.jquery || element.nodeType ?                                                                      // 12719
				$( element ) :                                                                                                     // 12720
				this.document.find( element ).eq( 0 );                                                                             // 12721
		}                                                                                                                    // 12722
                                                                                                                       // 12723
		if ( !element || !element[ 0 ] ) {                                                                                   // 12724
			element = this.element.closest( ".ui-front" );                                                                      // 12725
		}                                                                                                                    // 12726
                                                                                                                       // 12727
		if ( !element.length ) {                                                                                             // 12728
			element = this.document[ 0 ].body;                                                                                  // 12729
		}                                                                                                                    // 12730
                                                                                                                       // 12731
		return element;                                                                                                      // 12732
	},                                                                                                                    // 12733
                                                                                                                       // 12734
	_toggleAttr: function() {                                                                                             // 12735
		this.button                                                                                                          // 12736
			.toggleClass( "ui-corner-top", this.isOpen )                                                                        // 12737
			.toggleClass( "ui-corner-all", !this.isOpen )                                                                       // 12738
			.attr( "aria-expanded", this.isOpen );                                                                              // 12739
		this.menuWrap.toggleClass( "ui-selectmenu-open", this.isOpen );                                                      // 12740
		this.menu.attr( "aria-hidden", !this.isOpen );                                                                       // 12741
	},                                                                                                                    // 12742
                                                                                                                       // 12743
	_resizeButton: function() {                                                                                           // 12744
		var width = this.options.width;                                                                                      // 12745
                                                                                                                       // 12746
		if ( !width ) {                                                                                                      // 12747
			width = this.element.show().outerWidth();                                                                           // 12748
			this.element.hide();                                                                                                // 12749
		}                                                                                                                    // 12750
                                                                                                                       // 12751
		this.button.outerWidth( width );                                                                                     // 12752
	},                                                                                                                    // 12753
                                                                                                                       // 12754
	_resizeMenu: function() {                                                                                             // 12755
		this.menu.outerWidth( Math.max(                                                                                      // 12756
			this.button.outerWidth(),                                                                                           // 12757
                                                                                                                       // 12758
			// support: IE10                                                                                                    // 12759
			// IE10 wraps long text (possibly a rounding bug)                                                                   // 12760
			// so we add 1px to avoid the wrapping                                                                              // 12761
			this.menu.width( "" ).outerWidth() + 1                                                                              // 12762
		) );                                                                                                                 // 12763
	},                                                                                                                    // 12764
                                                                                                                       // 12765
	_getCreateOptions: function() {                                                                                       // 12766
		return { disabled: this.element.prop( "disabled" ) };                                                                // 12767
	},                                                                                                                    // 12768
                                                                                                                       // 12769
	_parseOptions: function( options ) {                                                                                  // 12770
		var data = [];                                                                                                       // 12771
		options.each(function( index, item ) {                                                                               // 12772
			var option = $( item ),                                                                                             // 12773
				optgroup = option.parent( "optgroup" );                                                                            // 12774
			data.push({                                                                                                         // 12775
				element: option,                                                                                                   // 12776
				index: index,                                                                                                      // 12777
				value: option.attr( "value" ),                                                                                     // 12778
				label: option.text(),                                                                                              // 12779
				optgroup: optgroup.attr( "label" ) || "",                                                                          // 12780
				disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )                                                 // 12781
			});                                                                                                                 // 12782
		});                                                                                                                  // 12783
		this.items = data;                                                                                                   // 12784
	},                                                                                                                    // 12785
                                                                                                                       // 12786
	_destroy: function() {                                                                                                // 12787
		this.menuWrap.remove();                                                                                              // 12788
		this.button.remove();                                                                                                // 12789
		this.element.show();                                                                                                 // 12790
		this.element.removeUniqueId();                                                                                       // 12791
		this.label.attr( "for", this.ids.element );                                                                          // 12792
	}                                                                                                                     // 12793
});                                                                                                                    // 12794
                                                                                                                       // 12795
                                                                                                                       // 12796
/*!                                                                                                                    // 12797
 * jQuery UI Slider 1.11.2                                                                                             // 12798
 * http://jqueryui.com                                                                                                 // 12799
 *                                                                                                                     // 12800
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 12801
 * Released under the MIT license.                                                                                     // 12802
 * http://jquery.org/license                                                                                           // 12803
 *                                                                                                                     // 12804
 * http://api.jqueryui.com/slider/                                                                                     // 12805
 */                                                                                                                    // 12806
                                                                                                                       // 12807
                                                                                                                       // 12808
var slider = $.widget( "ui.slider", $.ui.mouse, {                                                                      // 12809
	version: "1.11.2",                                                                                                    // 12810
	widgetEventPrefix: "slide",                                                                                           // 12811
                                                                                                                       // 12812
	options: {                                                                                                            // 12813
		animate: false,                                                                                                      // 12814
		distance: 0,                                                                                                         // 12815
		max: 100,                                                                                                            // 12816
		min: 0,                                                                                                              // 12817
		orientation: "horizontal",                                                                                           // 12818
		range: false,                                                                                                        // 12819
		step: 1,                                                                                                             // 12820
		value: 0,                                                                                                            // 12821
		values: null,                                                                                                        // 12822
                                                                                                                       // 12823
		// callbacks                                                                                                         // 12824
		change: null,                                                                                                        // 12825
		slide: null,                                                                                                         // 12826
		start: null,                                                                                                         // 12827
		stop: null                                                                                                           // 12828
	},                                                                                                                    // 12829
                                                                                                                       // 12830
	// number of pages in a slider                                                                                        // 12831
	// (how many times can you page up/down to go through the whole range)                                                // 12832
	numPages: 5,                                                                                                          // 12833
                                                                                                                       // 12834
	_create: function() {                                                                                                 // 12835
		this._keySliding = false;                                                                                            // 12836
		this._mouseSliding = false;                                                                                          // 12837
		this._animateOff = true;                                                                                             // 12838
		this._handleIndex = null;                                                                                            // 12839
		this._detectOrientation();                                                                                           // 12840
		this._mouseInit();                                                                                                   // 12841
		this._calculateNewMax();                                                                                             // 12842
                                                                                                                       // 12843
		this.element                                                                                                         // 12844
			.addClass( "ui-slider" +                                                                                            // 12845
				" ui-slider-" + this.orientation +                                                                                 // 12846
				" ui-widget" +                                                                                                     // 12847
				" ui-widget-content" +                                                                                             // 12848
				" ui-corner-all");                                                                                                 // 12849
                                                                                                                       // 12850
		this._refresh();                                                                                                     // 12851
		this._setOption( "disabled", this.options.disabled );                                                                // 12852
                                                                                                                       // 12853
		this._animateOff = false;                                                                                            // 12854
	},                                                                                                                    // 12855
                                                                                                                       // 12856
	_refresh: function() {                                                                                                // 12857
		this._createRange();                                                                                                 // 12858
		this._createHandles();                                                                                               // 12859
		this._setupEvents();                                                                                                 // 12860
		this._refreshValue();                                                                                                // 12861
	},                                                                                                                    // 12862
                                                                                                                       // 12863
	_createHandles: function() {                                                                                          // 12864
		var i, handleCount,                                                                                                  // 12865
			options = this.options,                                                                                             // 12866
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),            // 12867
			handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>",                      // 12868
			handles = [];                                                                                                       // 12869
                                                                                                                       // 12870
		handleCount = ( options.values && options.values.length ) || 1;                                                      // 12871
                                                                                                                       // 12872
		if ( existingHandles.length > handleCount ) {                                                                        // 12873
			existingHandles.slice( handleCount ).remove();                                                                      // 12874
			existingHandles = existingHandles.slice( 0, handleCount );                                                          // 12875
		}                                                                                                                    // 12876
                                                                                                                       // 12877
		for ( i = existingHandles.length; i < handleCount; i++ ) {                                                           // 12878
			handles.push( handle );                                                                                             // 12879
		}                                                                                                                    // 12880
                                                                                                                       // 12881
		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );                              // 12882
                                                                                                                       // 12883
		this.handle = this.handles.eq( 0 );                                                                                  // 12884
                                                                                                                       // 12885
		this.handles.each(function( i ) {                                                                                    // 12886
			$( this ).data( "ui-slider-handle-index", i );                                                                      // 12887
		});                                                                                                                  // 12888
	},                                                                                                                    // 12889
                                                                                                                       // 12890
	_createRange: function() {                                                                                            // 12891
		var options = this.options,                                                                                          // 12892
			classes = "";                                                                                                       // 12893
                                                                                                                       // 12894
		if ( options.range ) {                                                                                               // 12895
			if ( options.range === true ) {                                                                                     // 12896
				if ( !options.values ) {                                                                                           // 12897
					options.values = [ this._valueMin(), this._valueMin() ];                                                          // 12898
				} else if ( options.values.length && options.values.length !== 2 ) {                                               // 12899
					options.values = [ options.values[0], options.values[0] ];                                                        // 12900
				} else if ( $.isArray( options.values ) ) {                                                                        // 12901
					options.values = options.values.slice(0);                                                                         // 12902
				}                                                                                                                  // 12903
			}                                                                                                                   // 12904
                                                                                                                       // 12905
			if ( !this.range || !this.range.length ) {                                                                          // 12906
				this.range = $( "<div></div>" )                                                                                    // 12907
					.appendTo( this.element );                                                                                        // 12908
                                                                                                                       // 12909
				classes = "ui-slider-range" +                                                                                      // 12910
				// note: this isn't the most fittingly semantic framework class for this element,                                  // 12911
				// but worked best visually with a variety of themes                                                               // 12912
				" ui-widget-header ui-corner-all";                                                                                 // 12913
			} else {                                                                                                            // 12914
				this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )                                                // 12915
					// Handle range switching from true to min/max                                                                    // 12916
					.css({                                                                                                            // 12917
						"left": "",                                                                                                      // 12918
						"bottom": ""                                                                                                     // 12919
					});                                                                                                               // 12920
			}                                                                                                                   // 12921
                                                                                                                       // 12922
			this.range.addClass( classes +                                                                                      // 12923
				( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );           // 12924
		} else {                                                                                                             // 12925
			if ( this.range ) {                                                                                                 // 12926
				this.range.remove();                                                                                               // 12927
			}                                                                                                                   // 12928
			this.range = null;                                                                                                  // 12929
		}                                                                                                                    // 12930
	},                                                                                                                    // 12931
                                                                                                                       // 12932
	_setupEvents: function() {                                                                                            // 12933
		this._off( this.handles );                                                                                           // 12934
		this._on( this.handles, this._handleEvents );                                                                        // 12935
		this._hoverable( this.handles );                                                                                     // 12936
		this._focusable( this.handles );                                                                                     // 12937
	},                                                                                                                    // 12938
                                                                                                                       // 12939
	_destroy: function() {                                                                                                // 12940
		this.handles.remove();                                                                                               // 12941
		if ( this.range ) {                                                                                                  // 12942
			this.range.remove();                                                                                                // 12943
		}                                                                                                                    // 12944
                                                                                                                       // 12945
		this.element                                                                                                         // 12946
			.removeClass( "ui-slider" +                                                                                         // 12947
				" ui-slider-horizontal" +                                                                                          // 12948
				" ui-slider-vertical" +                                                                                            // 12949
				" ui-widget" +                                                                                                     // 12950
				" ui-widget-content" +                                                                                             // 12951
				" ui-corner-all" );                                                                                                // 12952
                                                                                                                       // 12953
		this._mouseDestroy();                                                                                                // 12954
	},                                                                                                                    // 12955
                                                                                                                       // 12956
	_mouseCapture: function( event ) {                                                                                    // 12957
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,                           // 12958
			that = this,                                                                                                        // 12959
			o = this.options;                                                                                                   // 12960
                                                                                                                       // 12961
		if ( o.disabled ) {                                                                                                  // 12962
			return false;                                                                                                       // 12963
		}                                                                                                                    // 12964
                                                                                                                       // 12965
		this.elementSize = {                                                                                                 // 12966
			width: this.element.outerWidth(),                                                                                   // 12967
			height: this.element.outerHeight()                                                                                  // 12968
		};                                                                                                                   // 12969
		this.elementOffset = this.element.offset();                                                                          // 12970
                                                                                                                       // 12971
		position = { x: event.pageX, y: event.pageY };                                                                       // 12972
		normValue = this._normValueFromMouse( position );                                                                    // 12973
		distance = this._valueMax() - this._valueMin() + 1;                                                                  // 12974
		this.handles.each(function( i ) {                                                                                    // 12975
			var thisDistance = Math.abs( normValue - that.values(i) );                                                          // 12976
			if (( distance > thisDistance ) ||                                                                                  // 12977
				( distance === thisDistance &&                                                                                     // 12978
					(i === that._lastChangedValue || that.values(i) === o.min ))) {                                                   // 12979
				distance = thisDistance;                                                                                           // 12980
				closestHandle = $( this );                                                                                         // 12981
				index = i;                                                                                                         // 12982
			}                                                                                                                   // 12983
		});                                                                                                                  // 12984
                                                                                                                       // 12985
		allowed = this._start( event, index );                                                                               // 12986
		if ( allowed === false ) {                                                                                           // 12987
			return false;                                                                                                       // 12988
		}                                                                                                                    // 12989
		this._mouseSliding = true;                                                                                           // 12990
                                                                                                                       // 12991
		this._handleIndex = index;                                                                                           // 12992
                                                                                                                       // 12993
		closestHandle                                                                                                        // 12994
			.addClass( "ui-state-active" )                                                                                      // 12995
			.focus();                                                                                                           // 12996
                                                                                                                       // 12997
		offset = closestHandle.offset();                                                                                     // 12998
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );                                  // 12999
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {                                                        // 13000
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),                                                    // 13001
			top: event.pageY - offset.top -                                                                                     // 13002
				( closestHandle.height() / 2 ) -                                                                                   // 13003
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -                                                     // 13004
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +                                                   // 13005
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)                                                             // 13006
		};                                                                                                                   // 13007
                                                                                                                       // 13008
		if ( !this.handles.hasClass( "ui-state-hover" ) ) {                                                                  // 13009
			this._slide( event, index, normValue );                                                                             // 13010
		}                                                                                                                    // 13011
		this._animateOff = true;                                                                                             // 13012
		return true;                                                                                                         // 13013
	},                                                                                                                    // 13014
                                                                                                                       // 13015
	_mouseStart: function() {                                                                                             // 13016
		return true;                                                                                                         // 13017
	},                                                                                                                    // 13018
                                                                                                                       // 13019
	_mouseDrag: function( event ) {                                                                                       // 13020
		var position = { x: event.pageX, y: event.pageY },                                                                   // 13021
			normValue = this._normValueFromMouse( position );                                                                   // 13022
                                                                                                                       // 13023
		this._slide( event, this._handleIndex, normValue );                                                                  // 13024
                                                                                                                       // 13025
		return false;                                                                                                        // 13026
	},                                                                                                                    // 13027
                                                                                                                       // 13028
	_mouseStop: function( event ) {                                                                                       // 13029
		this.handles.removeClass( "ui-state-active" );                                                                       // 13030
		this._mouseSliding = false;                                                                                          // 13031
                                                                                                                       // 13032
		this._stop( event, this._handleIndex );                                                                              // 13033
		this._change( event, this._handleIndex );                                                                            // 13034
                                                                                                                       // 13035
		this._handleIndex = null;                                                                                            // 13036
		this._clickOffset = null;                                                                                            // 13037
		this._animateOff = false;                                                                                            // 13038
                                                                                                                       // 13039
		return false;                                                                                                        // 13040
	},                                                                                                                    // 13041
                                                                                                                       // 13042
	_detectOrientation: function() {                                                                                      // 13043
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";                          // 13044
	},                                                                                                                    // 13045
                                                                                                                       // 13046
	_normValueFromMouse: function( position ) {                                                                           // 13047
		var pixelTotal,                                                                                                      // 13048
			pixelMouse,                                                                                                         // 13049
			percentMouse,                                                                                                       // 13050
			valueTotal,                                                                                                         // 13051
			valueMouse;                                                                                                         // 13052
                                                                                                                       // 13053
		if ( this.orientation === "horizontal" ) {                                                                           // 13054
			pixelTotal = this.elementSize.width;                                                                                // 13055
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );             // 13056
		} else {                                                                                                             // 13057
			pixelTotal = this.elementSize.height;                                                                               // 13058
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );               // 13059
		}                                                                                                                    // 13060
                                                                                                                       // 13061
		percentMouse = ( pixelMouse / pixelTotal );                                                                          // 13062
		if ( percentMouse > 1 ) {                                                                                            // 13063
			percentMouse = 1;                                                                                                   // 13064
		}                                                                                                                    // 13065
		if ( percentMouse < 0 ) {                                                                                            // 13066
			percentMouse = 0;                                                                                                   // 13067
		}                                                                                                                    // 13068
		if ( this.orientation === "vertical" ) {                                                                             // 13069
			percentMouse = 1 - percentMouse;                                                                                    // 13070
		}                                                                                                                    // 13071
                                                                                                                       // 13072
		valueTotal = this._valueMax() - this._valueMin();                                                                    // 13073
		valueMouse = this._valueMin() + percentMouse * valueTotal;                                                           // 13074
                                                                                                                       // 13075
		return this._trimAlignValue( valueMouse );                                                                           // 13076
	},                                                                                                                    // 13077
                                                                                                                       // 13078
	_start: function( event, index ) {                                                                                    // 13079
		var uiHash = {                                                                                                       // 13080
			handle: this.handles[ index ],                                                                                      // 13081
			value: this.value()                                                                                                 // 13082
		};                                                                                                                   // 13083
		if ( this.options.values && this.options.values.length ) {                                                           // 13084
			uiHash.value = this.values( index );                                                                                // 13085
			uiHash.values = this.values();                                                                                      // 13086
		}                                                                                                                    // 13087
		return this._trigger( "start", event, uiHash );                                                                      // 13088
	},                                                                                                                    // 13089
                                                                                                                       // 13090
	_slide: function( event, index, newVal ) {                                                                            // 13091
		var otherVal,                                                                                                        // 13092
			newValues,                                                                                                          // 13093
			allowed;                                                                                                            // 13094
                                                                                                                       // 13095
		if ( this.options.values && this.options.values.length ) {                                                           // 13096
			otherVal = this.values( index ? 0 : 1 );                                                                            // 13097
                                                                                                                       // 13098
			if ( ( this.options.values.length === 2 && this.options.range === true ) &&                                         // 13099
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )                                   // 13100
				) {                                                                                                                // 13101
				newVal = otherVal;                                                                                                 // 13102
			}                                                                                                                   // 13103
                                                                                                                       // 13104
			if ( newVal !== this.values( index ) ) {                                                                            // 13105
				newValues = this.values();                                                                                         // 13106
				newValues[ index ] = newVal;                                                                                       // 13107
				// A slide can be canceled by returning false from the slide callback                                              // 13108
				allowed = this._trigger( "slide", event, {                                                                         // 13109
					handle: this.handles[ index ],                                                                                    // 13110
					value: newVal,                                                                                                    // 13111
					values: newValues                                                                                                 // 13112
				} );                                                                                                               // 13113
				otherVal = this.values( index ? 0 : 1 );                                                                           // 13114
				if ( allowed !== false ) {                                                                                         // 13115
					this.values( index, newVal );                                                                                     // 13116
				}                                                                                                                  // 13117
			}                                                                                                                   // 13118
		} else {                                                                                                             // 13119
			if ( newVal !== this.value() ) {                                                                                    // 13120
				// A slide can be canceled by returning false from the slide callback                                              // 13121
				allowed = this._trigger( "slide", event, {                                                                         // 13122
					handle: this.handles[ index ],                                                                                    // 13123
					value: newVal                                                                                                     // 13124
				} );                                                                                                               // 13125
				if ( allowed !== false ) {                                                                                         // 13126
					this.value( newVal );                                                                                             // 13127
				}                                                                                                                  // 13128
			}                                                                                                                   // 13129
		}                                                                                                                    // 13130
	},                                                                                                                    // 13131
                                                                                                                       // 13132
	_stop: function( event, index ) {                                                                                     // 13133
		var uiHash = {                                                                                                       // 13134
			handle: this.handles[ index ],                                                                                      // 13135
			value: this.value()                                                                                                 // 13136
		};                                                                                                                   // 13137
		if ( this.options.values && this.options.values.length ) {                                                           // 13138
			uiHash.value = this.values( index );                                                                                // 13139
			uiHash.values = this.values();                                                                                      // 13140
		}                                                                                                                    // 13141
                                                                                                                       // 13142
		this._trigger( "stop", event, uiHash );                                                                              // 13143
	},                                                                                                                    // 13144
                                                                                                                       // 13145
	_change: function( event, index ) {                                                                                   // 13146
		if ( !this._keySliding && !this._mouseSliding ) {                                                                    // 13147
			var uiHash = {                                                                                                      // 13148
				handle: this.handles[ index ],                                                                                     // 13149
				value: this.value()                                                                                                // 13150
			};                                                                                                                  // 13151
			if ( this.options.values && this.options.values.length ) {                                                          // 13152
				uiHash.value = this.values( index );                                                                               // 13153
				uiHash.values = this.values();                                                                                     // 13154
			}                                                                                                                   // 13155
                                                                                                                       // 13156
			//store the last changed value index for reference when handles overlap                                             // 13157
			this._lastChangedValue = index;                                                                                     // 13158
                                                                                                                       // 13159
			this._trigger( "change", event, uiHash );                                                                           // 13160
		}                                                                                                                    // 13161
	},                                                                                                                    // 13162
                                                                                                                       // 13163
	value: function( newValue ) {                                                                                         // 13164
		if ( arguments.length ) {                                                                                            // 13165
			this.options.value = this._trimAlignValue( newValue );                                                              // 13166
			this._refreshValue();                                                                                               // 13167
			this._change( null, 0 );                                                                                            // 13168
			return;                                                                                                             // 13169
		}                                                                                                                    // 13170
                                                                                                                       // 13171
		return this._value();                                                                                                // 13172
	},                                                                                                                    // 13173
                                                                                                                       // 13174
	values: function( index, newValue ) {                                                                                 // 13175
		var vals,                                                                                                            // 13176
			newValues,                                                                                                          // 13177
			i;                                                                                                                  // 13178
                                                                                                                       // 13179
		if ( arguments.length > 1 ) {                                                                                        // 13180
			this.options.values[ index ] = this._trimAlignValue( newValue );                                                    // 13181
			this._refreshValue();                                                                                               // 13182
			this._change( null, index );                                                                                        // 13183
			return;                                                                                                             // 13184
		}                                                                                                                    // 13185
                                                                                                                       // 13186
		if ( arguments.length ) {                                                                                            // 13187
			if ( $.isArray( arguments[ 0 ] ) ) {                                                                                // 13188
				vals = this.options.values;                                                                                        // 13189
				newValues = arguments[ 0 ];                                                                                        // 13190
				for ( i = 0; i < vals.length; i += 1 ) {                                                                           // 13191
					vals[ i ] = this._trimAlignValue( newValues[ i ] );                                                               // 13192
					this._change( null, i );                                                                                          // 13193
				}                                                                                                                  // 13194
				this._refreshValue();                                                                                              // 13195
			} else {                                                                                                            // 13196
				if ( this.options.values && this.options.values.length ) {                                                         // 13197
					return this._values( index );                                                                                     // 13198
				} else {                                                                                                           // 13199
					return this.value();                                                                                              // 13200
				}                                                                                                                  // 13201
			}                                                                                                                   // 13202
		} else {                                                                                                             // 13203
			return this._values();                                                                                              // 13204
		}                                                                                                                    // 13205
	},                                                                                                                    // 13206
                                                                                                                       // 13207
	_setOption: function( key, value ) {                                                                                  // 13208
		var i,                                                                                                               // 13209
			valsLength = 0;                                                                                                     // 13210
                                                                                                                       // 13211
		if ( key === "range" && this.options.range === true ) {                                                              // 13212
			if ( value === "min" ) {                                                                                            // 13213
				this.options.value = this._values( 0 );                                                                            // 13214
				this.options.values = null;                                                                                        // 13215
			} else if ( value === "max" ) {                                                                                     // 13216
				this.options.value = this._values( this.options.values.length - 1 );                                               // 13217
				this.options.values = null;                                                                                        // 13218
			}                                                                                                                   // 13219
		}                                                                                                                    // 13220
                                                                                                                       // 13221
		if ( $.isArray( this.options.values ) ) {                                                                            // 13222
			valsLength = this.options.values.length;                                                                            // 13223
		}                                                                                                                    // 13224
                                                                                                                       // 13225
		if ( key === "disabled" ) {                                                                                          // 13226
			this.element.toggleClass( "ui-state-disabled", !!value );                                                           // 13227
		}                                                                                                                    // 13228
                                                                                                                       // 13229
		this._super( key, value );                                                                                           // 13230
                                                                                                                       // 13231
		switch ( key ) {                                                                                                     // 13232
			case "orientation":                                                                                                 // 13233
				this._detectOrientation();                                                                                         // 13234
				this.element                                                                                                       // 13235
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )                                                         // 13236
					.addClass( "ui-slider-" + this.orientation );                                                                     // 13237
				this._refreshValue();                                                                                              // 13238
                                                                                                                       // 13239
				// Reset positioning from previous orientation                                                                     // 13240
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );                                                // 13241
				break;                                                                                                             // 13242
			case "value":                                                                                                       // 13243
				this._animateOff = true;                                                                                           // 13244
				this._refreshValue();                                                                                              // 13245
				this._change( null, 0 );                                                                                           // 13246
				this._animateOff = false;                                                                                          // 13247
				break;                                                                                                             // 13248
			case "values":                                                                                                      // 13249
				this._animateOff = true;                                                                                           // 13250
				this._refreshValue();                                                                                              // 13251
				for ( i = 0; i < valsLength; i += 1 ) {                                                                            // 13252
					this._change( null, i );                                                                                          // 13253
				}                                                                                                                  // 13254
				this._animateOff = false;                                                                                          // 13255
				break;                                                                                                             // 13256
			case "step":                                                                                                        // 13257
			case "min":                                                                                                         // 13258
			case "max":                                                                                                         // 13259
				this._animateOff = true;                                                                                           // 13260
				this._calculateNewMax();                                                                                           // 13261
				this._refreshValue();                                                                                              // 13262
				this._animateOff = false;                                                                                          // 13263
				break;                                                                                                             // 13264
			case "range":                                                                                                       // 13265
				this._animateOff = true;                                                                                           // 13266
				this._refresh();                                                                                                   // 13267
				this._animateOff = false;                                                                                          // 13268
				break;                                                                                                             // 13269
		}                                                                                                                    // 13270
	},                                                                                                                    // 13271
                                                                                                                       // 13272
	//internal value getter                                                                                               // 13273
	// _value() returns value trimmed by min and max, aligned by step                                                     // 13274
	_value: function() {                                                                                                  // 13275
		var val = this.options.value;                                                                                        // 13276
		val = this._trimAlignValue( val );                                                                                   // 13277
                                                                                                                       // 13278
		return val;                                                                                                          // 13279
	},                                                                                                                    // 13280
                                                                                                                       // 13281
	//internal values getter                                                                                              // 13282
	// _values() returns array of values trimmed by min and max, aligned by step                                          // 13283
	// _values( index ) returns single value trimmed by min and max, aligned by step                                      // 13284
	_values: function( index ) {                                                                                          // 13285
		var val,                                                                                                             // 13286
			vals,                                                                                                               // 13287
			i;                                                                                                                  // 13288
                                                                                                                       // 13289
		if ( arguments.length ) {                                                                                            // 13290
			val = this.options.values[ index ];                                                                                 // 13291
			val = this._trimAlignValue( val );                                                                                  // 13292
                                                                                                                       // 13293
			return val;                                                                                                         // 13294
		} else if ( this.options.values && this.options.values.length ) {                                                    // 13295
			// .slice() creates a copy of the array                                                                             // 13296
			// this copy gets trimmed by min and max and then returned                                                          // 13297
			vals = this.options.values.slice();                                                                                 // 13298
			for ( i = 0; i < vals.length; i += 1) {                                                                             // 13299
				vals[ i ] = this._trimAlignValue( vals[ i ] );                                                                     // 13300
			}                                                                                                                   // 13301
                                                                                                                       // 13302
			return vals;                                                                                                        // 13303
		} else {                                                                                                             // 13304
			return [];                                                                                                          // 13305
		}                                                                                                                    // 13306
	},                                                                                                                    // 13307
                                                                                                                       // 13308
	// returns the step-aligned value that val is closest to, between (inclusive) min and max                             // 13309
	_trimAlignValue: function( val ) {                                                                                    // 13310
		if ( val <= this._valueMin() ) {                                                                                     // 13311
			return this._valueMin();                                                                                            // 13312
		}                                                                                                                    // 13313
		if ( val >= this._valueMax() ) {                                                                                     // 13314
			return this._valueMax();                                                                                            // 13315
		}                                                                                                                    // 13316
		var step = ( this.options.step > 0 ) ? this.options.step : 1,                                                        // 13317
			valModStep = (val - this._valueMin()) % step,                                                                       // 13318
			alignValue = val - valModStep;                                                                                      // 13319
                                                                                                                       // 13320
		if ( Math.abs(valModStep) * 2 >= step ) {                                                                            // 13321
			alignValue += ( valModStep > 0 ) ? step : ( -step );                                                                // 13322
		}                                                                                                                    // 13323
                                                                                                                       // 13324
		// Since JavaScript has problems with large floats, round                                                            // 13325
		// the final value to 5 digits after the decimal point (see #4124)                                                   // 13326
		return parseFloat( alignValue.toFixed(5) );                                                                          // 13327
	},                                                                                                                    // 13328
                                                                                                                       // 13329
	_calculateNewMax: function() {                                                                                        // 13330
		var remainder = ( this.options.max - this._valueMin() ) % this.options.step;                                         // 13331
		this.max = this.options.max - remainder;                                                                             // 13332
	},                                                                                                                    // 13333
                                                                                                                       // 13334
	_valueMin: function() {                                                                                               // 13335
		return this.options.min;                                                                                             // 13336
	},                                                                                                                    // 13337
                                                                                                                       // 13338
	_valueMax: function() {                                                                                               // 13339
		return this.max;                                                                                                     // 13340
	},                                                                                                                    // 13341
                                                                                                                       // 13342
	_refreshValue: function() {                                                                                           // 13343
		var lastValPercent, valPercent, value, valueMin, valueMax,                                                           // 13344
			oRange = this.options.range,                                                                                        // 13345
			o = this.options,                                                                                                   // 13346
			that = this,                                                                                                        // 13347
			animate = ( !this._animateOff ) ? o.animate : false,                                                                // 13348
			_set = {};                                                                                                          // 13349
                                                                                                                       // 13350
		if ( this.options.values && this.options.values.length ) {                                                           // 13351
			this.handles.each(function( i ) {                                                                                   // 13352
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;                // 13353
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";                                  // 13354
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );                                          // 13355
				if ( that.options.range === true ) {                                                                               // 13356
					if ( that.orientation === "horizontal" ) {                                                                        // 13357
						if ( i === 0 ) {                                                                                                 // 13358
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );                // 13359
						}                                                                                                                // 13360
						if ( i === 1 ) {                                                                                                 // 13361
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}                                                                                                                // 13363
					} else {                                                                                                          // 13364
						if ( i === 0 ) {                                                                                                 // 13365
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );          // 13366
						}                                                                                                                // 13367
						if ( i === 1 ) {                                                                                                 // 13368
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}                                                                                                                // 13370
					}                                                                                                                 // 13371
				}                                                                                                                  // 13372
				lastValPercent = valPercent;                                                                                       // 13373
			});                                                                                                                 // 13374
		} else {                                                                                                             // 13375
			value = this.value();                                                                                               // 13376
			valueMin = this._valueMin();                                                                                        // 13377
			valueMax = this._valueMax();                                                                                        // 13378
			valPercent = ( valueMax !== valueMin ) ?                                                                            // 13379
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :                                                            // 13380
					0;                                                                                                                // 13381
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";                                   // 13382
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );                                         // 13383
                                                                                                                       // 13384
			if ( oRange === "min" && this.orientation === "horizontal" ) {                                                      // 13385
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );                  // 13386
			}                                                                                                                   // 13387
			if ( oRange === "max" && this.orientation === "horizontal" ) {                                                      // 13388
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}                                                                                                                   // 13390
			if ( oRange === "min" && this.orientation === "vertical" ) {                                                        // 13391
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );                 // 13392
			}                                                                                                                   // 13393
			if ( oRange === "max" && this.orientation === "vertical" ) {                                                        // 13394
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}                                                                                                                   // 13396
		}                                                                                                                    // 13397
	},                                                                                                                    // 13398
                                                                                                                       // 13399
	_handleEvents: {                                                                                                      // 13400
		keydown: function( event ) {                                                                                         // 13401
			var allowed, curVal, newVal, step,                                                                                  // 13402
				index = $( event.target ).data( "ui-slider-handle-index" );                                                        // 13403
                                                                                                                       // 13404
			switch ( event.keyCode ) {                                                                                          // 13405
				case $.ui.keyCode.HOME:                                                                                            // 13406
				case $.ui.keyCode.END:                                                                                             // 13407
				case $.ui.keyCode.PAGE_UP:                                                                                         // 13408
				case $.ui.keyCode.PAGE_DOWN:                                                                                       // 13409
				case $.ui.keyCode.UP:                                                                                              // 13410
				case $.ui.keyCode.RIGHT:                                                                                           // 13411
				case $.ui.keyCode.DOWN:                                                                                            // 13412
				case $.ui.keyCode.LEFT:                                                                                            // 13413
					event.preventDefault();                                                                                           // 13414
					if ( !this._keySliding ) {                                                                                        // 13415
						this._keySliding = true;                                                                                         // 13416
						$( event.target ).addClass( "ui-state-active" );                                                                 // 13417
						allowed = this._start( event, index );                                                                           // 13418
						if ( allowed === false ) {                                                                                       // 13419
							return;                                                                                                         // 13420
						}                                                                                                                // 13421
					}                                                                                                                 // 13422
					break;                                                                                                            // 13423
			}                                                                                                                   // 13424
                                                                                                                       // 13425
			step = this.options.step;                                                                                           // 13426
			if ( this.options.values && this.options.values.length ) {                                                          // 13427
				curVal = newVal = this.values( index );                                                                            // 13428
			} else {                                                                                                            // 13429
				curVal = newVal = this.value();                                                                                    // 13430
			}                                                                                                                   // 13431
                                                                                                                       // 13432
			switch ( event.keyCode ) {                                                                                          // 13433
				case $.ui.keyCode.HOME:                                                                                            // 13434
					newVal = this._valueMin();                                                                                        // 13435
					break;                                                                                                            // 13436
				case $.ui.keyCode.END:                                                                                             // 13437
					newVal = this._valueMax();                                                                                        // 13438
					break;                                                                                                            // 13439
				case $.ui.keyCode.PAGE_UP:                                                                                         // 13440
					newVal = this._trimAlignValue(                                                                                    // 13441
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )                                             // 13442
					);                                                                                                                // 13443
					break;                                                                                                            // 13444
				case $.ui.keyCode.PAGE_DOWN:                                                                                       // 13445
					newVal = this._trimAlignValue(                                                                                    // 13446
						curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );                                            // 13447
					break;                                                                                                            // 13448
				case $.ui.keyCode.UP:                                                                                              // 13449
				case $.ui.keyCode.RIGHT:                                                                                           // 13450
					if ( curVal === this._valueMax() ) {                                                                              // 13451
						return;                                                                                                          // 13452
					}                                                                                                                 // 13453
					newVal = this._trimAlignValue( curVal + step );                                                                   // 13454
					break;                                                                                                            // 13455
				case $.ui.keyCode.DOWN:                                                                                            // 13456
				case $.ui.keyCode.LEFT:                                                                                            // 13457
					if ( curVal === this._valueMin() ) {                                                                              // 13458
						return;                                                                                                          // 13459
					}                                                                                                                 // 13460
					newVal = this._trimAlignValue( curVal - step );                                                                   // 13461
					break;                                                                                                            // 13462
			}                                                                                                                   // 13463
                                                                                                                       // 13464
			this._slide( event, index, newVal );                                                                                // 13465
		},                                                                                                                   // 13466
		keyup: function( event ) {                                                                                           // 13467
			var index = $( event.target ).data( "ui-slider-handle-index" );                                                     // 13468
                                                                                                                       // 13469
			if ( this._keySliding ) {                                                                                           // 13470
				this._keySliding = false;                                                                                          // 13471
				this._stop( event, index );                                                                                        // 13472
				this._change( event, index );                                                                                      // 13473
				$( event.target ).removeClass( "ui-state-active" );                                                                // 13474
			}                                                                                                                   // 13475
		}                                                                                                                    // 13476
	}                                                                                                                     // 13477
});                                                                                                                    // 13478
                                                                                                                       // 13479
                                                                                                                       // 13480
/*!                                                                                                                    // 13481
 * jQuery UI Sortable 1.11.2                                                                                           // 13482
 * http://jqueryui.com                                                                                                 // 13483
 *                                                                                                                     // 13484
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 13485
 * Released under the MIT license.                                                                                     // 13486
 * http://jquery.org/license                                                                                           // 13487
 *                                                                                                                     // 13488
 * http://api.jqueryui.com/sortable/                                                                                   // 13489
 */                                                                                                                    // 13490
                                                                                                                       // 13491
                                                                                                                       // 13492
var sortable = $.widget("ui.sortable", $.ui.mouse, {                                                                   // 13493
	version: "1.11.2",                                                                                                    // 13494
	widgetEventPrefix: "sort",                                                                                            // 13495
	ready: false,                                                                                                         // 13496
	options: {                                                                                                            // 13497
		appendTo: "parent",                                                                                                  // 13498
		axis: false,                                                                                                         // 13499
		connectWith: false,                                                                                                  // 13500
		containment: false,                                                                                                  // 13501
		cursor: "auto",                                                                                                      // 13502
		cursorAt: false,                                                                                                     // 13503
		dropOnEmpty: true,                                                                                                   // 13504
		forcePlaceholderSize: false,                                                                                         // 13505
		forceHelperSize: false,                                                                                              // 13506
		grid: false,                                                                                                         // 13507
		handle: false,                                                                                                       // 13508
		helper: "original",                                                                                                  // 13509
		items: "> *",                                                                                                        // 13510
		opacity: false,                                                                                                      // 13511
		placeholder: false,                                                                                                  // 13512
		revert: false,                                                                                                       // 13513
		scroll: true,                                                                                                        // 13514
		scrollSensitivity: 20,                                                                                               // 13515
		scrollSpeed: 20,                                                                                                     // 13516
		scope: "default",                                                                                                    // 13517
		tolerance: "intersect",                                                                                              // 13518
		zIndex: 1000,                                                                                                        // 13519
                                                                                                                       // 13520
		// callbacks                                                                                                         // 13521
		activate: null,                                                                                                      // 13522
		beforeStop: null,                                                                                                    // 13523
		change: null,                                                                                                        // 13524
		deactivate: null,                                                                                                    // 13525
		out: null,                                                                                                           // 13526
		over: null,                                                                                                          // 13527
		receive: null,                                                                                                       // 13528
		remove: null,                                                                                                        // 13529
		sort: null,                                                                                                          // 13530
		start: null,                                                                                                         // 13531
		stop: null,                                                                                                          // 13532
		update: null                                                                                                         // 13533
	},                                                                                                                    // 13534
                                                                                                                       // 13535
	_isOverAxis: function( x, reference, size ) {                                                                         // 13536
		return ( x >= reference ) && ( x < ( reference + size ) );                                                           // 13537
	},                                                                                                                    // 13538
                                                                                                                       // 13539
	_isFloating: function( item ) {                                                                                       // 13540
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));                    // 13541
	},                                                                                                                    // 13542
                                                                                                                       // 13543
	_create: function() {                                                                                                 // 13544
                                                                                                                       // 13545
		var o = this.options;                                                                                                // 13546
		this.containerCache = {};                                                                                            // 13547
		this.element.addClass("ui-sortable");                                                                                // 13548
                                                                                                                       // 13549
		//Get the items                                                                                                      // 13550
		this.refresh();                                                                                                      // 13551
                                                                                                                       // 13552
		//Let's determine if the items are being displayed horizontally                                                      // 13553
		this.floating = this.items.length ? o.axis === "x" || this._isFloating(this.items[0].item) : false;                  // 13554
                                                                                                                       // 13555
		//Let's determine the parent's offset                                                                                // 13556
		this.offset = this.element.offset();                                                                                 // 13557
                                                                                                                       // 13558
		//Initialize mouse events for interaction                                                                            // 13559
		this._mouseInit();                                                                                                   // 13560
                                                                                                                       // 13561
		this._setHandleClassName();                                                                                          // 13562
                                                                                                                       // 13563
		//We're ready to go                                                                                                  // 13564
		this.ready = true;                                                                                                   // 13565
                                                                                                                       // 13566
	},                                                                                                                    // 13567
                                                                                                                       // 13568
	_setOption: function( key, value ) {                                                                                  // 13569
		this._super( key, value );                                                                                           // 13570
                                                                                                                       // 13571
		if ( key === "handle" ) {                                                                                            // 13572
			this._setHandleClassName();                                                                                         // 13573
		}                                                                                                                    // 13574
	},                                                                                                                    // 13575
                                                                                                                       // 13576
	_setHandleClassName: function() {                                                                                     // 13577
		this.element.find( ".ui-sortable-handle" ).removeClass( "ui-sortable-handle" );                                      // 13578
		$.each( this.items, function() {                                                                                     // 13579
			( this.instance.options.handle ?                                                                                    // 13580
				this.item.find( this.instance.options.handle ) : this.item )                                                       // 13581
				.addClass( "ui-sortable-handle" );                                                                                 // 13582
		});                                                                                                                  // 13583
	},                                                                                                                    // 13584
                                                                                                                       // 13585
	_destroy: function() {                                                                                                // 13586
		this.element                                                                                                         // 13587
			.removeClass( "ui-sortable ui-sortable-disabled" )                                                                  // 13588
			.find( ".ui-sortable-handle" )                                                                                      // 13589
				.removeClass( "ui-sortable-handle" );                                                                              // 13590
		this._mouseDestroy();                                                                                                // 13591
                                                                                                                       // 13592
		for ( var i = this.items.length - 1; i >= 0; i-- ) {                                                                 // 13593
			this.items[i].item.removeData(this.widgetName + "-item");                                                           // 13594
		}                                                                                                                    // 13595
                                                                                                                       // 13596
		return this;                                                                                                         // 13597
	},                                                                                                                    // 13598
                                                                                                                       // 13599
	_mouseCapture: function(event, overrideHandle) {                                                                      // 13600
		var currentItem = null,                                                                                              // 13601
			validHandle = false,                                                                                                // 13602
			that = this;                                                                                                        // 13603
                                                                                                                       // 13604
		if (this.reverting) {                                                                                                // 13605
			return false;                                                                                                       // 13606
		}                                                                                                                    // 13607
                                                                                                                       // 13608
		if(this.options.disabled || this.options.type === "static") {                                                        // 13609
			return false;                                                                                                       // 13610
		}                                                                                                                    // 13611
                                                                                                                       // 13612
		//We have to refresh the items data once first                                                                       // 13613
		this._refreshItems(event);                                                                                           // 13614
                                                                                                                       // 13615
		//Find out if the clicked node (or one of its parents) is a actual item in this.items                                // 13616
		$(event.target).parents().each(function() {                                                                          // 13617
			if($.data(this, that.widgetName + "-item") === that) {                                                              // 13618
				currentItem = $(this);                                                                                             // 13619
				return false;                                                                                                      // 13620
			}                                                                                                                   // 13621
		});                                                                                                                  // 13622
		if($.data(event.target, that.widgetName + "-item") === that) {                                                       // 13623
			currentItem = $(event.target);                                                                                      // 13624
		}                                                                                                                    // 13625
                                                                                                                       // 13626
		if(!currentItem) {                                                                                                   // 13627
			return false;                                                                                                       // 13628
		}                                                                                                                    // 13629
		if(this.options.handle && !overrideHandle) {                                                                         // 13630
			$(this.options.handle, currentItem).find("*").addBack().each(function() {                                           // 13631
				if(this === event.target) {                                                                                        // 13632
					validHandle = true;                                                                                               // 13633
				}                                                                                                                  // 13634
			});                                                                                                                 // 13635
			if(!validHandle) {                                                                                                  // 13636
				return false;                                                                                                      // 13637
			}                                                                                                                   // 13638
		}                                                                                                                    // 13639
                                                                                                                       // 13640
		this.currentItem = currentItem;                                                                                      // 13641
		this._removeCurrentsFromItems();                                                                                     // 13642
		return true;                                                                                                         // 13643
                                                                                                                       // 13644
	},                                                                                                                    // 13645
                                                                                                                       // 13646
	_mouseStart: function(event, overrideHandle, noActivation) {                                                          // 13647
                                                                                                                       // 13648
		var i, body,                                                                                                         // 13649
			o = this.options;                                                                                                   // 13650
                                                                                                                       // 13651
		this.currentContainer = this;                                                                                        // 13652
                                                                                                                       // 13653
		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture                // 13654
		this.refreshPositions();                                                                                             // 13655
                                                                                                                       // 13656
		//Create and append the visible helper                                                                               // 13657
		this.helper = this._createHelper(event);                                                                             // 13658
                                                                                                                       // 13659
		//Cache the helper size                                                                                              // 13660
		this._cacheHelperProportions();                                                                                      // 13661
                                                                                                                       // 13662
		/*                                                                                                                   // 13663
		 * - Position generation -                                                                                           // 13664
		 * This block generates everything position related - it's the core of draggables.                                   // 13665
		 */                                                                                                                  // 13666
                                                                                                                       // 13667
		//Cache the margins of the original element                                                                          // 13668
		this._cacheMargins();                                                                                                // 13669
                                                                                                                       // 13670
		//Get the next scrolling parent                                                                                      // 13671
		this.scrollParent = this.helper.scrollParent();                                                                      // 13672
                                                                                                                       // 13673
		//The element's absolute position on the page minus margins                                                          // 13674
		this.offset = this.currentItem.offset();                                                                             // 13675
		this.offset = {                                                                                                      // 13676
			top: this.offset.top - this.margins.top,                                                                            // 13677
			left: this.offset.left - this.margins.left                                                                          // 13678
		};                                                                                                                   // 13679
                                                                                                                       // 13680
		$.extend(this.offset, {                                                                                              // 13681
			click: { //Where the click happened, relative to the element                                                        // 13682
				left: event.pageX - this.offset.left,                                                                              // 13683
				top: event.pageY - this.offset.top                                                                                 // 13684
			},                                                                                                                  // 13685
			parent: this._getParentOffset(),                                                                                    // 13686
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});                                                                                                                  // 13688
                                                                                                                       // 13689
		// Only after we got the offset, we can change the helper's position to absolute                                     // 13690
		// TODO: Still need to figure out a way to make relative sorting possible                                            // 13691
		this.helper.css("position", "absolute");                                                                             // 13692
		this.cssPosition = this.helper.css("position");                                                                      // 13693
                                                                                                                       // 13694
		//Generate the original position                                                                                     // 13695
		this.originalPosition = this._generatePosition(event);                                                               // 13696
		this.originalPageX = event.pageX;                                                                                    // 13697
		this.originalPageY = event.pageY;                                                                                    // 13698
                                                                                                                       // 13699
		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied                                           // 13700
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));                                                            // 13701
                                                                                                                       // 13702
		//Cache the former DOM position                                                                                      // 13703
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };                       // 13704
                                                                                                                       // 13705
		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {                                                                         // 13707
			this.currentItem.hide();                                                                                            // 13708
		}                                                                                                                    // 13709
                                                                                                                       // 13710
		//Create the placeholder                                                                                             // 13711
		this._createPlaceholder();                                                                                           // 13712
                                                                                                                       // 13713
		//Set a containment if given in the options                                                                          // 13714
		if(o.containment) {                                                                                                  // 13715
			this._setContainment();                                                                                             // 13716
		}                                                                                                                    // 13717
                                                                                                                       // 13718
		if( o.cursor && o.cursor !== "auto" ) { // cursor option                                                             // 13719
			body = this.document.find( "body" );                                                                                // 13720
                                                                                                                       // 13721
			// support: IE                                                                                                      // 13722
			this.storedCursor = body.css( "cursor" );                                                                           // 13723
			body.css( "cursor", o.cursor );                                                                                     // 13724
                                                                                                                       // 13725
			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );               // 13726
		}                                                                                                                    // 13727
                                                                                                                       // 13728
		if(o.opacity) { // opacity option                                                                                    // 13729
			if (this.helper.css("opacity")) {                                                                                   // 13730
				this._storedOpacity = this.helper.css("opacity");                                                                  // 13731
			}                                                                                                                   // 13732
			this.helper.css("opacity", o.opacity);                                                                              // 13733
		}                                                                                                                    // 13734
                                                                                                                       // 13735
		if(o.zIndex) { // zIndex option                                                                                      // 13736
			if (this.helper.css("zIndex")) {                                                                                    // 13737
				this._storedZIndex = this.helper.css("zIndex");                                                                    // 13738
			}                                                                                                                   // 13739
			this.helper.css("zIndex", o.zIndex);                                                                                // 13740
		}                                                                                                                    // 13741
                                                                                                                       // 13742
		//Prepare scrolling                                                                                                  // 13743
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {                                   // 13744
			this.overflowOffset = this.scrollParent.offset();                                                                   // 13745
		}                                                                                                                    // 13746
                                                                                                                       // 13747
		//Call callbacks                                                                                                     // 13748
		this._trigger("start", event, this._uiHash());                                                                       // 13749
                                                                                                                       // 13750
		//Recache the helper size                                                                                            // 13751
		if(!this._preserveHelperProportions) {                                                                               // 13752
			this._cacheHelperProportions();                                                                                     // 13753
		}                                                                                                                    // 13754
                                                                                                                       // 13755
                                                                                                                       // 13756
		//Post "activate" events to possible containers                                                                      // 13757
		if( !noActivation ) {                                                                                                // 13758
			for ( i = this.containers.length - 1; i >= 0; i-- ) {                                                               // 13759
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );                                          // 13760
			}                                                                                                                   // 13761
		}                                                                                                                    // 13762
                                                                                                                       // 13763
		//Prepare possible droppables                                                                                        // 13764
		if($.ui.ddmanager) {                                                                                                 // 13765
			$.ui.ddmanager.current = this;                                                                                      // 13766
		}                                                                                                                    // 13767
                                                                                                                       // 13768
		if ($.ui.ddmanager && !o.dropBehaviour) {                                                                            // 13769
			$.ui.ddmanager.prepareOffsets(this, event);                                                                         // 13770
		}                                                                                                                    // 13771
                                                                                                                       // 13772
		this.dragging = true;                                                                                                // 13773
                                                                                                                       // 13774
		this.helper.addClass("ui-sortable-helper");                                                                          // 13775
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;                                                                                                         // 13777
                                                                                                                       // 13778
	},                                                                                                                    // 13779
                                                                                                                       // 13780
	_mouseDrag: function(event) {                                                                                         // 13781
		var i, item, itemElement, intersection,                                                                              // 13782
			o = this.options,                                                                                                   // 13783
			scrolled = false;                                                                                                   // 13784
                                                                                                                       // 13785
		//Compute the helpers position                                                                                       // 13786
		this.position = this._generatePosition(event);                                                                       // 13787
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 13788
                                                                                                                       // 13789
		if (!this.lastPositionAbs) {                                                                                         // 13790
			this.lastPositionAbs = this.positionAbs;                                                                            // 13791
		}                                                                                                                    // 13792
                                                                                                                       // 13793
		//Do scrolling                                                                                                       // 13794
		if(this.options.scroll) {                                                                                            // 13795
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {                                  // 13796
                                                                                                                       // 13797
				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {            // 13798
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;                       // 13799
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {                                           // 13800
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;                       // 13801
				}                                                                                                                  // 13802
                                                                                                                       // 13803
				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {            // 13804
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;                     // 13805
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {                                          // 13806
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;                     // 13807
				}                                                                                                                  // 13808
                                                                                                                       // 13809
			} else {                                                                                                            // 13810
                                                                                                                       // 13811
				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {                                                  // 13812
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);                                        // 13813
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {                    // 13814
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);                                        // 13815
				}                                                                                                                  // 13816
                                                                                                                       // 13817
				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {                                                 // 13818
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);                                      // 13819
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {                    // 13820
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);                                      // 13821
				}                                                                                                                  // 13822
                                                                                                                       // 13823
			}                                                                                                                   // 13824
                                                                                                                       // 13825
			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {                                                      // 13826
				$.ui.ddmanager.prepareOffsets(this, event);                                                                        // 13827
			}                                                                                                                   // 13828
		}                                                                                                                    // 13829
                                                                                                                       // 13830
		//Regenerate the absolute position used for position checks                                                          // 13831
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 13832
                                                                                                                       // 13833
		//Set the helper position                                                                                            // 13834
		if(!this.options.axis || this.options.axis !== "y") {                                                                // 13835
			this.helper[0].style.left = this.position.left+"px";                                                                // 13836
		}                                                                                                                    // 13837
		if(!this.options.axis || this.options.axis !== "x") {                                                                // 13838
			this.helper[0].style.top = this.position.top+"px";                                                                  // 13839
		}                                                                                                                    // 13840
                                                                                                                       // 13841
		//Rearrange                                                                                                          // 13842
		for (i = this.items.length - 1; i >= 0; i--) {                                                                       // 13843
                                                                                                                       // 13844
			//Cache variables and intersection, continue if no intersection                                                     // 13845
			item = this.items[i];                                                                                               // 13846
			itemElement = item.item[0];                                                                                         // 13847
			intersection = this._intersectsWithPointer(item);                                                                   // 13848
			if (!intersection) {                                                                                                // 13849
				continue;                                                                                                          // 13850
			}                                                                                                                   // 13851
                                                                                                                       // 13852
			// Only put the placeholder inside the current Container, skip all                                                  // 13853
			// items from other containers. This works because when moving                                                      // 13854
			// an item from one container to another the                                                                        // 13855
			// currentContainer is switched before the placeholder is moved.                                                    // 13856
			//                                                                                                                  // 13857
			// Without this, moving items in "sub-sortables" can cause                                                          // 13858
			// the placeholder to jitter between the outer and inner container.                                                 // 13859
			if (item.instance !== this.currentContainer) {                                                                      // 13860
				continue;                                                                                                          // 13861
			}                                                                                                                   // 13862
                                                                                                                       // 13863
			// cannot intersect with itself                                                                                     // 13864
			// no useless actions that have been done before                                                                    // 13865
			// no action if the item moved is the parent of the item checked                                                    // 13866
			if (itemElement !== this.currentItem[0] &&                                                                          // 13867
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&                                     // 13868
				!$.contains(this.placeholder[0], itemElement) &&                                                                   // 13869
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)                          // 13870
			) {                                                                                                                 // 13871
                                                                                                                       // 13872
				this.direction = intersection === 1 ? "down" : "up";                                                               // 13873
                                                                                                                       // 13874
				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {                                     // 13875
					this._rearrange(event, item);                                                                                     // 13876
				} else {                                                                                                           // 13877
					break;                                                                                                            // 13878
				}                                                                                                                  // 13879
                                                                                                                       // 13880
				this._trigger("change", event, this._uiHash());                                                                    // 13881
				break;                                                                                                             // 13882
			}                                                                                                                   // 13883
		}                                                                                                                    // 13884
                                                                                                                       // 13885
		//Post events to containers                                                                                          // 13886
		this._contactContainers(event);                                                                                      // 13887
                                                                                                                       // 13888
		//Interconnect with droppables                                                                                       // 13889
		if($.ui.ddmanager) {                                                                                                 // 13890
			$.ui.ddmanager.drag(this, event);                                                                                   // 13891
		}                                                                                                                    // 13892
                                                                                                                       // 13893
		//Call callbacks                                                                                                     // 13894
		this._trigger("sort", event, this._uiHash());                                                                        // 13895
                                                                                                                       // 13896
		this.lastPositionAbs = this.positionAbs;                                                                             // 13897
		return false;                                                                                                        // 13898
                                                                                                                       // 13899
	},                                                                                                                    // 13900
                                                                                                                       // 13901
	_mouseStop: function(event, noPropagation) {                                                                          // 13902
                                                                                                                       // 13903
		if(!event) {                                                                                                         // 13904
			return;                                                                                                             // 13905
		}                                                                                                                    // 13906
                                                                                                                       // 13907
		//If we are using droppables, inform the manager about the drop                                                      // 13908
		if ($.ui.ddmanager && !this.options.dropBehaviour) {                                                                 // 13909
			$.ui.ddmanager.drop(this, event);                                                                                   // 13910
		}                                                                                                                    // 13911
                                                                                                                       // 13912
		if(this.options.revert) {                                                                                            // 13913
			var that = this,                                                                                                    // 13914
				cur = this.placeholder.offset(),                                                                                   // 13915
				axis = this.options.axis,                                                                                          // 13916
				animation = {};                                                                                                    // 13917
                                                                                                                       // 13918
			if ( !axis || axis === "x" ) {                                                                                      // 13919
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}                                                                                                                   // 13921
			if ( !axis || axis === "y" ) {                                                                                      // 13922
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}                                                                                                                   // 13924
			this.reverting = true;                                                                                              // 13925
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {                           // 13926
				that._clear(event);                                                                                                // 13927
			});                                                                                                                 // 13928
		} else {                                                                                                             // 13929
			this._clear(event, noPropagation);                                                                                  // 13930
		}                                                                                                                    // 13931
                                                                                                                       // 13932
		return false;                                                                                                        // 13933
                                                                                                                       // 13934
	},                                                                                                                    // 13935
                                                                                                                       // 13936
	cancel: function() {                                                                                                  // 13937
                                                                                                                       // 13938
		if(this.dragging) {                                                                                                  // 13939
                                                                                                                       // 13940
			this._mouseUp({ target: null });                                                                                    // 13941
                                                                                                                       // 13942
			if(this.options.helper === "original") {                                                                            // 13943
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");                                           // 13944
			} else {                                                                                                            // 13945
				this.currentItem.show();                                                                                           // 13946
			}                                                                                                                   // 13947
                                                                                                                       // 13948
			//Post deactivating events to containers                                                                            // 13949
			for (var i = this.containers.length - 1; i >= 0; i--){                                                              // 13950
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));                                               // 13951
				if(this.containers[i].containerCache.over) {                                                                       // 13952
					this.containers[i]._trigger("out", null, this._uiHash(this));                                                     // 13953
					this.containers[i].containerCache.over = 0;                                                                       // 13954
				}                                                                                                                  // 13955
			}                                                                                                                   // 13956
                                                                                                                       // 13957
		}                                                                                                                    // 13958
                                                                                                                       // 13959
		if (this.placeholder) {                                                                                              // 13960
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {                                                                                // 13962
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);                                                   // 13963
			}                                                                                                                   // 13964
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {                                // 13965
				this.helper.remove();                                                                                              // 13966
			}                                                                                                                   // 13967
                                                                                                                       // 13968
			$.extend(this, {                                                                                                    // 13969
				helper: null,                                                                                                      // 13970
				dragging: false,                                                                                                   // 13971
				reverting: false,                                                                                                  // 13972
				_noFinalSort: null                                                                                                 // 13973
			});                                                                                                                 // 13974
                                                                                                                       // 13975
			if(this.domPosition.prev) {                                                                                         // 13976
				$(this.domPosition.prev).after(this.currentItem);                                                                  // 13977
			} else {                                                                                                            // 13978
				$(this.domPosition.parent).prepend(this.currentItem);                                                              // 13979
			}                                                                                                                   // 13980
		}                                                                                                                    // 13981
                                                                                                                       // 13982
		return this;                                                                                                         // 13983
                                                                                                                       // 13984
	},                                                                                                                    // 13985
                                                                                                                       // 13986
	serialize: function(o) {                                                                                              // 13987
                                                                                                                       // 13988
		var items = this._getItemsAsjQuery(o && o.connected),                                                                // 13989
			str = [];                                                                                                           // 13990
		o = o || {};                                                                                                         // 13991
                                                                                                                       // 13992
		$(items).each(function() {                                                                                           // 13993
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));            // 13994
			if (res) {                                                                                                          // 13995
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));                                    // 13996
			}                                                                                                                   // 13997
		});                                                                                                                  // 13998
                                                                                                                       // 13999
		if(!str.length && o.key) {                                                                                           // 14000
			str.push(o.key + "=");                                                                                              // 14001
		}                                                                                                                    // 14002
                                                                                                                       // 14003
		return str.join("&");                                                                                                // 14004
                                                                                                                       // 14005
	},                                                                                                                    // 14006
                                                                                                                       // 14007
	toArray: function(o) {                                                                                                // 14008
                                                                                                                       // 14009
		var items = this._getItemsAsjQuery(o && o.connected),                                                                // 14010
			ret = [];                                                                                                           // 14011
                                                                                                                       // 14012
		o = o || {};                                                                                                         // 14013
                                                                                                                       // 14014
		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });                             // 14015
		return ret;                                                                                                          // 14016
                                                                                                                       // 14017
	},                                                                                                                    // 14018
                                                                                                                       // 14019
	/* Be careful with the following core functions */                                                                    // 14020
	_intersectsWith: function(item) {                                                                                     // 14021
                                                                                                                       // 14022
		var x1 = this.positionAbs.left,                                                                                      // 14023
			x2 = x1 + this.helperProportions.width,                                                                             // 14024
			y1 = this.positionAbs.top,                                                                                          // 14025
			y2 = y1 + this.helperProportions.height,                                                                            // 14026
			l = item.left,                                                                                                      // 14027
			r = l + item.width,                                                                                                 // 14028
			t = item.top,                                                                                                       // 14029
			b = t + item.height,                                                                                                // 14030
			dyClick = this.offset.click.top,                                                                                    // 14031
			dxClick = this.offset.click.left,                                                                                   // 14032
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),            // 14033
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),             // 14034
			isOverElement = isOverElementHeight && isOverElementWidth;                                                          // 14035
                                                                                                                       // 14036
		if ( this.options.tolerance === "pointer" ||                                                                         // 14037
			this.options.forcePointerForContainers ||                                                                           // 14038
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {                                                                                                                  // 14040
			return isOverElement;                                                                                               // 14041
		} else {                                                                                                             // 14042
                                                                                                                       // 14043
			return (l < x1 + (this.helperProportions.width / 2) && // Right Half                                                // 14044
				x2 - (this.helperProportions.width / 2) < r && // Left Half                                                        // 14045
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half                                                     // 14046
				y2 - (this.helperProportions.height / 2) < b ); // Top Half                                                        // 14047
                                                                                                                       // 14048
		}                                                                                                                    // 14049
	},                                                                                                                    // 14050
                                                                                                                       // 14051
	_intersectsWithPointer: function(item) {                                                                              // 14052
                                                                                                                       // 14053
		var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,                                                          // 14056
			verticalDirection = this._getDragVerticalDirection(),                                                               // 14057
			horizontalDirection = this._getDragHorizontalDirection();                                                           // 14058
                                                                                                                       // 14059
		if (!isOverElement) {                                                                                                // 14060
			return false;                                                                                                       // 14061
		}                                                                                                                    // 14062
                                                                                                                       // 14063
		return this.floating ?                                                                                               // 14064
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )              // 14065
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );                                                  // 14066
                                                                                                                       // 14067
	},                                                                                                                    // 14068
                                                                                                                       // 14069
	_intersectsWithSides: function(item) {                                                                                // 14070
                                                                                                                       // 14071
		var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),                                                               // 14074
			horizontalDirection = this._getDragHorizontalDirection();                                                           // 14075
                                                                                                                       // 14076
		if (this.floating && horizontalDirection) {                                                                          // 14077
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {                                                                                                             // 14079
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}                                                                                                                    // 14081
                                                                                                                       // 14082
	},                                                                                                                    // 14083
                                                                                                                       // 14084
	_getDragVerticalDirection: function() {                                                                               // 14085
		var delta = this.positionAbs.top - this.lastPositionAbs.top;                                                         // 14086
		return delta !== 0 && (delta > 0 ? "down" : "up");                                                                   // 14087
	},                                                                                                                    // 14088
                                                                                                                       // 14089
	_getDragHorizontalDirection: function() {                                                                             // 14090
		var delta = this.positionAbs.left - this.lastPositionAbs.left;                                                       // 14091
		return delta !== 0 && (delta > 0 ? "right" : "left");                                                                // 14092
	},                                                                                                                    // 14093
                                                                                                                       // 14094
	refresh: function(event) {                                                                                            // 14095
		this._refreshItems(event);                                                                                           // 14096
		this._setHandleClassName();                                                                                          // 14097
		this.refreshPositions();                                                                                             // 14098
		return this;                                                                                                         // 14099
	},                                                                                                                    // 14100
                                                                                                                       // 14101
	_connectWith: function() {                                                                                            // 14102
		var options = this.options;                                                                                          // 14103
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;                     // 14104
	},                                                                                                                    // 14105
                                                                                                                       // 14106
	_getItemsAsjQuery: function(connected) {                                                                              // 14107
                                                                                                                       // 14108
		var i, j, cur, inst,                                                                                                 // 14109
			items = [],                                                                                                         // 14110
			queries = [],                                                                                                       // 14111
			connectWith = this._connectWith();                                                                                  // 14112
                                                                                                                       // 14113
		if(connectWith && connected) {                                                                                       // 14114
			for (i = connectWith.length - 1; i >= 0; i--){                                                                      // 14115
				cur = $(connectWith[i]);                                                                                           // 14116
				for ( j = cur.length - 1; j >= 0; j--){                                                                            // 14117
					inst = $.data(cur[j], this.widgetFullName);                                                                       // 14118
					if(inst && inst !== this && !inst.options.disabled) {                                                             // 14119
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
					}                                                                                                                 // 14121
				}                                                                                                                  // 14122
			}                                                                                                                   // 14123
		}                                                                                                                    // 14124
                                                                                                                       // 14125
		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
                                                                                                                       // 14127
		function addItems() {                                                                                                // 14128
			items.push( this );                                                                                                 // 14129
		}                                                                                                                    // 14130
		for (i = queries.length - 1; i >= 0; i--){                                                                           // 14131
			queries[i][0].each( addItems );                                                                                     // 14132
		}                                                                                                                    // 14133
                                                                                                                       // 14134
		return $(items);                                                                                                     // 14135
                                                                                                                       // 14136
	},                                                                                                                    // 14137
                                                                                                                       // 14138
	_removeCurrentsFromItems: function() {                                                                                // 14139
                                                                                                                       // 14140
		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");                                             // 14141
                                                                                                                       // 14142
		this.items = $.grep(this.items, function (item) {                                                                    // 14143
			for (var j=0; j < list.length; j++) {                                                                               // 14144
				if(list[j] === item.item[0]) {                                                                                     // 14145
					return false;                                                                                                     // 14146
				}                                                                                                                  // 14147
			}                                                                                                                   // 14148
			return true;                                                                                                        // 14149
		});                                                                                                                  // 14150
                                                                                                                       // 14151
	},                                                                                                                    // 14152
                                                                                                                       // 14153
	_refreshItems: function(event) {                                                                                      // 14154
                                                                                                                       // 14155
		this.items = [];                                                                                                     // 14156
		this.containers = [this];                                                                                            // 14157
                                                                                                                       // 14158
		var i, j, cur, inst, targetData, _queries, item, queriesLength,                                                      // 14159
			items = this.items,                                                                                                 // 14160
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();                                                                                  // 14162
                                                                                                                       // 14163
		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down                   // 14164
			for (i = connectWith.length - 1; i >= 0; i--){                                                                      // 14165
				cur = $(connectWith[i]);                                                                                           // 14166
				for (j = cur.length - 1; j >= 0; j--){                                                                             // 14167
					inst = $.data(cur[j], this.widgetFullName);                                                                       // 14168
					if(inst && inst !== this && !inst.options.disabled) {                                                             // 14169
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);                                                                                      // 14171
					}                                                                                                                 // 14172
				}                                                                                                                  // 14173
			}                                                                                                                   // 14174
		}                                                                                                                    // 14175
                                                                                                                       // 14176
		for (i = queries.length - 1; i >= 0; i--) {                                                                          // 14177
			targetData = queries[i][1];                                                                                         // 14178
			_queries = queries[i][0];                                                                                           // 14179
                                                                                                                       // 14180
			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {                                                // 14181
				item = $(_queries[j]);                                                                                             // 14182
                                                                                                                       // 14183
				item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)                      // 14184
                                                                                                                       // 14185
				items.push({                                                                                                       // 14186
					item: item,                                                                                                       // 14187
					instance: targetData,                                                                                             // 14188
					width: 0, height: 0,                                                                                              // 14189
					left: 0, top: 0                                                                                                   // 14190
				});                                                                                                                // 14191
			}                                                                                                                   // 14192
		}                                                                                                                    // 14193
                                                                                                                       // 14194
	},                                                                                                                    // 14195
                                                                                                                       // 14196
	refreshPositions: function(fast) {                                                                                    // 14197
                                                                                                                       // 14198
		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {                                                                               // 14200
			this.offset.parent = this._getParentOffset();                                                                       // 14201
		}                                                                                                                    // 14202
                                                                                                                       // 14203
		var i, item, t, p;                                                                                                   // 14204
                                                                                                                       // 14205
		for (i = this.items.length - 1; i >= 0; i--){                                                                        // 14206
			item = this.items[i];                                                                                               // 14207
                                                                                                                       // 14208
			//We ignore calculating positions of all connected containers when we're not over them                              // 14209
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {      // 14210
				continue;                                                                                                          // 14211
			}                                                                                                                   // 14212
                                                                                                                       // 14213
			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;                        // 14214
                                                                                                                       // 14215
			if (!fast) {                                                                                                        // 14216
				item.width = t.outerWidth();                                                                                       // 14217
				item.height = t.outerHeight();                                                                                     // 14218
			}                                                                                                                   // 14219
                                                                                                                       // 14220
			p = t.offset();                                                                                                     // 14221
			item.left = p.left;                                                                                                 // 14222
			item.top = p.top;                                                                                                   // 14223
		}                                                                                                                    // 14224
                                                                                                                       // 14225
		if(this.options.custom && this.options.custom.refreshContainers) {                                                   // 14226
			this.options.custom.refreshContainers.call(this);                                                                   // 14227
		} else {                                                                                                             // 14228
			for (i = this.containers.length - 1; i >= 0; i--){                                                                  // 14229
				p = this.containers[i].element.offset();                                                                           // 14230
				this.containers[i].containerCache.left = p.left;                                                                   // 14231
				this.containers[i].containerCache.top = p.top;                                                                     // 14232
				this.containers[i].containerCache.width = this.containers[i].element.outerWidth();                                 // 14233
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();                               // 14234
			}                                                                                                                   // 14235
		}                                                                                                                    // 14236
                                                                                                                       // 14237
		return this;                                                                                                         // 14238
	},                                                                                                                    // 14239
                                                                                                                       // 14240
	_createPlaceholder: function(that) {                                                                                  // 14241
		that = that || this;                                                                                                 // 14242
		var className,                                                                                                       // 14243
			o = that.options;                                                                                                   // 14244
                                                                                                                       // 14245
		if(!o.placeholder || o.placeholder.constructor === String) {                                                         // 14246
			className = o.placeholder;                                                                                          // 14247
			o.placeholder = {                                                                                                   // 14248
				element: function() {                                                                                              // 14249
                                                                                                                       // 14250
					var nodeName = that.currentItem[0].nodeName.toLowerCase(),                                                        // 14251
						element = $( "<" + nodeName + ">", that.document[0] )                                                            // 14252
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")                                // 14253
							.removeClass("ui-sortable-helper");                                                                             // 14254
                                                                                                                       // 14255
					if ( nodeName === "tr" ) {                                                                                        // 14256
						that.currentItem.children().each(function() {                                                                    // 14257
							$( "<td>&#160;</td>", that.document[0] )                                                                        // 14258
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )                                                           // 14259
								.appendTo( element );                                                                                          // 14260
						});                                                                                                              // 14261
					} else if ( nodeName === "img" ) {                                                                                // 14262
						element.attr( "src", that.currentItem.attr( "src" ) );                                                           // 14263
					}                                                                                                                 // 14264
                                                                                                                       // 14265
					if ( !className ) {                                                                                               // 14266
						element.css( "visibility", "hidden" );                                                                           // 14267
					}                                                                                                                 // 14268
                                                                                                                       // 14269
					return element;                                                                                                   // 14270
				},                                                                                                                 // 14271
				update: function(container, p) {                                                                                   // 14272
                                                                                                                       // 14273
					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that      // 14274
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified               // 14275
					if(className && !o.forcePlaceholderSize) {                                                                        // 14276
						return;                                                                                                          // 14277
					}                                                                                                                 // 14278
                                                                                                                       // 14279
					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}                                                                                                                  // 14283
			};                                                                                                                  // 14284
		}                                                                                                                    // 14285
                                                                                                                       // 14286
		//Create the placeholder                                                                                             // 14287
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));                                    // 14288
                                                                                                                       // 14289
		//Append it after the actual current item                                                                            // 14290
		that.currentItem.after(that.placeholder);                                                                            // 14291
                                                                                                                       // 14292
		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)                                        // 14293
		o.placeholder.update(that, that.placeholder);                                                                        // 14294
                                                                                                                       // 14295
	},                                                                                                                    // 14296
                                                                                                                       // 14297
	_contactContainers: function(event) {                                                                                 // 14298
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,                   // 14299
			innermostContainer = null,                                                                                          // 14300
			innermostIndex = null;                                                                                              // 14301
                                                                                                                       // 14302
		// get innermost container that intersects with item                                                                 // 14303
		for (i = this.containers.length - 1; i >= 0; i--) {                                                                  // 14304
                                                                                                                       // 14305
			// never consider a container that's located within the item itself                                                 // 14306
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {                                                // 14307
				continue;                                                                                                          // 14308
			}                                                                                                                   // 14309
                                                                                                                       // 14310
			if(this._intersectsWith(this.containers[i].containerCache)) {                                                       // 14311
                                                                                                                       // 14312
				// if we've already found a container and it's more "inner" than this, then continue                               // 14313
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {               // 14314
					continue;                                                                                                         // 14315
				}                                                                                                                  // 14316
                                                                                                                       // 14317
				innermostContainer = this.containers[i];                                                                           // 14318
				innermostIndex = i;                                                                                                // 14319
                                                                                                                       // 14320
			} else {                                                                                                            // 14321
				// container doesn't intersect. trigger "out" event if necessary                                                   // 14322
				if(this.containers[i].containerCache.over) {                                                                       // 14323
					this.containers[i]._trigger("out", event, this._uiHash(this));                                                    // 14324
					this.containers[i].containerCache.over = 0;                                                                       // 14325
				}                                                                                                                  // 14326
			}                                                                                                                   // 14327
                                                                                                                       // 14328
		}                                                                                                                    // 14329
                                                                                                                       // 14330
		// if no intersecting containers found, return                                                                       // 14331
		if(!innermostContainer) {                                                                                            // 14332
			return;                                                                                                             // 14333
		}                                                                                                                    // 14334
                                                                                                                       // 14335
		// move the item into the container if it's not there already                                                        // 14336
		if(this.containers.length === 1) {                                                                                   // 14337
			if (!this.containers[innermostIndex].containerCache.over) {                                                         // 14338
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));                                       // 14339
				this.containers[innermostIndex].containerCache.over = 1;                                                           // 14340
			}                                                                                                                   // 14341
		} else {                                                                                                             // 14342
                                                                                                                       // 14343
			//When entering a new container, we will find the item with the least distance and append our item near it          // 14344
			dist = 10000;                                                                                                       // 14345
			itemWithLeastDistance = null;                                                                                       // 14346
			floating = innermostContainer.floating || this._isFloating(this.currentItem);                                       // 14347
			posProperty = floating ? "left" : "top";                                                                            // 14348
			sizeProperty = floating ? "width" : "height";                                                                       // 14349
			axis = floating ? "clientX" : "clientY";                                                                            // 14350
                                                                                                                       // 14351
			for (j = this.items.length - 1; j >= 0; j--) {                                                                      // 14352
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {                               // 14353
					continue;                                                                                                         // 14354
				}                                                                                                                  // 14355
				if(this.items[j].item[0] === this.currentItem[0]) {                                                                // 14356
					continue;                                                                                                         // 14357
				}                                                                                                                  // 14358
                                                                                                                       // 14359
				cur = this.items[j].item.offset()[posProperty];                                                                    // 14360
				nearBottom = false;                                                                                                // 14361
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {                                                 // 14362
					nearBottom = true;                                                                                                // 14363
				}                                                                                                                  // 14364
                                                                                                                       // 14365
				if ( Math.abs( event[ axis ] - cur ) < dist ) {                                                                    // 14366
					dist = Math.abs( event[ axis ] - cur );                                                                           // 14367
					itemWithLeastDistance = this.items[ j ];                                                                          // 14368
					this.direction = nearBottom ? "up": "down";                                                                       // 14369
				}                                                                                                                  // 14370
			}                                                                                                                   // 14371
                                                                                                                       // 14372
			//Check if dropOnEmpty is enabled                                                                                   // 14373
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {                                                           // 14374
				return;                                                                                                            // 14375
			}                                                                                                                   // 14376
                                                                                                                       // 14377
			if(this.currentContainer === this.containers[innermostIndex]) {                                                     // 14378
				if ( !this.currentContainer.containerCache.over ) {                                                                // 14379
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );                                      // 14380
					this.currentContainer.containerCache.over = 1;                                                                    // 14381
				}                                                                                                                  // 14382
				return;                                                                                                            // 14383
			}                                                                                                                   // 14384
                                                                                                                       // 14385
			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());                                                                     // 14387
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));                                      // 14388
			this.currentContainer = this.containers[innermostIndex];                                                            // 14389
                                                                                                                       // 14390
			//Update the placeholder                                                                                            // 14391
			this.options.placeholder.update(this.currentContainer, this.placeholder);                                           // 14392
                                                                                                                       // 14393
			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));                                        // 14394
			this.containers[innermostIndex].containerCache.over = 1;                                                            // 14395
		}                                                                                                                    // 14396
                                                                                                                       // 14397
                                                                                                                       // 14398
	},                                                                                                                    // 14399
                                                                                                                       // 14400
	_createHelper: function(event) {                                                                                      // 14401
                                                                                                                       // 14402
		var o = this.options,                                                                                                // 14403
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);
                                                                                                                       // 14405
		//Add the helper to the DOM if that didn't happen already                                                            // 14406
		if(!helper.parents("body").length) {                                                                                 // 14407
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);                 // 14408
		}                                                                                                                    // 14409
                                                                                                                       // 14410
		if(helper[0] === this.currentItem[0]) {                                                                              // 14411
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}                                                                                                                    // 14413
                                                                                                                       // 14414
		if(!helper[0].style.width || o.forceHelperSize) {                                                                    // 14415
			helper.width(this.currentItem.width());                                                                             // 14416
		}                                                                                                                    // 14417
		if(!helper[0].style.height || o.forceHelperSize) {                                                                   // 14418
			helper.height(this.currentItem.height());                                                                           // 14419
		}                                                                                                                    // 14420
                                                                                                                       // 14421
		return helper;                                                                                                       // 14422
                                                                                                                       // 14423
	},                                                                                                                    // 14424
                                                                                                                       // 14425
	_adjustOffsetFromHelper: function(obj) {                                                                              // 14426
		if (typeof obj === "string") {                                                                                       // 14427
			obj = obj.split(" ");                                                                                               // 14428
		}                                                                                                                    // 14429
		if ($.isArray(obj)) {                                                                                                // 14430
			obj = {left: +obj[0], top: +obj[1] || 0};                                                                           // 14431
		}                                                                                                                    // 14432
		if ("left" in obj) {                                                                                                 // 14433
			this.offset.click.left = obj.left + this.margins.left;                                                              // 14434
		}                                                                                                                    // 14435
		if ("right" in obj) {                                                                                                // 14436
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;                              // 14437
		}                                                                                                                    // 14438
		if ("top" in obj) {                                                                                                  // 14439
			this.offset.click.top = obj.top + this.margins.top;                                                                 // 14440
		}                                                                                                                    // 14441
		if ("bottom" in obj) {                                                                                               // 14442
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;                              // 14443
		}                                                                                                                    // 14444
	},                                                                                                                    // 14445
                                                                                                                       // 14446
	_getParentOffset: function() {                                                                                        // 14447
                                                                                                                       // 14448
                                                                                                                       // 14449
		//Get the offsetParent and cache its position                                                                        // 14450
		this.offsetParent = this.helper.offsetParent();                                                                      // 14451
		var po = this.offsetParent.offset();                                                                                 // 14452
                                                                                                                       // 14453
		// This is a special case where we need to modify a offset calculated on start, since the following happened:        // 14454
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent     // 14455
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();                                                                          // 14459
			po.top += this.scrollParent.scrollTop();                                                                            // 14460
		}                                                                                                                    // 14461
                                                                                                                       // 14462
		// This needs to be actually done for all browsers, since pageX/pageY includes this information                      // 14463
		// with an ugly IE fix                                                                                               // 14464
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };                                                                                           // 14466
		}                                                                                                                    // 14467
                                                                                                                       // 14468
		return {                                                                                                             // 14469
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),                                          // 14470
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)                                        // 14471
		};                                                                                                                   // 14472
                                                                                                                       // 14473
	},                                                                                                                    // 14474
                                                                                                                       // 14475
	_getRelativeOffset: function() {                                                                                      // 14476
                                                                                                                       // 14477
		if(this.cssPosition === "relative") {                                                                                // 14478
			var p = this.currentItem.position();                                                                                // 14479
			return {                                                                                                            // 14480
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),                           // 14481
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()                        // 14482
			};                                                                                                                  // 14483
		} else {                                                                                                             // 14484
			return { top: 0, left: 0 };                                                                                         // 14485
		}                                                                                                                    // 14486
                                                                                                                       // 14487
	},                                                                                                                    // 14488
                                                                                                                       // 14489
	_cacheMargins: function() {                                                                                           // 14490
		this.margins = {                                                                                                     // 14491
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),                                                       // 14492
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)                                                          // 14493
		};                                                                                                                   // 14494
	},                                                                                                                    // 14495
                                                                                                                       // 14496
	_cacheHelperProportions: function() {                                                                                 // 14497
		this.helperProportions = {                                                                                           // 14498
			width: this.helper.outerWidth(),                                                                                    // 14499
			height: this.helper.outerHeight()                                                                                   // 14500
		};                                                                                                                   // 14501
	},                                                                                                                    // 14502
                                                                                                                       // 14503
	_setContainment: function() {                                                                                         // 14504
                                                                                                                       // 14505
		var ce, co, over,                                                                                                    // 14506
			o = this.options;                                                                                                   // 14507
		if(o.containment === "parent") {                                                                                     // 14508
			o.containment = this.helper[0].parentNode;                                                                          // 14509
		}                                                                                                                    // 14510
		if(o.containment === "document" || o.containment === "window") {                                                     // 14511
			this.containment = [                                                                                                // 14512
				0 - this.offset.relative.left - this.offset.parent.left,                                                           // 14513
				0 - this.offset.relative.top - this.offset.parent.top,                                                             // 14514
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,    // 14515
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];                                                                                                                  // 14517
		}                                                                                                                    // 14518
                                                                                                                       // 14519
		if(!(/^(document|window|parent)$/).test(o.containment)) {                                                            // 14520
			ce = $(o.containment)[0];                                                                                           // 14521
			co = $(o.containment).offset();                                                                                     // 14522
			over = ($(ce).css("overflow") !== "hidden");                                                                        // 14523
                                                                                                                       // 14524
			this.containment = [                                                                                                // 14525
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];                                                                                                                  // 14530
		}                                                                                                                    // 14531
                                                                                                                       // 14532
	},                                                                                                                    // 14533
                                                                                                                       // 14534
	_convertPositionTo: function(d, pos) {                                                                                // 14535
                                                                                                                       // 14536
		if(!pos) {                                                                                                           // 14537
			pos = this.position;                                                                                                // 14538
		}                                                                                                                    // 14539
		var mod = d === "absolute" ? 1 : -1,                                                                                 // 14540
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);                                                        // 14542
                                                                                                                       // 14543
		return {                                                                                                             // 14544
			top: (                                                                                                              // 14545
				pos.top	+																// The absolute mouse position                                                            // 14546
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)            // 14548
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),                                                                                                                  // 14550
			left: (                                                                                                             // 14551
				pos.left +																// The absolute mouse position                                                           // 14552
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)            // 14554
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)                                                                                                                   // 14556
		};                                                                                                                   // 14557
                                                                                                                       // 14558
	},                                                                                                                    // 14559
                                                                                                                       // 14560
	_generatePosition: function(event) {                                                                                  // 14561
                                                                                                                       // 14562
		var top, left,                                                                                                       // 14563
			o = this.options,                                                                                                   // 14564
			pageX = event.pageX,                                                                                                // 14565
			pageY = event.pageY,                                                                                                // 14566
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                                                                                                                       // 14568
		// This is another very weird special case that only happens for relative elements:                                  // 14569
		// 1. If the css position is relative                                                                                // 14570
		// 2. and the scroll parent is the document or similar to the offset parent                                          // 14571
		// we have to refresh the relative offset during the scroll so there are no jumps                                    // 14572
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();                                                                   // 14574
		}                                                                                                                    // 14575
                                                                                                                       // 14576
		/*                                                                                                                   // 14577
		 * - Position constraining -                                                                                         // 14578
		 * Constrain the position to a mix of grid, containment.                                                             // 14579
		 */                                                                                                                  // 14580
                                                                                                                       // 14581
		if(this.originalPosition) { //If we are not dragging yet, we won't check for options                                 // 14582
                                                                                                                       // 14583
			if(this.containment) {                                                                                              // 14584
				if(event.pageX - this.offset.click.left < this.containment[0]) {                                                   // 14585
					pageX = this.containment[0] + this.offset.click.left;                                                             // 14586
				}                                                                                                                  // 14587
				if(event.pageY - this.offset.click.top < this.containment[1]) {                                                    // 14588
					pageY = this.containment[1] + this.offset.click.top;                                                              // 14589
				}                                                                                                                  // 14590
				if(event.pageX - this.offset.click.left > this.containment[2]) {                                                   // 14591
					pageX = this.containment[2] + this.offset.click.left;                                                             // 14592
				}                                                                                                                  // 14593
				if(event.pageY - this.offset.click.top > this.containment[3]) {                                                    // 14594
					pageY = this.containment[3] + this.offset.click.top;                                                              // 14595
				}                                                                                                                  // 14596
			}                                                                                                                   // 14597
                                                                                                                       // 14598
			if(o.grid) {                                                                                                        // 14599
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];                       // 14600
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                                                                                                                       // 14602
				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];                      // 14603
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}                                                                                                                   // 14605
                                                                                                                       // 14606
		}                                                                                                                    // 14607
                                                                                                                       // 14608
		return {                                                                                                             // 14609
			top: (                                                                                                              // 14610
				pageY -																// The absolute mouse position                                                              // 14611
				this.offset.click.top -													// Click offset (relative to the element)                                      // 14612
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)                 // 14614
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),                                                                                                                  // 14616
			left: (                                                                                                             // 14617
				pageX -																// The absolute mouse position                                                              // 14618
				this.offset.click.left -												// Click offset (relative to the element)                                      // 14619
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)                // 14621
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() )) // 14622
			)                                                                                                                   // 14623
		};                                                                                                                   // 14624
                                                                                                                       // 14625
	},                                                                                                                    // 14626
                                                                                                                       // 14627
	_rearrange: function(event, i, a, hardRefresh) {                                                                      // 14628
                                                                                                                       // 14629
		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));
                                                                                                                       // 14631
		//Various things done here to improve the performance:                                                               // 14632
		// 1. we create a setTimeout, that calls refreshPositions                                                            // 14633
		// 2. on the instance, we have a counter variable, that get's higher after every append                              // 14634
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same             // 14635
		// 4. this lets only the last addition to the timeout stack through                                                  // 14636
		this.counter = this.counter ? ++this.counter : 1;                                                                    // 14637
		var counter = this.counter;                                                                                          // 14638
                                                                                                                       // 14639
		this._delay(function() {                                                                                             // 14640
			if(counter === this.counter) {                                                                                      // 14641
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove                       // 14642
			}                                                                                                                   // 14643
		});                                                                                                                  // 14644
                                                                                                                       // 14645
	},                                                                                                                    // 14646
                                                                                                                       // 14647
	_clear: function(event, noPropagation) {                                                                              // 14648
                                                                                                                       // 14649
		this.reverting = false;                                                                                              // 14650
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and       // 14651
		// everything else normalized again                                                                                  // 14652
		var i,                                                                                                               // 14653
			delayedTriggers = [];                                                                                               // 14654
                                                                                                                       // 14655
		// We first have to update the dom position of the actual currentItem                                                // 14656
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)           // 14657
		if(!this._noFinalSort && this.currentItem.parent().length) {                                                         // 14658
			this.placeholder.before(this.currentItem);                                                                          // 14659
		}                                                                                                                    // 14660
		this._noFinalSort = null;                                                                                            // 14661
                                                                                                                       // 14662
		if(this.helper[0] === this.currentItem[0]) {                                                                         // 14663
			for(i in this._storedCSS) {                                                                                         // 14664
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {                                             // 14665
					this._storedCSS[i] = "";                                                                                          // 14666
				}                                                                                                                  // 14667
			}                                                                                                                   // 14668
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");                                            // 14669
		} else {                                                                                                             // 14670
			this.currentItem.show();                                                                                            // 14671
		}                                                                                                                    // 14672
                                                                                                                       // 14673
		if(this.fromOutside && !noPropagation) {                                                                             // 14674
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });         // 14675
		}                                                                                                                    // 14676
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}                                                                                                                    // 14679
                                                                                                                       // 14680
		// Check if the items Container has Changed and trigger appropriate                                                  // 14681
		// events.                                                                                                           // 14682
		if (this !== this.currentContainer) {                                                                                // 14683
			if(!noPropagation) {                                                                                                // 14684
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });                         // 14685
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}                                                                                                                   // 14688
		}                                                                                                                    // 14689
                                                                                                                       // 14690
                                                                                                                       // 14691
		//Post events to containers                                                                                          // 14692
		function delayEvent( type, instance, container ) {                                                                   // 14693
			return function( event ) {                                                                                          // 14694
				container._trigger( type, event, instance._uiHash( instance ) );                                                   // 14695
			};                                                                                                                  // 14696
		}                                                                                                                    // 14697
		for (i = this.containers.length - 1; i >= 0; i--){                                                                   // 14698
			if (!noPropagation) {                                                                                               // 14699
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );                                    // 14700
			}                                                                                                                   // 14701
			if(this.containers[i].containerCache.over) {                                                                        // 14702
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );                                           // 14703
				this.containers[i].containerCache.over = 0;                                                                        // 14704
			}                                                                                                                   // 14705
		}                                                                                                                    // 14706
                                                                                                                       // 14707
		//Do what was originally in plugins                                                                                  // 14708
		if ( this.storedCursor ) {                                                                                           // 14709
			this.document.find( "body" ).css( "cursor", this.storedCursor );                                                    // 14710
			this.storedStylesheet.remove();                                                                                     // 14711
		}                                                                                                                    // 14712
		if(this._storedOpacity) {                                                                                            // 14713
			this.helper.css("opacity", this._storedOpacity);                                                                    // 14714
		}                                                                                                                    // 14715
		if(this._storedZIndex) {                                                                                             // 14716
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);                                 // 14717
		}                                                                                                                    // 14718
                                                                                                                       // 14719
		this.dragging = false;                                                                                               // 14720
                                                                                                                       // 14721
		if(!noPropagation) {                                                                                                 // 14722
			this._trigger("beforeStop", event, this._uiHash());                                                                 // 14723
		}                                                                                                                    // 14724
                                                                                                                       // 14725
		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);                                                     // 14727
                                                                                                                       // 14728
		if ( !this.cancelHelperRemoval ) {                                                                                   // 14729
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {                                                                 // 14730
				this.helper.remove();                                                                                              // 14731
			}                                                                                                                   // 14732
			this.helper = null;                                                                                                 // 14733
		}                                                                                                                    // 14734
                                                                                                                       // 14735
		if(!noPropagation) {                                                                                                 // 14736
			for (i=0; i < delayedTriggers.length; i++) {                                                                        // 14737
				delayedTriggers[i].call(this, event);                                                                              // 14738
			} //Trigger all delayed events                                                                                      // 14739
			this._trigger("stop", event, this._uiHash());                                                                       // 14740
		}                                                                                                                    // 14741
                                                                                                                       // 14742
		this.fromOutside = false;                                                                                            // 14743
		return !this.cancelHelperRemoval;                                                                                    // 14744
                                                                                                                       // 14745
	},                                                                                                                    // 14746
                                                                                                                       // 14747
	_trigger: function() {                                                                                                // 14748
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {                                                  // 14749
			this.cancel();                                                                                                      // 14750
		}                                                                                                                    // 14751
	},                                                                                                                    // 14752
                                                                                                                       // 14753
	_uiHash: function(_inst) {                                                                                            // 14754
		var inst = _inst || this;                                                                                            // 14755
		return {                                                                                                             // 14756
			helper: inst.helper,                                                                                                // 14757
			placeholder: inst.placeholder || $([]),                                                                             // 14758
			position: inst.position,                                                                                            // 14759
			originalPosition: inst.originalPosition,                                                                            // 14760
			offset: inst.positionAbs,                                                                                           // 14761
			item: inst.currentItem,                                                                                             // 14762
			sender: _inst ? _inst.element : null                                                                                // 14763
		};                                                                                                                   // 14764
	}                                                                                                                     // 14765
                                                                                                                       // 14766
});                                                                                                                    // 14767
                                                                                                                       // 14768
                                                                                                                       // 14769
/*!                                                                                                                    // 14770
 * jQuery UI Spinner 1.11.2                                                                                            // 14771
 * http://jqueryui.com                                                                                                 // 14772
 *                                                                                                                     // 14773
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 14774
 * Released under the MIT license.                                                                                     // 14775
 * http://jquery.org/license                                                                                           // 14776
 *                                                                                                                     // 14777
 * http://api.jqueryui.com/spinner/                                                                                    // 14778
 */                                                                                                                    // 14779
                                                                                                                       // 14780
                                                                                                                       // 14781
function spinner_modifier( fn ) {                                                                                      // 14782
	return function() {                                                                                                   // 14783
		var previous = this.element.val();                                                                                   // 14784
		fn.apply( this, arguments );                                                                                         // 14785
		this._refresh();                                                                                                     // 14786
		if ( previous !== this.element.val() ) {                                                                             // 14787
			this._trigger( "change" );                                                                                          // 14788
		}                                                                                                                    // 14789
	};                                                                                                                    // 14790
}                                                                                                                      // 14791
                                                                                                                       // 14792
var spinner = $.widget( "ui.spinner", {                                                                                // 14793
	version: "1.11.2",                                                                                                    // 14794
	defaultElement: "<input>",                                                                                            // 14795
	widgetEventPrefix: "spin",                                                                                            // 14796
	options: {                                                                                                            // 14797
		culture: null,                                                                                                       // 14798
		icons: {                                                                                                             // 14799
			down: "ui-icon-triangle-1-s",                                                                                       // 14800
			up: "ui-icon-triangle-1-n"                                                                                          // 14801
		},                                                                                                                   // 14802
		incremental: true,                                                                                                   // 14803
		max: null,                                                                                                           // 14804
		min: null,                                                                                                           // 14805
		numberFormat: null,                                                                                                  // 14806
		page: 10,                                                                                                            // 14807
		step: 1,                                                                                                             // 14808
                                                                                                                       // 14809
		change: null,                                                                                                        // 14810
		spin: null,                                                                                                          // 14811
		start: null,                                                                                                         // 14812
		stop: null                                                                                                           // 14813
	},                                                                                                                    // 14814
                                                                                                                       // 14815
	_create: function() {                                                                                                 // 14816
		// handle string values that need to be parsed                                                                       // 14817
		this._setOption( "max", this.options.max );                                                                          // 14818
		this._setOption( "min", this.options.min );                                                                          // 14819
		this._setOption( "step", this.options.step );                                                                        // 14820
                                                                                                                       // 14821
		// Only format if there is a value, prevents the field from being marked                                             // 14822
		// as invalid in Firefox, see #9573.                                                                                 // 14823
		if ( this.value() !== "" ) {                                                                                         // 14824
			// Format the value, but don't constrain.                                                                           // 14825
			this._value( this.element.val(), true );                                                                            // 14826
		}                                                                                                                    // 14827
                                                                                                                       // 14828
		this._draw();                                                                                                        // 14829
		this._on( this._events );                                                                                            // 14830
		this._refresh();                                                                                                     // 14831
                                                                                                                       // 14832
		// turning off autocomplete prevents the browser from remembering the                                                // 14833
		// value when navigating through history, so we re-enable autocomplete                                               // 14834
		// if the page is unloaded before the widget is destroyed. #7790                                                     // 14835
		this._on( this.window, {                                                                                             // 14836
			beforeunload: function() {                                                                                          // 14837
				this.element.removeAttr( "autocomplete" );                                                                         // 14838
			}                                                                                                                   // 14839
		});                                                                                                                  // 14840
	},                                                                                                                    // 14841
                                                                                                                       // 14842
	_getCreateOptions: function() {                                                                                       // 14843
		var options = {},                                                                                                    // 14844
			element = this.element;                                                                                             // 14845
                                                                                                                       // 14846
		$.each( [ "min", "max", "step" ], function( i, option ) {                                                            // 14847
			var value = element.attr( option );                                                                                 // 14848
			if ( value !== undefined && value.length ) {                                                                        // 14849
				options[ option ] = value;                                                                                         // 14850
			}                                                                                                                   // 14851
		});                                                                                                                  // 14852
                                                                                                                       // 14853
		return options;                                                                                                      // 14854
	},                                                                                                                    // 14855
                                                                                                                       // 14856
	_events: {                                                                                                            // 14857
		keydown: function( event ) {                                                                                         // 14858
			if ( this._start( event ) && this._keydown( event ) ) {                                                             // 14859
				event.preventDefault();                                                                                            // 14860
			}                                                                                                                   // 14861
		},                                                                                                                   // 14862
		keyup: "_stop",                                                                                                      // 14863
		focus: function() {                                                                                                  // 14864
			this.previous = this.element.val();                                                                                 // 14865
		},                                                                                                                   // 14866
		blur: function( event ) {                                                                                            // 14867
			if ( this.cancelBlur ) {                                                                                            // 14868
				delete this.cancelBlur;                                                                                            // 14869
				return;                                                                                                            // 14870
			}                                                                                                                   // 14871
                                                                                                                       // 14872
			this._stop();                                                                                                       // 14873
			this._refresh();                                                                                                    // 14874
			if ( this.previous !== this.element.val() ) {                                                                       // 14875
				this._trigger( "change", event );                                                                                  // 14876
			}                                                                                                                   // 14877
		},                                                                                                                   // 14878
		mousewheel: function( event, delta ) {                                                                               // 14879
			if ( !delta ) {                                                                                                     // 14880
				return;                                                                                                            // 14881
			}                                                                                                                   // 14882
			if ( !this.spinning && !this._start( event ) ) {                                                                    // 14883
				return false;                                                                                                      // 14884
			}                                                                                                                   // 14885
                                                                                                                       // 14886
			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );                                                      // 14887
			clearTimeout( this.mousewheelTimer );                                                                               // 14888
			this.mousewheelTimer = this._delay(function() {                                                                     // 14889
				if ( this.spinning ) {                                                                                             // 14890
					this._stop( event );                                                                                              // 14891
				}                                                                                                                  // 14892
			}, 100 );                                                                                                           // 14893
			event.preventDefault();                                                                                             // 14894
		},                                                                                                                   // 14895
		"mousedown .ui-spinner-button": function( event ) {                                                                  // 14896
			var previous;                                                                                                       // 14897
                                                                                                                       // 14898
			// We never want the buttons to have focus; whenever the user is                                                    // 14899
			// interacting with the spinner, the focus should be on the input.                                                  // 14900
			// If the input is focused then this.previous is properly set from                                                  // 14901
			// when the input first received focus. If the input is not focused                                                 // 14902
			// then we need to set this.previous based on the value before spinning.                                            // 14903
			previous = this.element[0] === this.document[0].activeElement ?                                                     // 14904
				this.previous : this.element.val();                                                                                // 14905
			function checkFocus() {                                                                                             // 14906
				var isActive = this.element[0] === this.document[0].activeElement;                                                 // 14907
				if ( !isActive ) {                                                                                                 // 14908
					this.element.focus();                                                                                             // 14909
					this.previous = previous;                                                                                         // 14910
					// support: IE                                                                                                    // 14911
					// IE sets focus asynchronously, so we need to check if focus                                                     // 14912
					// moved off of the input because the user clicked on the button.                                                 // 14913
					this._delay(function() {                                                                                          // 14914
						this.previous = previous;                                                                                        // 14915
					});                                                                                                               // 14916
				}                                                                                                                  // 14917
			}                                                                                                                   // 14918
                                                                                                                       // 14919
			// ensure focus is on (or stays on) the text field                                                                  // 14920
			event.preventDefault();                                                                                             // 14921
			checkFocus.call( this );                                                                                            // 14922
                                                                                                                       // 14923
			// support: IE                                                                                                      // 14924
			// IE doesn't prevent moving focus even with event.preventDefault()                                                 // 14925
			// so we set a flag to know when we should ignore the blur event                                                    // 14926
			// and check (again) if focus moved off of the input.                                                               // 14927
			this.cancelBlur = true;                                                                                             // 14928
			this._delay(function() {                                                                                            // 14929
				delete this.cancelBlur;                                                                                            // 14930
				checkFocus.call( this );                                                                                           // 14931
			});                                                                                                                 // 14932
                                                                                                                       // 14933
			if ( this._start( event ) === false ) {                                                                             // 14934
				return;                                                                                                            // 14935
			}                                                                                                                   // 14936
                                                                                                                       // 14937
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );                         // 14938
		},                                                                                                                   // 14939
		"mouseup .ui-spinner-button": "_stop",                                                                               // 14940
		"mouseenter .ui-spinner-button": function( event ) {                                                                 // 14941
			// button will add ui-state-active if mouse was down while mouseleave and kept down                                 // 14942
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {                                                    // 14943
				return;                                                                                                            // 14944
			}                                                                                                                   // 14945
                                                                                                                       // 14946
			if ( this._start( event ) === false ) {                                                                             // 14947
				return false;                                                                                                      // 14948
			}                                                                                                                   // 14949
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );                         // 14950
		},                                                                                                                   // 14951
		// TODO: do we really want to consider this a stop?                                                                  // 14952
		// shouldn't we just stop the repeater and wait until mouseup before                                                 // 14953
		// we trigger the stop event?                                                                                        // 14954
		"mouseleave .ui-spinner-button": "_stop"                                                                             // 14955
	},                                                                                                                    // 14956
                                                                                                                       // 14957
	_draw: function() {                                                                                                   // 14958
		var uiSpinner = this.uiSpinner = this.element                                                                        // 14959
			.addClass( "ui-spinner-input" )                                                                                     // 14960
			.attr( "autocomplete", "off" )                                                                                      // 14961
			.wrap( this._uiSpinnerHtml() )                                                                                      // 14962
			.parent()                                                                                                           // 14963
				// add buttons                                                                                                     // 14964
				.append( this._buttonHtml() );                                                                                     // 14965
                                                                                                                       // 14966
		this.element.attr( "role", "spinbutton" );                                                                           // 14967
                                                                                                                       // 14968
		// button bindings                                                                                                   // 14969
		this.buttons = uiSpinner.find( ".ui-spinner-button" )                                                                // 14970
			.attr( "tabIndex", -1 )                                                                                             // 14971
			.button()                                                                                                           // 14972
			.removeClass( "ui-corner-all" );                                                                                    // 14973
                                                                                                                       // 14974
		// IE 6 doesn't understand height: 50% for the buttons                                                               // 14975
		// unless the wrapper has an explicit height                                                                         // 14976
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&                                                // 14977
				uiSpinner.height() > 0 ) {                                                                                         // 14978
			uiSpinner.height( uiSpinner.height() );                                                                             // 14979
		}                                                                                                                    // 14980
                                                                                                                       // 14981
		// disable spinner if element was already disabled                                                                   // 14982
		if ( this.options.disabled ) {                                                                                       // 14983
			this.disable();                                                                                                     // 14984
		}                                                                                                                    // 14985
	},                                                                                                                    // 14986
                                                                                                                       // 14987
	_keydown: function( event ) {                                                                                         // 14988
		var options = this.options,                                                                                          // 14989
			keyCode = $.ui.keyCode;                                                                                             // 14990
                                                                                                                       // 14991
		switch ( event.keyCode ) {                                                                                           // 14992
		case keyCode.UP:                                                                                                     // 14993
			this._repeat( null, 1, event );                                                                                     // 14994
			return true;                                                                                                        // 14995
		case keyCode.DOWN:                                                                                                   // 14996
			this._repeat( null, -1, event );                                                                                    // 14997
			return true;                                                                                                        // 14998
		case keyCode.PAGE_UP:                                                                                                // 14999
			this._repeat( null, options.page, event );                                                                          // 15000
			return true;                                                                                                        // 15001
		case keyCode.PAGE_DOWN:                                                                                              // 15002
			this._repeat( null, -options.page, event );                                                                         // 15003
			return true;                                                                                                        // 15004
		}                                                                                                                    // 15005
                                                                                                                       // 15006
		return false;                                                                                                        // 15007
	},                                                                                                                    // 15008
                                                                                                                       // 15009
	_uiSpinnerHtml: function() {                                                                                          // 15010
		return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";                                 // 15011
	},                                                                                                                    // 15012
                                                                                                                       // 15013
	_buttonHtml: function() {                                                                                             // 15014
		return "" +                                                                                                          // 15015
			"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +                                                        // 15016
				"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +                                             // 15017
			"</a>" +                                                                                                            // 15018
			"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +                                                      // 15019
				"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +                                           // 15020
			"</a>";                                                                                                             // 15021
	},                                                                                                                    // 15022
                                                                                                                       // 15023
	_start: function( event ) {                                                                                           // 15024
		if ( !this.spinning && this._trigger( "start", event ) === false ) {                                                 // 15025
			return false;                                                                                                       // 15026
		}                                                                                                                    // 15027
                                                                                                                       // 15028
		if ( !this.counter ) {                                                                                               // 15029
			this.counter = 1;                                                                                                   // 15030
		}                                                                                                                    // 15031
		this.spinning = true;                                                                                                // 15032
		return true;                                                                                                         // 15033
	},                                                                                                                    // 15034
                                                                                                                       // 15035
	_repeat: function( i, steps, event ) {                                                                                // 15036
		i = i || 500;                                                                                                        // 15037
                                                                                                                       // 15038
		clearTimeout( this.timer );                                                                                          // 15039
		this.timer = this._delay(function() {                                                                                // 15040
			this._repeat( 40, steps, event );                                                                                   // 15041
		}, i );                                                                                                              // 15042
                                                                                                                       // 15043
		this._spin( steps * this.options.step, event );                                                                      // 15044
	},                                                                                                                    // 15045
                                                                                                                       // 15046
	_spin: function( step, event ) {                                                                                      // 15047
		var value = this.value() || 0;                                                                                       // 15048
                                                                                                                       // 15049
		if ( !this.counter ) {                                                                                               // 15050
			this.counter = 1;                                                                                                   // 15051
		}                                                                                                                    // 15052
                                                                                                                       // 15053
		value = this._adjustValue( value + step * this._increment( this.counter ) );                                         // 15054
                                                                                                                       // 15055
		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {                                 // 15056
			this._value( value );                                                                                               // 15057
			this.counter++;                                                                                                     // 15058
		}                                                                                                                    // 15059
	},                                                                                                                    // 15060
                                                                                                                       // 15061
	_increment: function( i ) {                                                                                           // 15062
		var incremental = this.options.incremental;                                                                          // 15063
                                                                                                                       // 15064
		if ( incremental ) {                                                                                                 // 15065
			return $.isFunction( incremental ) ?                                                                                // 15066
				incremental( i ) :                                                                                                 // 15067
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );                                                  // 15068
		}                                                                                                                    // 15069
                                                                                                                       // 15070
		return 1;                                                                                                            // 15071
	},                                                                                                                    // 15072
                                                                                                                       // 15073
	_precision: function() {                                                                                              // 15074
		var precision = this._precisionOf( this.options.step );                                                              // 15075
		if ( this.options.min !== null ) {                                                                                   // 15076
			precision = Math.max( precision, this._precisionOf( this.options.min ) );                                           // 15077
		}                                                                                                                    // 15078
		return precision;                                                                                                    // 15079
	},                                                                                                                    // 15080
                                                                                                                       // 15081
	_precisionOf: function( num ) {                                                                                       // 15082
		var str = num.toString(),                                                                                            // 15083
			decimal = str.indexOf( "." );                                                                                       // 15084
		return decimal === -1 ? 0 : str.length - decimal - 1;                                                                // 15085
	},                                                                                                                    // 15086
                                                                                                                       // 15087
	_adjustValue: function( value ) {                                                                                     // 15088
		var base, aboveMin,                                                                                                  // 15089
			options = this.options;                                                                                             // 15090
                                                                                                                       // 15091
		// make sure we're at a valid step                                                                                   // 15092
		// - find out where we are relative to the base (min or 0)                                                           // 15093
		base = options.min !== null ? options.min : 0;                                                                       // 15094
		aboveMin = value - base;                                                                                             // 15095
		// - round to the nearest step                                                                                       // 15096
		aboveMin = Math.round(aboveMin / options.step) * options.step;                                                       // 15097
		// - rounding is based on 0, so adjust back to our base                                                              // 15098
		value = base + aboveMin;                                                                                             // 15099
                                                                                                                       // 15100
		// fix precision from bad JS floating point math                                                                     // 15101
		value = parseFloat( value.toFixed( this._precision() ) );                                                            // 15102
                                                                                                                       // 15103
		// clamp the value                                                                                                   // 15104
		if ( options.max !== null && value > options.max) {                                                                  // 15105
			return options.max;                                                                                                 // 15106
		}                                                                                                                    // 15107
		if ( options.min !== null && value < options.min ) {                                                                 // 15108
			return options.min;                                                                                                 // 15109
		}                                                                                                                    // 15110
                                                                                                                       // 15111
		return value;                                                                                                        // 15112
	},                                                                                                                    // 15113
                                                                                                                       // 15114
	_stop: function( event ) {                                                                                            // 15115
		if ( !this.spinning ) {                                                                                              // 15116
			return;                                                                                                             // 15117
		}                                                                                                                    // 15118
                                                                                                                       // 15119
		clearTimeout( this.timer );                                                                                          // 15120
		clearTimeout( this.mousewheelTimer );                                                                                // 15121
		this.counter = 0;                                                                                                    // 15122
		this.spinning = false;                                                                                               // 15123
		this._trigger( "stop", event );                                                                                      // 15124
	},                                                                                                                    // 15125
                                                                                                                       // 15126
	_setOption: function( key, value ) {                                                                                  // 15127
		if ( key === "culture" || key === "numberFormat" ) {                                                                 // 15128
			var prevValue = this._parse( this.element.val() );                                                                  // 15129
			this.options[ key ] = value;                                                                                        // 15130
			this.element.val( this._format( prevValue ) );                                                                      // 15131
			return;                                                                                                             // 15132
		}                                                                                                                    // 15133
                                                                                                                       // 15134
		if ( key === "max" || key === "min" || key === "step" ) {                                                            // 15135
			if ( typeof value === "string" ) {                                                                                  // 15136
				value = this._parse( value );                                                                                      // 15137
			}                                                                                                                   // 15138
		}                                                                                                                    // 15139
		if ( key === "icons" ) {                                                                                             // 15140
			this.buttons.first().find( ".ui-icon" )                                                                             // 15141
				.removeClass( this.options.icons.up )                                                                              // 15142
				.addClass( value.up );                                                                                             // 15143
			this.buttons.last().find( ".ui-icon" )                                                                              // 15144
				.removeClass( this.options.icons.down )                                                                            // 15145
				.addClass( value.down );                                                                                           // 15146
		}                                                                                                                    // 15147
                                                                                                                       // 15148
		this._super( key, value );                                                                                           // 15149
                                                                                                                       // 15150
		if ( key === "disabled" ) {                                                                                          // 15151
			this.widget().toggleClass( "ui-state-disabled", !!value );                                                          // 15152
			this.element.prop( "disabled", !!value );                                                                           // 15153
			this.buttons.button( value ? "disable" : "enable" );                                                                // 15154
		}                                                                                                                    // 15155
	},                                                                                                                    // 15156
                                                                                                                       // 15157
	_setOptions: spinner_modifier(function( options ) {                                                                   // 15158
		this._super( options );                                                                                              // 15159
	}),                                                                                                                   // 15160
                                                                                                                       // 15161
	_parse: function( val ) {                                                                                             // 15162
		if ( typeof val === "string" && val !== "" ) {                                                                       // 15163
			val = window.Globalize && this.options.numberFormat ?                                                               // 15164
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;                                                      // 15165
		}                                                                                                                    // 15166
		return val === "" || isNaN( val ) ? null : val;                                                                      // 15167
	},                                                                                                                    // 15168
                                                                                                                       // 15169
	_format: function( value ) {                                                                                          // 15170
		if ( value === "" ) {                                                                                                // 15171
			return "";                                                                                                          // 15172
		}                                                                                                                    // 15173
		return window.Globalize && this.options.numberFormat ?                                                               // 15174
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :                                        // 15175
			value;                                                                                                              // 15176
	},                                                                                                                    // 15177
                                                                                                                       // 15178
	_refresh: function() {                                                                                                // 15179
		this.element.attr({                                                                                                  // 15180
			"aria-valuemin": this.options.min,                                                                                  // 15181
			"aria-valuemax": this.options.max,                                                                                  // 15182
			// TODO: what should we do with values that can't be parsed?                                                        // 15183
			"aria-valuenow": this._parse( this.element.val() )                                                                  // 15184
		});                                                                                                                  // 15185
	},                                                                                                                    // 15186
                                                                                                                       // 15187
	isValid: function() {                                                                                                 // 15188
		var value = this.value();                                                                                            // 15189
                                                                                                                       // 15190
		// null is invalid                                                                                                   // 15191
		if ( value === null ) {                                                                                              // 15192
			return false;                                                                                                       // 15193
		}                                                                                                                    // 15194
                                                                                                                       // 15195
		// if value gets adjusted, it's invalid                                                                              // 15196
		return value === this._adjustValue( value );                                                                         // 15197
	},                                                                                                                    // 15198
                                                                                                                       // 15199
	// update the value without triggering change                                                                         // 15200
	_value: function( value, allowAny ) {                                                                                 // 15201
		var parsed;                                                                                                          // 15202
		if ( value !== "" ) {                                                                                                // 15203
			parsed = this._parse( value );                                                                                      // 15204
			if ( parsed !== null ) {                                                                                            // 15205
				if ( !allowAny ) {                                                                                                 // 15206
					parsed = this._adjustValue( parsed );                                                                             // 15207
				}                                                                                                                  // 15208
				value = this._format( parsed );                                                                                    // 15209
			}                                                                                                                   // 15210
		}                                                                                                                    // 15211
		this.element.val( value );                                                                                           // 15212
		this._refresh();                                                                                                     // 15213
	},                                                                                                                    // 15214
                                                                                                                       // 15215
	_destroy: function() {                                                                                                // 15216
		this.element                                                                                                         // 15217
			.removeClass( "ui-spinner-input" )                                                                                  // 15218
			.prop( "disabled", false )                                                                                          // 15219
			.removeAttr( "autocomplete" )                                                                                       // 15220
			.removeAttr( "role" )                                                                                               // 15221
			.removeAttr( "aria-valuemin" )                                                                                      // 15222
			.removeAttr( "aria-valuemax" )                                                                                      // 15223
			.removeAttr( "aria-valuenow" );                                                                                     // 15224
		this.uiSpinner.replaceWith( this.element );                                                                          // 15225
	},                                                                                                                    // 15226
                                                                                                                       // 15227
	stepUp: spinner_modifier(function( steps ) {                                                                          // 15228
		this._stepUp( steps );                                                                                               // 15229
	}),                                                                                                                   // 15230
	_stepUp: function( steps ) {                                                                                          // 15231
		if ( this._start() ) {                                                                                               // 15232
			this._spin( (steps || 1) * this.options.step );                                                                     // 15233
			this._stop();                                                                                                       // 15234
		}                                                                                                                    // 15235
	},                                                                                                                    // 15236
                                                                                                                       // 15237
	stepDown: spinner_modifier(function( steps ) {                                                                        // 15238
		this._stepDown( steps );                                                                                             // 15239
	}),                                                                                                                   // 15240
	_stepDown: function( steps ) {                                                                                        // 15241
		if ( this._start() ) {                                                                                               // 15242
			this._spin( (steps || 1) * -this.options.step );                                                                    // 15243
			this._stop();                                                                                                       // 15244
		}                                                                                                                    // 15245
	},                                                                                                                    // 15246
                                                                                                                       // 15247
	pageUp: spinner_modifier(function( pages ) {                                                                          // 15248
		this._stepUp( (pages || 1) * this.options.page );                                                                    // 15249
	}),                                                                                                                   // 15250
                                                                                                                       // 15251
	pageDown: spinner_modifier(function( pages ) {                                                                        // 15252
		this._stepDown( (pages || 1) * this.options.page );                                                                  // 15253
	}),                                                                                                                   // 15254
                                                                                                                       // 15255
	value: function( newVal ) {                                                                                           // 15256
		if ( !arguments.length ) {                                                                                           // 15257
			return this._parse( this.element.val() );                                                                           // 15258
		}                                                                                                                    // 15259
		spinner_modifier( this._value ).call( this, newVal );                                                                // 15260
	},                                                                                                                    // 15261
                                                                                                                       // 15262
	widget: function() {                                                                                                  // 15263
		return this.uiSpinner;                                                                                               // 15264
	}                                                                                                                     // 15265
});                                                                                                                    // 15266
                                                                                                                       // 15267
                                                                                                                       // 15268
/*!                                                                                                                    // 15269
 * jQuery UI Tabs 1.11.2                                                                                               // 15270
 * http://jqueryui.com                                                                                                 // 15271
 *                                                                                                                     // 15272
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 15273
 * Released under the MIT license.                                                                                     // 15274
 * http://jquery.org/license                                                                                           // 15275
 *                                                                                                                     // 15276
 * http://api.jqueryui.com/tabs/                                                                                       // 15277
 */                                                                                                                    // 15278
                                                                                                                       // 15279
                                                                                                                       // 15280
var tabs = $.widget( "ui.tabs", {                                                                                      // 15281
	version: "1.11.2",                                                                                                    // 15282
	delay: 300,                                                                                                           // 15283
	options: {                                                                                                            // 15284
		active: null,                                                                                                        // 15285
		collapsible: false,                                                                                                  // 15286
		event: "click",                                                                                                      // 15287
		heightStyle: "content",                                                                                              // 15288
		hide: null,                                                                                                          // 15289
		show: null,                                                                                                          // 15290
                                                                                                                       // 15291
		// callbacks                                                                                                         // 15292
		activate: null,                                                                                                      // 15293
		beforeActivate: null,                                                                                                // 15294
		beforeLoad: null,                                                                                                    // 15295
		load: null                                                                                                           // 15296
	},                                                                                                                    // 15297
                                                                                                                       // 15298
	_isLocal: (function() {                                                                                               // 15299
		var rhash = /#.*$/;                                                                                                  // 15300
                                                                                                                       // 15301
		return function( anchor ) {                                                                                          // 15302
			var anchorUrl, locationUrl;                                                                                         // 15303
                                                                                                                       // 15304
			// support: IE7                                                                                                     // 15305
			// IE7 doesn't normalize the href property when set via script (#9317)                                              // 15306
			anchor = anchor.cloneNode( false );                                                                                 // 15307
                                                                                                                       // 15308
			anchorUrl = anchor.href.replace( rhash, "" );                                                                       // 15309
			locationUrl = location.href.replace( rhash, "" );                                                                   // 15310
                                                                                                                       // 15311
			// decoding may throw an error if the URL isn't UTF-8 (#9518)                                                       // 15312
			try {                                                                                                               // 15313
				anchorUrl = decodeURIComponent( anchorUrl );                                                                       // 15314
			} catch ( error ) {}                                                                                                // 15315
			try {                                                                                                               // 15316
				locationUrl = decodeURIComponent( locationUrl );                                                                   // 15317
			} catch ( error ) {}                                                                                                // 15318
                                                                                                                       // 15319
			return anchor.hash.length > 1 && anchorUrl === locationUrl;                                                         // 15320
		};                                                                                                                   // 15321
	})(),                                                                                                                 // 15322
                                                                                                                       // 15323
	_create: function() {                                                                                                 // 15324
		var that = this,                                                                                                     // 15325
			options = this.options;                                                                                             // 15326
                                                                                                                       // 15327
		this.running = false;                                                                                                // 15328
                                                                                                                       // 15329
		this.element                                                                                                         // 15330
			.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )                                                    // 15331
			.toggleClass( "ui-tabs-collapsible", options.collapsible );                                                         // 15332
                                                                                                                       // 15333
		this._processTabs();                                                                                                 // 15334
		options.active = this._initialActive();                                                                              // 15335
                                                                                                                       // 15336
		// Take disabling tabs via class attribute from HTML                                                                 // 15337
		// into account and update option properly.                                                                          // 15338
		if ( $.isArray( options.disabled ) ) {                                                                               // 15339
			options.disabled = $.unique( options.disabled.concat(                                                               // 15340
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {                                                  // 15341
					return that.tabs.index( li );                                                                                     // 15342
				})                                                                                                                 // 15343
			) ).sort();                                                                                                         // 15344
		}                                                                                                                    // 15345
                                                                                                                       // 15346
		// check for length avoids error when initializing empty list                                                        // 15347
		if ( this.options.active !== false && this.anchors.length ) {                                                        // 15348
			this.active = this._findActive( options.active );                                                                   // 15349
		} else {                                                                                                             // 15350
			this.active = $();                                                                                                  // 15351
		}                                                                                                                    // 15352
                                                                                                                       // 15353
		this._refresh();                                                                                                     // 15354
                                                                                                                       // 15355
		if ( this.active.length ) {                                                                                          // 15356
			this.load( options.active );                                                                                        // 15357
		}                                                                                                                    // 15358
	},                                                                                                                    // 15359
                                                                                                                       // 15360
	_initialActive: function() {                                                                                          // 15361
		var active = this.options.active,                                                                                    // 15362
			collapsible = this.options.collapsible,                                                                             // 15363
			locationHash = location.hash.substring( 1 );                                                                        // 15364
                                                                                                                       // 15365
		if ( active === null ) {                                                                                             // 15366
			// check the fragment identifier in the URL                                                                         // 15367
			if ( locationHash ) {                                                                                               // 15368
				this.tabs.each(function( i, tab ) {                                                                                // 15369
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {                                                        // 15370
						active = i;                                                                                                      // 15371
						return false;                                                                                                    // 15372
					}                                                                                                                 // 15373
				});                                                                                                                // 15374
			}                                                                                                                   // 15375
                                                                                                                       // 15376
			// check for a tab marked active via a class                                                                        // 15377
			if ( active === null ) {                                                                                            // 15378
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );                                                 // 15379
			}                                                                                                                   // 15380
                                                                                                                       // 15381
			// no active tab, set to false                                                                                      // 15382
			if ( active === null || active === -1 ) {                                                                           // 15383
				active = this.tabs.length ? 0 : false;                                                                             // 15384
			}                                                                                                                   // 15385
		}                                                                                                                    // 15386
                                                                                                                       // 15387
		// handle numbers: negative, out of range                                                                            // 15388
		if ( active !== false ) {                                                                                            // 15389
			active = this.tabs.index( this.tabs.eq( active ) );                                                                 // 15390
			if ( active === -1 ) {                                                                                              // 15391
				active = collapsible ? false : 0;                                                                                  // 15392
			}                                                                                                                   // 15393
		}                                                                                                                    // 15394
                                                                                                                       // 15395
		// don't allow collapsible: false and active: false                                                                  // 15396
		if ( !collapsible && active === false && this.anchors.length ) {                                                     // 15397
			active = 0;                                                                                                         // 15398
		}                                                                                                                    // 15399
                                                                                                                       // 15400
		return active;                                                                                                       // 15401
	},                                                                                                                    // 15402
                                                                                                                       // 15403
	_getCreateEventData: function() {                                                                                     // 15404
		return {                                                                                                             // 15405
			tab: this.active,                                                                                                   // 15406
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )                                              // 15407
		};                                                                                                                   // 15408
	},                                                                                                                    // 15409
                                                                                                                       // 15410
	_tabKeydown: function( event ) {                                                                                      // 15411
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),                                                // 15412
			selectedIndex = this.tabs.index( focusedTab ),                                                                      // 15413
			goingForward = true;                                                                                                // 15414
                                                                                                                       // 15415
		if ( this._handlePageNav( event ) ) {                                                                                // 15416
			return;                                                                                                             // 15417
		}                                                                                                                    // 15418
                                                                                                                       // 15419
		switch ( event.keyCode ) {                                                                                           // 15420
			case $.ui.keyCode.RIGHT:                                                                                            // 15421
			case $.ui.keyCode.DOWN:                                                                                             // 15422
				selectedIndex++;                                                                                                   // 15423
				break;                                                                                                             // 15424
			case $.ui.keyCode.UP:                                                                                               // 15425
			case $.ui.keyCode.LEFT:                                                                                             // 15426
				goingForward = false;                                                                                              // 15427
				selectedIndex--;                                                                                                   // 15428
				break;                                                                                                             // 15429
			case $.ui.keyCode.END:                                                                                              // 15430
				selectedIndex = this.anchors.length - 1;                                                                           // 15431
				break;                                                                                                             // 15432
			case $.ui.keyCode.HOME:                                                                                             // 15433
				selectedIndex = 0;                                                                                                 // 15434
				break;                                                                                                             // 15435
			case $.ui.keyCode.SPACE:                                                                                            // 15436
				// Activate only, no collapsing                                                                                    // 15437
				event.preventDefault();                                                                                            // 15438
				clearTimeout( this.activating );                                                                                   // 15439
				this._activate( selectedIndex );                                                                                   // 15440
				return;                                                                                                            // 15441
			case $.ui.keyCode.ENTER:                                                                                            // 15442
				// Toggle (cancel delayed activation, allow collapsing)                                                            // 15443
				event.preventDefault();                                                                                            // 15444
				clearTimeout( this.activating );                                                                                   // 15445
				// Determine if we should collapse or activate                                                                     // 15446
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );                                   // 15447
				return;                                                                                                            // 15448
			default:                                                                                                            // 15449
				return;                                                                                                            // 15450
		}                                                                                                                    // 15451
                                                                                                                       // 15452
		// Focus the appropriate tab, based on which key was pressed                                                         // 15453
		event.preventDefault();                                                                                              // 15454
		clearTimeout( this.activating );                                                                                     // 15455
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );                                                   // 15456
                                                                                                                       // 15457
		// Navigating with control key will prevent automatic activation                                                     // 15458
		if ( !event.ctrlKey ) {                                                                                              // 15459
			// Update aria-selected immediately so that AT think the tab is already selected.                                   // 15460
			// Otherwise AT may confuse the user by stating that they need to activate the tab,                                 // 15461
			// but the tab will already be activated by the time the announcement finishes.                                     // 15462
			focusedTab.attr( "aria-selected", "false" );                                                                        // 15463
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );                                                      // 15464
                                                                                                                       // 15465
			this.activating = this._delay(function() {                                                                          // 15466
				this.option( "active", selectedIndex );                                                                            // 15467
			}, this.delay );                                                                                                    // 15468
		}                                                                                                                    // 15469
	},                                                                                                                    // 15470
                                                                                                                       // 15471
	_panelKeydown: function( event ) {                                                                                    // 15472
		if ( this._handlePageNav( event ) ) {                                                                                // 15473
			return;                                                                                                             // 15474
		}                                                                                                                    // 15475
                                                                                                                       // 15476
		// Ctrl+up moves focus to the current tab                                                                            // 15477
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {                                                          // 15478
			event.preventDefault();                                                                                             // 15479
			this.active.focus();                                                                                                // 15480
		}                                                                                                                    // 15481
	},                                                                                                                    // 15482
                                                                                                                       // 15483
	// Alt+page up/down moves focus to the previous/next tab (and activates)                                              // 15484
	_handlePageNav: function( event ) {                                                                                   // 15485
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {                                                      // 15486
			this._activate( this._focusNextTab( this.options.active - 1, false ) );                                             // 15487
			return true;                                                                                                        // 15488
		}                                                                                                                    // 15489
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {                                                    // 15490
			this._activate( this._focusNextTab( this.options.active + 1, true ) );                                              // 15491
			return true;                                                                                                        // 15492
		}                                                                                                                    // 15493
	},                                                                                                                    // 15494
                                                                                                                       // 15495
	_findNextTab: function( index, goingForward ) {                                                                       // 15496
		var lastTabIndex = this.tabs.length - 1;                                                                             // 15497
                                                                                                                       // 15498
		function constrain() {                                                                                               // 15499
			if ( index > lastTabIndex ) {                                                                                       // 15500
				index = 0;                                                                                                         // 15501
			}                                                                                                                   // 15502
			if ( index < 0 ) {                                                                                                  // 15503
				index = lastTabIndex;                                                                                              // 15504
			}                                                                                                                   // 15505
			return index;                                                                                                       // 15506
		}                                                                                                                    // 15507
                                                                                                                       // 15508
		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {                                                   // 15509
			index = goingForward ? index + 1 : index - 1;                                                                       // 15510
		}                                                                                                                    // 15511
                                                                                                                       // 15512
		return index;                                                                                                        // 15513
	},                                                                                                                    // 15514
                                                                                                                       // 15515
	_focusNextTab: function( index, goingForward ) {                                                                      // 15516
		index = this._findNextTab( index, goingForward );                                                                    // 15517
		this.tabs.eq( index ).focus();                                                                                       // 15518
		return index;                                                                                                        // 15519
	},                                                                                                                    // 15520
                                                                                                                       // 15521
	_setOption: function( key, value ) {                                                                                  // 15522
		if ( key === "active" ) {                                                                                            // 15523
			// _activate() will handle invalid values and update this.options                                                   // 15524
			this._activate( value );                                                                                            // 15525
			return;                                                                                                             // 15526
		}                                                                                                                    // 15527
                                                                                                                       // 15528
		if ( key === "disabled" ) {                                                                                          // 15529
			// don't use the widget factory's disabled handling                                                                 // 15530
			this._setupDisabled( value );                                                                                       // 15531
			return;                                                                                                             // 15532
		}                                                                                                                    // 15533
                                                                                                                       // 15534
		this._super( key, value);                                                                                            // 15535
                                                                                                                       // 15536
		if ( key === "collapsible" ) {                                                                                       // 15537
			this.element.toggleClass( "ui-tabs-collapsible", value );                                                           // 15538
			// Setting collapsible: false while collapsed; open first panel                                                     // 15539
			if ( !value && this.options.active === false ) {                                                                    // 15540
				this._activate( 0 );                                                                                               // 15541
			}                                                                                                                   // 15542
		}                                                                                                                    // 15543
                                                                                                                       // 15544
		if ( key === "event" ) {                                                                                             // 15545
			this._setupEvents( value );                                                                                         // 15546
		}                                                                                                                    // 15547
                                                                                                                       // 15548
		if ( key === "heightStyle" ) {                                                                                       // 15549
			this._setupHeightStyle( value );                                                                                    // 15550
		}                                                                                                                    // 15551
	},                                                                                                                    // 15552
                                                                                                                       // 15553
	_sanitizeSelector: function( hash ) {                                                                                 // 15554
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";                                    // 15555
	},                                                                                                                    // 15556
                                                                                                                       // 15557
	refresh: function() {                                                                                                 // 15558
		var options = this.options,                                                                                          // 15559
			lis = this.tablist.children( ":has(a[href])" );                                                                     // 15560
                                                                                                                       // 15561
		// get disabled tabs from class attribute from HTML                                                                  // 15562
		// this will get converted to a boolean if needed in _refresh()                                                      // 15563
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {                                      // 15564
			return lis.index( tab );                                                                                            // 15565
		});                                                                                                                  // 15566
                                                                                                                       // 15567
		this._processTabs();                                                                                                 // 15568
                                                                                                                       // 15569
		// was collapsed or no tabs                                                                                          // 15570
		if ( options.active === false || !this.anchors.length ) {                                                            // 15571
			options.active = false;                                                                                             // 15572
			this.active = $();                                                                                                  // 15573
		// was active, but active tab is gone                                                                                // 15574
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {                             // 15575
			// all remaining tabs are disabled                                                                                  // 15576
			if ( this.tabs.length === options.disabled.length ) {                                                               // 15577
				options.active = false;                                                                                            // 15578
				this.active = $();                                                                                                 // 15579
			// activate previous tab                                                                                            // 15580
			} else {                                                                                                            // 15581
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );                                   // 15582
			}                                                                                                                   // 15583
		// was active, active tab still exists                                                                               // 15584
		} else {                                                                                                             // 15585
			// make sure active index is correct                                                                                // 15586
			options.active = this.tabs.index( this.active );                                                                    // 15587
		}                                                                                                                    // 15588
                                                                                                                       // 15589
		this._refresh();                                                                                                     // 15590
	},                                                                                                                    // 15591
                                                                                                                       // 15592
	_refresh: function() {                                                                                                // 15593
		this._setupDisabled( this.options.disabled );                                                                        // 15594
		this._setupEvents( this.options.event );                                                                             // 15595
		this._setupHeightStyle( this.options.heightStyle );                                                                  // 15596
                                                                                                                       // 15597
		this.tabs.not( this.active ).attr({                                                                                  // 15598
			"aria-selected": "false",                                                                                           // 15599
			"aria-expanded": "false",                                                                                           // 15600
			tabIndex: -1                                                                                                        // 15601
		});                                                                                                                  // 15602
		this.panels.not( this._getPanelForTab( this.active ) )                                                               // 15603
			.hide()                                                                                                             // 15604
			.attr({                                                                                                             // 15605
				"aria-hidden": "true"                                                                                              // 15606
			});                                                                                                                 // 15607
                                                                                                                       // 15608
		// Make sure one tab is in the tab order                                                                             // 15609
		if ( !this.active.length ) {                                                                                         // 15610
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );                                                                            // 15611
		} else {                                                                                                             // 15612
			this.active                                                                                                         // 15613
				.addClass( "ui-tabs-active ui-state-active" )                                                                      // 15614
				.attr({                                                                                                            // 15615
					"aria-selected": "true",                                                                                          // 15616
					"aria-expanded": "true",                                                                                          // 15617
					tabIndex: 0                                                                                                       // 15618
				});                                                                                                                // 15619
			this._getPanelForTab( this.active )                                                                                 // 15620
				.show()                                                                                                            // 15621
				.attr({                                                                                                            // 15622
					"aria-hidden": "false"                                                                                            // 15623
				});                                                                                                                // 15624
		}                                                                                                                    // 15625
	},                                                                                                                    // 15626
                                                                                                                       // 15627
	_processTabs: function() {                                                                                            // 15628
		var that = this,                                                                                                     // 15629
			prevTabs = this.tabs,                                                                                               // 15630
			prevAnchors = this.anchors,                                                                                         // 15631
			prevPanels = this.panels;                                                                                           // 15632
                                                                                                                       // 15633
		this.tablist = this._getList()                                                                                       // 15634
			.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )                        // 15635
			.attr( "role", "tablist" )                                                                                          // 15636
                                                                                                                       // 15637
			// Prevent users from focusing disabled tabs via click                                                              // 15638
			.delegate( "> li", "mousedown" + this.eventNamespace, function( event ) {                                           // 15639
				if ( $( this ).is( ".ui-state-disabled" ) ) {                                                                      // 15640
					event.preventDefault();                                                                                           // 15641
				}                                                                                                                  // 15642
			})                                                                                                                  // 15643
                                                                                                                       // 15644
			// support: IE <9                                                                                                   // 15645
			// Preventing the default action in mousedown doesn't prevent IE                                                    // 15646
			// from focusing the element, so if the anchor gets focused, blur.                                                  // 15647
			// We don't have to worry about focusing the previously focused                                                     // 15648
			// element since clicking on a non-focusable element should focus                                                   // 15649
			// the body anyway.                                                                                                 // 15650
			.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {                                           // 15651
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {                                                      // 15652
					this.blur();                                                                                                      // 15653
				}                                                                                                                  // 15654
			});                                                                                                                 // 15655
                                                                                                                       // 15656
		this.tabs = this.tablist.find( "> li:has(a[href])" )                                                                 // 15657
			.addClass( "ui-state-default ui-corner-top" )                                                                       // 15658
			.attr({                                                                                                             // 15659
				role: "tab",                                                                                                       // 15660
				tabIndex: -1                                                                                                       // 15661
			});                                                                                                                 // 15662
                                                                                                                       // 15663
		this.anchors = this.tabs.map(function() {                                                                            // 15664
				return $( "a", this )[ 0 ];                                                                                        // 15665
			})                                                                                                                  // 15666
			.addClass( "ui-tabs-anchor" )                                                                                       // 15667
			.attr({                                                                                                             // 15668
				role: "presentation",                                                                                              // 15669
				tabIndex: -1                                                                                                       // 15670
			});                                                                                                                 // 15671
                                                                                                                       // 15672
		this.panels = $();                                                                                                   // 15673
                                                                                                                       // 15674
		this.anchors.each(function( i, anchor ) {                                                                            // 15675
			var selector, panel, panelId,                                                                                       // 15676
				anchorId = $( anchor ).uniqueId().attr( "id" ),                                                                    // 15677
				tab = $( anchor ).closest( "li" ),                                                                                 // 15678
				originalAriaControls = tab.attr( "aria-controls" );                                                                // 15679
                                                                                                                       // 15680
			// inline tab                                                                                                       // 15681
			if ( that._isLocal( anchor ) ) {                                                                                    // 15682
				selector = anchor.hash;                                                                                            // 15683
				panelId = selector.substring( 1 );                                                                                 // 15684
				panel = that.element.find( that._sanitizeSelector( selector ) );                                                   // 15685
			// remote tab                                                                                                       // 15686
			} else {                                                                                                            // 15687
				// If the tab doesn't already have aria-controls,                                                                  // 15688
				// generate an id by using a throw-away element                                                                    // 15689
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;                                               // 15690
				selector = "#" + panelId;                                                                                          // 15691
				panel = that.element.find( selector );                                                                             // 15692
				if ( !panel.length ) {                                                                                             // 15693
					panel = that._createPanel( panelId );                                                                             // 15694
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );                                                        // 15695
				}                                                                                                                  // 15696
				panel.attr( "aria-live", "polite" );                                                                               // 15697
			}                                                                                                                   // 15698
                                                                                                                       // 15699
			if ( panel.length) {                                                                                                // 15700
				that.panels = that.panels.add( panel );                                                                            // 15701
			}                                                                                                                   // 15702
			if ( originalAriaControls ) {                                                                                       // 15703
				tab.data( "ui-tabs-aria-controls", originalAriaControls );                                                         // 15704
			}                                                                                                                   // 15705
			tab.attr({                                                                                                          // 15706
				"aria-controls": panelId,                                                                                          // 15707
				"aria-labelledby": anchorId                                                                                        // 15708
			});                                                                                                                 // 15709
			panel.attr( "aria-labelledby", anchorId );                                                                          // 15710
		});                                                                                                                  // 15711
                                                                                                                       // 15712
		this.panels                                                                                                          // 15713
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )                                                     // 15714
			.attr( "role", "tabpanel" );                                                                                        // 15715
                                                                                                                       // 15716
		// Avoid memory leaks (#10056)                                                                                       // 15717
		if ( prevTabs ) {                                                                                                    // 15718
			this._off( prevTabs.not( this.tabs ) );                                                                             // 15719
			this._off( prevAnchors.not( this.anchors ) );                                                                       // 15720
			this._off( prevPanels.not( this.panels ) );                                                                         // 15721
		}                                                                                                                    // 15722
	},                                                                                                                    // 15723
                                                                                                                       // 15724
	// allow overriding how to find the list for rare usage scenarios (#7715)                                             // 15725
	_getList: function() {                                                                                                // 15726
		return this.tablist || this.element.find( "ol,ul" ).eq( 0 );                                                         // 15727
	},                                                                                                                    // 15728
                                                                                                                       // 15729
	_createPanel: function( id ) {                                                                                        // 15730
		return $( "<div>" )                                                                                                  // 15731
			.attr( "id", id )                                                                                                   // 15732
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )                                                     // 15733
			.data( "ui-tabs-destroy", true );                                                                                   // 15734
	},                                                                                                                    // 15735
                                                                                                                       // 15736
	_setupDisabled: function( disabled ) {                                                                                // 15737
		if ( $.isArray( disabled ) ) {                                                                                       // 15738
			if ( !disabled.length ) {                                                                                           // 15739
				disabled = false;                                                                                                  // 15740
			} else if ( disabled.length === this.anchors.length ) {                                                             // 15741
				disabled = true;                                                                                                   // 15742
			}                                                                                                                   // 15743
		}                                                                                                                    // 15744
                                                                                                                       // 15745
		// disable tabs                                                                                                      // 15746
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {                                                                // 15747
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {                                                       // 15748
				$( li )                                                                                                            // 15749
					.addClass( "ui-state-disabled" )                                                                                  // 15750
					.attr( "aria-disabled", "true" );                                                                                 // 15751
			} else {                                                                                                            // 15752
				$( li )                                                                                                            // 15753
					.removeClass( "ui-state-disabled" )                                                                               // 15754
					.removeAttr( "aria-disabled" );                                                                                   // 15755
			}                                                                                                                   // 15756
		}                                                                                                                    // 15757
                                                                                                                       // 15758
		this.options.disabled = disabled;                                                                                    // 15759
	},                                                                                                                    // 15760
                                                                                                                       // 15761
	_setupEvents: function( event ) {                                                                                     // 15762
		var events = {};                                                                                                     // 15763
		if ( event ) {                                                                                                       // 15764
			$.each( event.split(" "), function( index, eventName ) {                                                            // 15765
				events[ eventName ] = "_eventHandler";                                                                             // 15766
			});                                                                                                                 // 15767
		}                                                                                                                    // 15768
                                                                                                                       // 15769
		this._off( this.anchors.add( this.tabs ).add( this.panels ) );                                                       // 15770
		// Always prevent the default action, even when disabled                                                             // 15771
		this._on( true, this.anchors, {                                                                                      // 15772
			click: function( event ) {                                                                                          // 15773
				event.preventDefault();                                                                                            // 15774
			}                                                                                                                   // 15775
		});                                                                                                                  // 15776
		this._on( this.anchors, events );                                                                                    // 15777
		this._on( this.tabs, { keydown: "_tabKeydown" } );                                                                   // 15778
		this._on( this.panels, { keydown: "_panelKeydown" } );                                                               // 15779
                                                                                                                       // 15780
		this._focusable( this.tabs );                                                                                        // 15781
		this._hoverable( this.tabs );                                                                                        // 15782
	},                                                                                                                    // 15783
                                                                                                                       // 15784
	_setupHeightStyle: function( heightStyle ) {                                                                          // 15785
		var maxHeight,                                                                                                       // 15786
			parent = this.element.parent();                                                                                     // 15787
                                                                                                                       // 15788
		if ( heightStyle === "fill" ) {                                                                                      // 15789
			maxHeight = parent.height();                                                                                        // 15790
			maxHeight -= this.element.outerHeight() - this.element.height();                                                    // 15791
                                                                                                                       // 15792
			this.element.siblings( ":visible" ).each(function() {                                                               // 15793
				var elem = $( this ),                                                                                              // 15794
					position = elem.css( "position" );                                                                                // 15795
                                                                                                                       // 15796
				if ( position === "absolute" || position === "fixed" ) {                                                           // 15797
					return;                                                                                                           // 15798
				}                                                                                                                  // 15799
				maxHeight -= elem.outerHeight( true );                                                                             // 15800
			});                                                                                                                 // 15801
                                                                                                                       // 15802
			this.element.children().not( this.panels ).each(function() {                                                        // 15803
				maxHeight -= $( this ).outerHeight( true );                                                                        // 15804
			});                                                                                                                 // 15805
                                                                                                                       // 15806
			this.panels.each(function() {                                                                                       // 15807
				$( this ).height( Math.max( 0, maxHeight -                                                                         // 15808
					$( this ).innerHeight() + $( this ).height() ) );                                                                 // 15809
			})                                                                                                                  // 15810
			.css( "overflow", "auto" );                                                                                         // 15811
		} else if ( heightStyle === "auto" ) {                                                                               // 15812
			maxHeight = 0;                                                                                                      // 15813
			this.panels.each(function() {                                                                                       // 15814
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );                                                // 15815
			}).height( maxHeight );                                                                                             // 15816
		}                                                                                                                    // 15817
	},                                                                                                                    // 15818
                                                                                                                       // 15819
	_eventHandler: function( event ) {                                                                                    // 15820
		var options = this.options,                                                                                          // 15821
			active = this.active,                                                                                               // 15822
			anchor = $( event.currentTarget ),                                                                                  // 15823
			tab = anchor.closest( "li" ),                                                                                       // 15824
			clickedIsActive = tab[ 0 ] === active[ 0 ],                                                                         // 15825
			collapsing = clickedIsActive && options.collapsible,                                                                // 15826
			toShow = collapsing ? $() : this._getPanelForTab( tab ),                                                            // 15827
			toHide = !active.length ? $() : this._getPanelForTab( active ),                                                     // 15828
			eventData = {                                                                                                       // 15829
				oldTab: active,                                                                                                    // 15830
				oldPanel: toHide,                                                                                                  // 15831
				newTab: collapsing ? $() : tab,                                                                                    // 15832
				newPanel: toShow                                                                                                   // 15833
			};                                                                                                                  // 15834
                                                                                                                       // 15835
		event.preventDefault();                                                                                              // 15836
                                                                                                                       // 15837
		if ( tab.hasClass( "ui-state-disabled" ) ||                                                                          // 15838
				// tab is already loading                                                                                          // 15839
				tab.hasClass( "ui-tabs-loading" ) ||                                                                               // 15840
				// can't switch durning an animation                                                                               // 15841
				this.running ||                                                                                                    // 15842
				// click on active header, but not collapsible                                                                     // 15843
				( clickedIsActive && !options.collapsible ) ||                                                                     // 15844
				// allow canceling activation                                                                                      // 15845
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {                                              // 15846
			return;                                                                                                             // 15847
		}                                                                                                                    // 15848
                                                                                                                       // 15849
		options.active = collapsing ? false : this.tabs.index( tab );                                                        // 15850
                                                                                                                       // 15851
		this.active = clickedIsActive ? $() : tab;                                                                           // 15852
		if ( this.xhr ) {                                                                                                    // 15853
			this.xhr.abort();                                                                                                   // 15854
		}                                                                                                                    // 15855
                                                                                                                       // 15856
		if ( !toHide.length && !toShow.length ) {                                                                            // 15857
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );                                                      // 15858
		}                                                                                                                    // 15859
                                                                                                                       // 15860
		if ( toShow.length ) {                                                                                               // 15861
			this.load( this.tabs.index( tab ), event );                                                                         // 15862
		}                                                                                                                    // 15863
		this._toggle( event, eventData );                                                                                    // 15864
	},                                                                                                                    // 15865
                                                                                                                       // 15866
	// handles show/hide for selecting tabs                                                                               // 15867
	_toggle: function( event, eventData ) {                                                                               // 15868
		var that = this,                                                                                                     // 15869
			toShow = eventData.newPanel,                                                                                        // 15870
			toHide = eventData.oldPanel;                                                                                        // 15871
                                                                                                                       // 15872
		this.running = true;                                                                                                 // 15873
                                                                                                                       // 15874
		function complete() {                                                                                                // 15875
			that.running = false;                                                                                               // 15876
			that._trigger( "activate", event, eventData );                                                                      // 15877
		}                                                                                                                    // 15878
                                                                                                                       // 15879
		function show() {                                                                                                    // 15880
			eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );                                      // 15881
                                                                                                                       // 15882
			if ( toShow.length && that.options.show ) {                                                                         // 15883
				that._show( toShow, that.options.show, complete );                                                                 // 15884
			} else {                                                                                                            // 15885
				toShow.show();                                                                                                     // 15886
				complete();                                                                                                        // 15887
			}                                                                                                                   // 15888
		}                                                                                                                    // 15889
                                                                                                                       // 15890
		// start out by hiding, then showing, then completing                                                                // 15891
		if ( toHide.length && this.options.hide ) {                                                                          // 15892
			this._hide( toHide, this.options.hide, function() {                                                                 // 15893
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                  // 15894
				show();                                                                                                            // 15895
			});                                                                                                                 // 15896
		} else {                                                                                                             // 15897
			eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                   // 15898
			toHide.hide();                                                                                                      // 15899
			show();                                                                                                             // 15900
		}                                                                                                                    // 15901
                                                                                                                       // 15902
		toHide.attr( "aria-hidden", "true" );                                                                                // 15903
		eventData.oldTab.attr({                                                                                              // 15904
			"aria-selected": "false",                                                                                           // 15905
			"aria-expanded": "false"                                                                                            // 15906
		});                                                                                                                  // 15907
		// If we're switching tabs, remove the old tab from the tab order.                                                   // 15908
		// If we're opening from collapsed state, remove the previous tab from the tab order.                                // 15909
		// If we're collapsing, then keep the collapsing tab in the tab order.                                               // 15910
		if ( toShow.length && toHide.length ) {                                                                              // 15911
			eventData.oldTab.attr( "tabIndex", -1 );                                                                            // 15912
		} else if ( toShow.length ) {                                                                                        // 15913
			this.tabs.filter(function() {                                                                                       // 15914
				return $( this ).attr( "tabIndex" ) === 0;                                                                         // 15915
			})                                                                                                                  // 15916
			.attr( "tabIndex", -1 );                                                                                            // 15917
		}                                                                                                                    // 15918
                                                                                                                       // 15919
		toShow.attr( "aria-hidden", "false" );                                                                               // 15920
		eventData.newTab.attr({                                                                                              // 15921
			"aria-selected": "true",                                                                                            // 15922
			"aria-expanded": "true",                                                                                            // 15923
			tabIndex: 0                                                                                                         // 15924
		});                                                                                                                  // 15925
	},                                                                                                                    // 15926
                                                                                                                       // 15927
	_activate: function( index ) {                                                                                        // 15928
		var anchor,                                                                                                          // 15929
			active = this._findActive( index );                                                                                 // 15930
                                                                                                                       // 15931
		// trying to activate the already active panel                                                                       // 15932
		if ( active[ 0 ] === this.active[ 0 ] ) {                                                                            // 15933
			return;                                                                                                             // 15934
		}                                                                                                                    // 15935
                                                                                                                       // 15936
		// trying to collapse, simulate a click on the current active header                                                 // 15937
		if ( !active.length ) {                                                                                              // 15938
			active = this.active;                                                                                               // 15939
		}                                                                                                                    // 15940
                                                                                                                       // 15941
		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];                                                                      // 15942
		this._eventHandler({                                                                                                 // 15943
			target: anchor,                                                                                                     // 15944
			currentTarget: anchor,                                                                                              // 15945
			preventDefault: $.noop                                                                                              // 15946
		});                                                                                                                  // 15947
	},                                                                                                                    // 15948
                                                                                                                       // 15949
	_findActive: function( index ) {                                                                                      // 15950
		return index === false ? $() : this.tabs.eq( index );                                                                // 15951
	},                                                                                                                    // 15952
                                                                                                                       // 15953
	_getIndex: function( index ) {                                                                                        // 15954
		// meta-function to give users option to provide a href string instead of a numerical index.                         // 15955
		if ( typeof index === "string" ) {                                                                                   // 15956
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );                                     // 15957
		}                                                                                                                    // 15958
                                                                                                                       // 15959
		return index;                                                                                                        // 15960
	},                                                                                                                    // 15961
                                                                                                                       // 15962
	_destroy: function() {                                                                                                // 15963
		if ( this.xhr ) {                                                                                                    // 15964
			this.xhr.abort();                                                                                                   // 15965
		}                                                                                                                    // 15966
                                                                                                                       // 15967
		this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );                 // 15968
                                                                                                                       // 15969
		this.tablist                                                                                                         // 15970
			.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )                     // 15971
			.removeAttr( "role" );                                                                                              // 15972
                                                                                                                       // 15973
		this.anchors                                                                                                         // 15974
			.removeClass( "ui-tabs-anchor" )                                                                                    // 15975
			.removeAttr( "role" )                                                                                               // 15976
			.removeAttr( "tabIndex" )                                                                                           // 15977
			.removeUniqueId();                                                                                                  // 15978
                                                                                                                       // 15979
		this.tablist.unbind( this.eventNamespace );                                                                          // 15980
                                                                                                                       // 15981
		this.tabs.add( this.panels ).each(function() {                                                                       // 15982
			if ( $.data( this, "ui-tabs-destroy" ) ) {                                                                          // 15983
				$( this ).remove();                                                                                                // 15984
			} else {                                                                                                            // 15985
				$( this )                                                                                                          // 15986
					.removeClass( "ui-state-default ui-state-active ui-state-disabled " +                                             // 15987
						"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )                                // 15988
					.removeAttr( "tabIndex" )                                                                                         // 15989
					.removeAttr( "aria-live" )                                                                                        // 15990
					.removeAttr( "aria-busy" )                                                                                        // 15991
					.removeAttr( "aria-selected" )                                                                                    // 15992
					.removeAttr( "aria-labelledby" )                                                                                  // 15993
					.removeAttr( "aria-hidden" )                                                                                      // 15994
					.removeAttr( "aria-expanded" )                                                                                    // 15995
					.removeAttr( "role" );                                                                                            // 15996
			}                                                                                                                   // 15997
		});                                                                                                                  // 15998
                                                                                                                       // 15999
		this.tabs.each(function() {                                                                                          // 16000
			var li = $( this ),                                                                                                 // 16001
				prev = li.data( "ui-tabs-aria-controls" );                                                                         // 16002
			if ( prev ) {                                                                                                       // 16003
				li                                                                                                                 // 16004
					.attr( "aria-controls", prev )                                                                                    // 16005
					.removeData( "ui-tabs-aria-controls" );                                                                           // 16006
			} else {                                                                                                            // 16007
				li.removeAttr( "aria-controls" );                                                                                  // 16008
			}                                                                                                                   // 16009
		});                                                                                                                  // 16010
                                                                                                                       // 16011
		this.panels.show();                                                                                                  // 16012
                                                                                                                       // 16013
		if ( this.options.heightStyle !== "content" ) {                                                                      // 16014
			this.panels.css( "height", "" );                                                                                    // 16015
		}                                                                                                                    // 16016
	},                                                                                                                    // 16017
                                                                                                                       // 16018
	enable: function( index ) {                                                                                           // 16019
		var disabled = this.options.disabled;                                                                                // 16020
		if ( disabled === false ) {                                                                                          // 16021
			return;                                                                                                             // 16022
		}                                                                                                                    // 16023
                                                                                                                       // 16024
		if ( index === undefined ) {                                                                                         // 16025
			disabled = false;                                                                                                   // 16026
		} else {                                                                                                             // 16027
			index = this._getIndex( index );                                                                                    // 16028
			if ( $.isArray( disabled ) ) {                                                                                      // 16029
				disabled = $.map( disabled, function( num ) {                                                                      // 16030
					return num !== index ? num : null;                                                                                // 16031
				});                                                                                                                // 16032
			} else {                                                                                                            // 16033
				disabled = $.map( this.tabs, function( li, num ) {                                                                 // 16034
					return num !== index ? num : null;                                                                                // 16035
				});                                                                                                                // 16036
			}                                                                                                                   // 16037
		}                                                                                                                    // 16038
		this._setupDisabled( disabled );                                                                                     // 16039
	},                                                                                                                    // 16040
                                                                                                                       // 16041
	disable: function( index ) {                                                                                          // 16042
		var disabled = this.options.disabled;                                                                                // 16043
		if ( disabled === true ) {                                                                                           // 16044
			return;                                                                                                             // 16045
		}                                                                                                                    // 16046
                                                                                                                       // 16047
		if ( index === undefined ) {                                                                                         // 16048
			disabled = true;                                                                                                    // 16049
		} else {                                                                                                             // 16050
			index = this._getIndex( index );                                                                                    // 16051
			if ( $.inArray( index, disabled ) !== -1 ) {                                                                        // 16052
				return;                                                                                                            // 16053
			}                                                                                                                   // 16054
			if ( $.isArray( disabled ) ) {                                                                                      // 16055
				disabled = $.merge( [ index ], disabled ).sort();                                                                  // 16056
			} else {                                                                                                            // 16057
				disabled = [ index ];                                                                                              // 16058
			}                                                                                                                   // 16059
		}                                                                                                                    // 16060
		this._setupDisabled( disabled );                                                                                     // 16061
	},                                                                                                                    // 16062
                                                                                                                       // 16063
	load: function( index, event ) {                                                                                      // 16064
		index = this._getIndex( index );                                                                                     // 16065
		var that = this,                                                                                                     // 16066
			tab = this.tabs.eq( index ),                                                                                        // 16067
			anchor = tab.find( ".ui-tabs-anchor" ),                                                                             // 16068
			panel = this._getPanelForTab( tab ),                                                                                // 16069
			eventData = {                                                                                                       // 16070
				tab: tab,                                                                                                          // 16071
				panel: panel                                                                                                       // 16072
			};                                                                                                                  // 16073
                                                                                                                       // 16074
		// not remote                                                                                                        // 16075
		if ( this._isLocal( anchor[ 0 ] ) ) {                                                                                // 16076
			return;                                                                                                             // 16077
		}                                                                                                                    // 16078
                                                                                                                       // 16079
		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );                                                 // 16080
                                                                                                                       // 16081
		// support: jQuery <1.8                                                                                              // 16082
		// jQuery <1.8 returns false if the request is canceled in beforeSend,                                               // 16083
		// but as of 1.8, $.ajax() always returns a jqXHR object.                                                            // 16084
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {                                                              // 16085
			tab.addClass( "ui-tabs-loading" );                                                                                  // 16086
			panel.attr( "aria-busy", "true" );                                                                                  // 16087
                                                                                                                       // 16088
			this.xhr                                                                                                            // 16089
				.success(function( response ) {                                                                                    // 16090
					// support: jQuery <1.8                                                                                           // 16091
					// http://bugs.jquery.com/ticket/11778                                                                            // 16092
					setTimeout(function() {                                                                                           // 16093
						panel.html( response );                                                                                          // 16094
						that._trigger( "load", event, eventData );                                                                       // 16095
					}, 1 );                                                                                                           // 16096
				})                                                                                                                 // 16097
				.complete(function( jqXHR, status ) {                                                                              // 16098
					// support: jQuery <1.8                                                                                           // 16099
					// http://bugs.jquery.com/ticket/11778                                                                            // 16100
					setTimeout(function() {                                                                                           // 16101
						if ( status === "abort" ) {                                                                                      // 16102
							that.panels.stop( false, true );                                                                                // 16103
						}                                                                                                                // 16104
                                                                                                                       // 16105
						tab.removeClass( "ui-tabs-loading" );                                                                            // 16106
						panel.removeAttr( "aria-busy" );                                                                                 // 16107
                                                                                                                       // 16108
						if ( jqXHR === that.xhr ) {                                                                                      // 16109
							delete that.xhr;                                                                                                // 16110
						}                                                                                                                // 16111
					}, 1 );                                                                                                           // 16112
				});                                                                                                                // 16113
		}                                                                                                                    // 16114
	},                                                                                                                    // 16115
                                                                                                                       // 16116
	_ajaxSettings: function( anchor, event, eventData ) {                                                                 // 16117
		var that = this;                                                                                                     // 16118
		return {                                                                                                             // 16119
			url: anchor.attr( "href" ),                                                                                         // 16120
			beforeSend: function( jqXHR, settings ) {                                                                           // 16121
				return that._trigger( "beforeLoad", event,                                                                         // 16122
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );                                                // 16123
			}                                                                                                                   // 16124
		};                                                                                                                   // 16125
	},                                                                                                                    // 16126
                                                                                                                       // 16127
	_getPanelForTab: function( tab ) {                                                                                    // 16128
		var id = $( tab ).attr( "aria-controls" );                                                                           // 16129
		return this.element.find( this._sanitizeSelector( "#" + id ) );                                                      // 16130
	}                                                                                                                     // 16131
});                                                                                                                    // 16132
                                                                                                                       // 16133
                                                                                                                       // 16134
/*!                                                                                                                    // 16135
 * jQuery UI Tooltip 1.11.2                                                                                            // 16136
 * http://jqueryui.com                                                                                                 // 16137
 *                                                                                                                     // 16138
 * Copyright 2014 jQuery Foundation and other contributors                                                             // 16139
 * Released under the MIT license.                                                                                     // 16140
 * http://jquery.org/license                                                                                           // 16141
 *                                                                                                                     // 16142
 * http://api.jqueryui.com/tooltip/                                                                                    // 16143
 */                                                                                                                    // 16144
                                                                                                                       // 16145
                                                                                                                       // 16146
var tooltip = $.widget( "ui.tooltip", {                                                                                // 16147
	version: "1.11.2",                                                                                                    // 16148
	options: {                                                                                                            // 16149
		content: function() {                                                                                                // 16150
			// support: IE<9, Opera in jQuery <1.7                                                                              // 16151
			// .text() can't accept undefined, so coerce to a string                                                            // 16152
			var title = $( this ).attr( "title" ) || "";                                                                        // 16153
			// Escape title, since we're going from an attribute to raw HTML                                                    // 16154
			return $( "<a>" ).text( title ).html();                                                                             // 16155
		},                                                                                                                   // 16156
		hide: true,                                                                                                          // 16157
		// Disabled elements have inconsistent behavior across browsers (#8661)                                              // 16158
		items: "[title]:not([disabled])",                                                                                    // 16159
		position: {                                                                                                          // 16160
			my: "left top+15",                                                                                                  // 16161
			at: "left bottom",                                                                                                  // 16162
			collision: "flipfit flip"                                                                                           // 16163
		},                                                                                                                   // 16164
		show: true,                                                                                                          // 16165
		tooltipClass: null,                                                                                                  // 16166
		track: false,                                                                                                        // 16167
                                                                                                                       // 16168
		// callbacks                                                                                                         // 16169
		close: null,                                                                                                         // 16170
		open: null                                                                                                           // 16171
	},                                                                                                                    // 16172
                                                                                                                       // 16173
	_addDescribedBy: function( elem, id ) {                                                                               // 16174
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );                                            // 16175
		describedby.push( id );                                                                                              // 16176
		elem                                                                                                                 // 16177
			.data( "ui-tooltip-id", id )                                                                                        // 16178
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );                                                     // 16179
	},                                                                                                                    // 16180
                                                                                                                       // 16181
	_removeDescribedBy: function( elem ) {                                                                                // 16182
		var id = elem.data( "ui-tooltip-id" ),                                                                               // 16183
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),                                               // 16184
			index = $.inArray( id, describedby );                                                                               // 16185
                                                                                                                       // 16186
		if ( index !== -1 ) {                                                                                                // 16187
			describedby.splice( index, 1 );                                                                                     // 16188
		}                                                                                                                    // 16189
                                                                                                                       // 16190
		elem.removeData( "ui-tooltip-id" );                                                                                  // 16191
		describedby = $.trim( describedby.join( " " ) );                                                                     // 16192
		if ( describedby ) {                                                                                                 // 16193
			elem.attr( "aria-describedby", describedby );                                                                       // 16194
		} else {                                                                                                             // 16195
			elem.removeAttr( "aria-describedby" );                                                                              // 16196
		}                                                                                                                    // 16197
	},                                                                                                                    // 16198
                                                                                                                       // 16199
	_create: function() {                                                                                                 // 16200
		this._on({                                                                                                           // 16201
			mouseover: "open",                                                                                                  // 16202
			focusin: "open"                                                                                                     // 16203
		});                                                                                                                  // 16204
                                                                                                                       // 16205
		// IDs of generated tooltips, needed for destroy                                                                     // 16206
		this.tooltips = {};                                                                                                  // 16207
                                                                                                                       // 16208
		// IDs of parent tooltips where we removed the title attribute                                                       // 16209
		this.parents = {};                                                                                                   // 16210
                                                                                                                       // 16211
		if ( this.options.disabled ) {                                                                                       // 16212
			this._disable();                                                                                                    // 16213
		}                                                                                                                    // 16214
                                                                                                                       // 16215
		// Append the aria-live region so tooltips announce correctly                                                        // 16216
		this.liveRegion = $( "<div>" )                                                                                       // 16217
			.attr({                                                                                                             // 16218
				role: "log",                                                                                                       // 16219
				"aria-live": "assertive",                                                                                          // 16220
				"aria-relevant": "additions"                                                                                       // 16221
			})                                                                                                                  // 16222
			.addClass( "ui-helper-hidden-accessible" )                                                                          // 16223
			.appendTo( this.document[ 0 ].body );                                                                               // 16224
	},                                                                                                                    // 16225
                                                                                                                       // 16226
	_setOption: function( key, value ) {                                                                                  // 16227
		var that = this;                                                                                                     // 16228
                                                                                                                       // 16229
		if ( key === "disabled" ) {                                                                                          // 16230
			this[ value ? "_disable" : "_enable" ]();                                                                           // 16231
			this.options[ key ] = value;                                                                                        // 16232
			// disable element style changes                                                                                    // 16233
			return;                                                                                                             // 16234
		}                                                                                                                    // 16235
                                                                                                                       // 16236
		this._super( key, value );                                                                                           // 16237
                                                                                                                       // 16238
		if ( key === "content" ) {                                                                                           // 16239
			$.each( this.tooltips, function( id, tooltipData ) {                                                                // 16240
				that._updateContent( tooltipData.element );                                                                        // 16241
			});                                                                                                                 // 16242
		}                                                                                                                    // 16243
	},                                                                                                                    // 16244
                                                                                                                       // 16245
	_disable: function() {                                                                                                // 16246
		var that = this;                                                                                                     // 16247
                                                                                                                       // 16248
		// close open tooltips                                                                                               // 16249
		$.each( this.tooltips, function( id, tooltipData ) {                                                                 // 16250
			var event = $.Event( "blur" );                                                                                      // 16251
			event.target = event.currentTarget = tooltipData.element[ 0 ];                                                      // 16252
			that.close( event, true );                                                                                          // 16253
		});                                                                                                                  // 16254
                                                                                                                       // 16255
		// remove title attributes to prevent native tooltips                                                                // 16256
		this.element.find( this.options.items ).addBack().each(function() {                                                  // 16257
			var element = $( this );                                                                                            // 16258
			if ( element.is( "[title]" ) ) {                                                                                    // 16259
				element                                                                                                            // 16260
					.data( "ui-tooltip-title", element.attr( "title" ) )                                                              // 16261
					.removeAttr( "title" );                                                                                           // 16262
			}                                                                                                                   // 16263
		});                                                                                                                  // 16264
	},                                                                                                                    // 16265
                                                                                                                       // 16266
	_enable: function() {                                                                                                 // 16267
		// restore title attributes                                                                                          // 16268
		this.element.find( this.options.items ).addBack().each(function() {                                                  // 16269
			var element = $( this );                                                                                            // 16270
			if ( element.data( "ui-tooltip-title" ) ) {                                                                         // 16271
				element.attr( "title", element.data( "ui-tooltip-title" ) );                                                       // 16272
			}                                                                                                                   // 16273
		});                                                                                                                  // 16274
	},                                                                                                                    // 16275
                                                                                                                       // 16276
	open: function( event ) {                                                                                             // 16277
		var that = this,                                                                                                     // 16278
			target = $( event ? event.target : this.element )                                                                   // 16279
				// we need closest here due to mouseover bubbling,                                                                 // 16280
				// but always pointing at the same event target                                                                    // 16281
				.closest( this.options.items );                                                                                    // 16282
                                                                                                                       // 16283
		// No element to show a tooltip for or the tooltip is already open                                                   // 16284
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {                                                            // 16285
			return;                                                                                                             // 16286
		}                                                                                                                    // 16287
                                                                                                                       // 16288
		if ( target.attr( "title" ) ) {                                                                                      // 16289
			target.data( "ui-tooltip-title", target.attr( "title" ) );                                                          // 16290
		}                                                                                                                    // 16291
                                                                                                                       // 16292
		target.data( "ui-tooltip-open", true );                                                                              // 16293
                                                                                                                       // 16294
		// kill parent tooltips, custom or native, for hover                                                                 // 16295
		if ( event && event.type === "mouseover" ) {                                                                         // 16296
			target.parents().each(function() {                                                                                  // 16297
				var parent = $( this ),                                                                                            // 16298
					blurEvent;                                                                                                        // 16299
				if ( parent.data( "ui-tooltip-open" ) ) {                                                                          // 16300
					blurEvent = $.Event( "blur" );                                                                                    // 16301
					blurEvent.target = blurEvent.currentTarget = this;                                                                // 16302
					that.close( blurEvent, true );                                                                                    // 16303
				}                                                                                                                  // 16304
				if ( parent.attr( "title" ) ) {                                                                                    // 16305
					parent.uniqueId();                                                                                                // 16306
					that.parents[ this.id ] = {                                                                                       // 16307
						element: this,                                                                                                   // 16308
						title: parent.attr( "title" )                                                                                    // 16309
					};                                                                                                                // 16310
					parent.attr( "title", "" );                                                                                       // 16311
				}                                                                                                                  // 16312
			});                                                                                                                 // 16313
		}                                                                                                                    // 16314
                                                                                                                       // 16315
		this._updateContent( target, event );                                                                                // 16316
	},                                                                                                                    // 16317
                                                                                                                       // 16318
	_updateContent: function( target, event ) {                                                                           // 16319
		var content,                                                                                                         // 16320
			contentOption = this.options.content,                                                                               // 16321
			that = this,                                                                                                        // 16322
			eventType = event ? event.type : null;                                                                              // 16323
                                                                                                                       // 16324
		if ( typeof contentOption === "string" ) {                                                                           // 16325
			return this._open( event, target, contentOption );                                                                  // 16326
		}                                                                                                                    // 16327
                                                                                                                       // 16328
		content = contentOption.call( target[0], function( response ) {                                                      // 16329
			// ignore async response if tooltip was closed already                                                              // 16330
			if ( !target.data( "ui-tooltip-open" ) ) {                                                                          // 16331
				return;                                                                                                            // 16332
			}                                                                                                                   // 16333
			// IE may instantly serve a cached response for ajax requests                                                       // 16334
			// delay this call to _open so the other call to _open runs first                                                   // 16335
			that._delay(function() {                                                                                            // 16336
				// jQuery creates a special event for focusin when it doesn't                                                      // 16337
				// exist natively. To improve performance, the native event                                                        // 16338
				// object is reused and the type is changed. Therefore, we can't                                                   // 16339
				// rely on the type being correct after the event finished                                                         // 16340
				// bubbling, so we set it back to the previous value. (#8740)                                                      // 16341
				if ( event ) {                                                                                                     // 16342
					event.type = eventType;                                                                                           // 16343
				}                                                                                                                  // 16344
				this._open( event, target, response );                                                                             // 16345
			});                                                                                                                 // 16346
		});                                                                                                                  // 16347
		if ( content ) {                                                                                                     // 16348
			this._open( event, target, content );                                                                               // 16349
		}                                                                                                                    // 16350
	},                                                                                                                    // 16351
                                                                                                                       // 16352
	_open: function( event, target, content ) {                                                                           // 16353
		var tooltipData, tooltip, events, delayedShow, a11yContent,                                                          // 16354
			positionOption = $.extend( {}, this.options.position );                                                             // 16355
                                                                                                                       // 16356
		if ( !content ) {                                                                                                    // 16357
			return;                                                                                                             // 16358
		}                                                                                                                    // 16359
                                                                                                                       // 16360
		// Content can be updated multiple times. If the tooltip already                                                     // 16361
		// exists, then just update the content and bail.                                                                    // 16362
		tooltipData = this._find( target );                                                                                  // 16363
		if ( tooltipData ) {                                                                                                 // 16364
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );                                                  // 16365
			return;                                                                                                             // 16366
		}                                                                                                                    // 16367
                                                                                                                       // 16368
		// if we have a title, clear it to prevent the native tooltip                                                        // 16369
		// we have to check first to avoid defining a title if none exists                                                   // 16370
		// (we don't want to cause an element to start matching [title])                                                     // 16371
		//                                                                                                                   // 16372
		// We use removeAttr only for key events, to allow IE to export the correct                                          // 16373
		// accessible attributes. For mouse events, set to empty string to avoid                                             // 16374
		// native tooltip showing up (happens only when removing inside mouseover).                                          // 16375
		if ( target.is( "[title]" ) ) {                                                                                      // 16376
			if ( event && event.type === "mouseover" ) {                                                                        // 16377
				target.attr( "title", "" );                                                                                        // 16378
			} else {                                                                                                            // 16379
				target.removeAttr( "title" );                                                                                      // 16380
			}                                                                                                                   // 16381
		}                                                                                                                    // 16382
                                                                                                                       // 16383
		tooltipData = this._tooltip( target );                                                                               // 16384
		tooltip = tooltipData.tooltip;                                                                                       // 16385
		this._addDescribedBy( target, tooltip.attr( "id" ) );                                                                // 16386
		tooltip.find( ".ui-tooltip-content" ).html( content );                                                               // 16387
                                                                                                                       // 16388
		// Support: Voiceover on OS X, JAWS on IE <= 9                                                                       // 16389
		// JAWS announces deletions even when aria-relevant="additions"                                                      // 16390
		// Voiceover will sometimes re-read the entire log region's contents from the beginning                              // 16391
		this.liveRegion.children().hide();                                                                                   // 16392
		if ( content.clone ) {                                                                                               // 16393
			a11yContent = content.clone();                                                                                      // 16394
			a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );                                                   // 16395
		} else {                                                                                                             // 16396
			a11yContent = content;                                                                                              // 16397
		}                                                                                                                    // 16398
		$( "<div>" ).html( a11yContent ).appendTo( this.liveRegion );                                                        // 16399
                                                                                                                       // 16400
		function position( event ) {                                                                                         // 16401
			positionOption.of = event;                                                                                          // 16402
			if ( tooltip.is( ":hidden" ) ) {                                                                                    // 16403
				return;                                                                                                            // 16404
			}                                                                                                                   // 16405
			tooltip.position( positionOption );                                                                                 // 16406
		}                                                                                                                    // 16407
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {                                                  // 16408
			this._on( this.document, {                                                                                          // 16409
				mousemove: position                                                                                                // 16410
			});                                                                                                                 // 16411
			// trigger once to override element-relative positioning                                                            // 16412
			position( event );                                                                                                  // 16413
		} else {                                                                                                             // 16414
			tooltip.position( $.extend({                                                                                        // 16415
				of: target                                                                                                         // 16416
			}, this.options.position ) );                                                                                       // 16417
		}                                                                                                                    // 16418
                                                                                                                       // 16419
		tooltip.hide();                                                                                                      // 16420
                                                                                                                       // 16421
		this._show( tooltip, this.options.show );                                                                            // 16422
		// Handle tracking tooltips that are shown with a delay (#8644). As soon                                             // 16423
		// as the tooltip is visible, position the tooltip using the most recent                                             // 16424
		// event.                                                                                                            // 16425
		if ( this.options.show && this.options.show.delay ) {                                                                // 16426
			delayedShow = this.delayedShow = setInterval(function() {                                                           // 16427
				if ( tooltip.is( ":visible" ) ) {                                                                                  // 16428
					position( positionOption.of );                                                                                    // 16429
					clearInterval( delayedShow );                                                                                     // 16430
				}                                                                                                                  // 16431
			}, $.fx.interval );                                                                                                 // 16432
		}                                                                                                                    // 16433
                                                                                                                       // 16434
		this._trigger( "open", event, { tooltip: tooltip } );                                                                // 16435
                                                                                                                       // 16436
		events = {                                                                                                           // 16437
			keyup: function( event ) {                                                                                          // 16438
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {                                                                     // 16439
					var fakeEvent = $.Event(event);                                                                                   // 16440
					fakeEvent.currentTarget = target[0];                                                                              // 16441
					this.close( fakeEvent, true );                                                                                    // 16442
				}                                                                                                                  // 16443
			}                                                                                                                   // 16444
		};                                                                                                                   // 16445
                                                                                                                       // 16446
		// Only bind remove handler for delegated targets. Non-delegated                                                     // 16447
		// tooltips will handle this in destroy.                                                                             // 16448
		if ( target[ 0 ] !== this.element[ 0 ] ) {                                                                           // 16449
			events.remove = function() {                                                                                        // 16450
				this._removeTooltip( tooltip );                                                                                    // 16451
			};                                                                                                                  // 16452
		}                                                                                                                    // 16453
                                                                                                                       // 16454
		if ( !event || event.type === "mouseover" ) {                                                                        // 16455
			events.mouseleave = "close";                                                                                        // 16456
		}                                                                                                                    // 16457
		if ( !event || event.type === "focusin" ) {                                                                          // 16458
			events.focusout = "close";                                                                                          // 16459
		}                                                                                                                    // 16460
		this._on( true, target, events );                                                                                    // 16461
	},                                                                                                                    // 16462
                                                                                                                       // 16463
	close: function( event ) {                                                                                            // 16464
		var tooltip,                                                                                                         // 16465
			that = this,                                                                                                        // 16466
			target = $( event ? event.currentTarget : this.element ),                                                           // 16467
			tooltipData = this._find( target );                                                                                 // 16468
                                                                                                                       // 16469
		// The tooltip may already be closed                                                                                 // 16470
		if ( !tooltipData ) {                                                                                                // 16471
			return;                                                                                                             // 16472
		}                                                                                                                    // 16473
                                                                                                                       // 16474
		tooltip = tooltipData.tooltip;                                                                                       // 16475
                                                                                                                       // 16476
		// disabling closes the tooltip, so we need to track when we're closing                                              // 16477
		// to avoid an infinite loop in case the tooltip becomes disabled on close                                           // 16478
		if ( tooltipData.closing ) {                                                                                         // 16479
			return;                                                                                                             // 16480
		}                                                                                                                    // 16481
                                                                                                                       // 16482
		// Clear the interval for delayed tracking tooltips                                                                  // 16483
		clearInterval( this.delayedShow );                                                                                   // 16484
                                                                                                                       // 16485
		// only set title if we had one before (see comment in _open())                                                      // 16486
		// If the title attribute has changed since open(), don't restore                                                    // 16487
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {                                                // 16488
			target.attr( "title", target.data( "ui-tooltip-title" ) );                                                          // 16489
		}                                                                                                                    // 16490
                                                                                                                       // 16491
		this._removeDescribedBy( target );                                                                                   // 16492
                                                                                                                       // 16493
		tooltipData.hiding = true;                                                                                           // 16494
		tooltip.stop( true );                                                                                                // 16495
		this._hide( tooltip, this.options.hide, function() {                                                                 // 16496
			that._removeTooltip( $( this ) );                                                                                   // 16497
		});                                                                                                                  // 16498
                                                                                                                       // 16499
		target.removeData( "ui-tooltip-open" );                                                                              // 16500
		this._off( target, "mouseleave focusout keyup" );                                                                    // 16501
                                                                                                                       // 16502
		// Remove 'remove' binding only on delegated targets                                                                 // 16503
		if ( target[ 0 ] !== this.element[ 0 ] ) {                                                                           // 16504
			this._off( target, "remove" );                                                                                      // 16505
		}                                                                                                                    // 16506
		this._off( this.document, "mousemove" );                                                                             // 16507
                                                                                                                       // 16508
		if ( event && event.type === "mouseleave" ) {                                                                        // 16509
			$.each( this.parents, function( id, parent ) {                                                                      // 16510
				$( parent.element ).attr( "title", parent.title );                                                                 // 16511
				delete that.parents[ id ];                                                                                         // 16512
			});                                                                                                                 // 16513
		}                                                                                                                    // 16514
                                                                                                                       // 16515
		tooltipData.closing = true;                                                                                          // 16516
		this._trigger( "close", event, { tooltip: tooltip } );                                                               // 16517
		if ( !tooltipData.hiding ) {                                                                                         // 16518
			tooltipData.closing = false;                                                                                        // 16519
		}                                                                                                                    // 16520
	},                                                                                                                    // 16521
                                                                                                                       // 16522
	_tooltip: function( element ) {                                                                                       // 16523
		var tooltip = $( "<div>" )                                                                                           // 16524
				.attr( "role", "tooltip" )                                                                                         // 16525
				.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +                                               // 16526
					( this.options.tooltipClass || "" ) ),                                                                            // 16527
			id = tooltip.uniqueId().attr( "id" );                                                                               // 16528
                                                                                                                       // 16529
		$( "<div>" )                                                                                                         // 16530
			.addClass( "ui-tooltip-content" )                                                                                   // 16531
			.appendTo( tooltip );                                                                                               // 16532
                                                                                                                       // 16533
		tooltip.appendTo( this.document[0].body );                                                                           // 16534
                                                                                                                       // 16535
		return this.tooltips[ id ] = {                                                                                       // 16536
			element: element,                                                                                                   // 16537
			tooltip: tooltip                                                                                                    // 16538
		};                                                                                                                   // 16539
	},                                                                                                                    // 16540
                                                                                                                       // 16541
	_find: function( target ) {                                                                                           // 16542
		var id = target.data( "ui-tooltip-id" );                                                                             // 16543
		return id ? this.tooltips[ id ] : null;                                                                              // 16544
	},                                                                                                                    // 16545
                                                                                                                       // 16546
	_removeTooltip: function( tooltip ) {                                                                                 // 16547
		tooltip.remove();                                                                                                    // 16548
		delete this.tooltips[ tooltip.attr( "id" ) ];                                                                        // 16549
	},                                                                                                                    // 16550
                                                                                                                       // 16551
	_destroy: function() {                                                                                                // 16552
		var that = this;                                                                                                     // 16553
                                                                                                                       // 16554
		// close open tooltips                                                                                               // 16555
		$.each( this.tooltips, function( id, tooltipData ) {                                                                 // 16556
			// Delegate to close method to handle common cleanup                                                                // 16557
			var event = $.Event( "blur" ),                                                                                      // 16558
				element = tooltipData.element;                                                                                     // 16559
			event.target = event.currentTarget = element[ 0 ];                                                                  // 16560
			that.close( event, true );                                                                                          // 16561
                                                                                                                       // 16562
			// Remove immediately; destroying an open tooltip doesn't use the                                                   // 16563
			// hide animation                                                                                                   // 16564
			$( "#" + id ).remove();                                                                                             // 16565
                                                                                                                       // 16566
			// Restore the title                                                                                                // 16567
			if ( element.data( "ui-tooltip-title" ) ) {                                                                         // 16568
				// If the title attribute has changed since open(), don't restore                                                  // 16569
				if ( !element.attr( "title" ) ) {                                                                                  // 16570
					element.attr( "title", element.data( "ui-tooltip-title" ) );                                                      // 16571
				}                                                                                                                  // 16572
				element.removeData( "ui-tooltip-title" );                                                                          // 16573
			}                                                                                                                   // 16574
		});                                                                                                                  // 16575
		this.liveRegion.remove();                                                                                            // 16576
	}                                                                                                                     // 16577
});                                                                                                                    // 16578
                                                                                                                       // 16579
                                                                                                                       // 16580
                                                                                                                       // 16581
}));                                                                                                                   // 16582
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['linto:jquery-ui'] = {};

})();
